add_namespace = SM_and_RS_GUI_events

### States Management and Research Savings GUI events ###

country_event = { # Weekly Recalculations for Research Savings GUI
	id = SM_and_RS_GUI_events.1
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				has_country_flag = RS_GUI_unlocked_flag
			}
			
			set_variable = { RS_engineering_25_boost_cost_var = num_of_civilian_factories }
			multiply_variable = { RS_engineering_25_boost_cost_var = 1.6 }
			
			set_variable = { RS_engineering_50_boost_cost_var = RS_engineering_25_boost_cost_var }
			multiply_variable = { RS_engineering_50_boost_cost_var = 1.8 }
			
			set_variable = { RS_industry_25_boost_cost_var = RS_engineering_25_boost_cost_var }
			set_variable = { RS_industry_50_boost_cost_var = RS_engineering_50_boost_cost_var }
			
			set_variable = { RS_total_industrial_savings_clamper_var = RS_engineering_50_boost_cost_var }
			multiply_variable = { RS_total_industrial_savings_clamper_var = 2.5 }
			
			if = { # more efficient spending
				limit = {
					amount_taken_ideas = {
						amount > 0
						
						slots = { industrial_concern }
					}
				}
				
				if = {
					limit = {
						has_idea_with_trait = industrial_concern
					}
					
					multiply_variable = { RS_industry_25_boost_cost_var = 0.8 }
					multiply_variable = { RS_industry_50_boost_cost_var = 0.8 }
				}
				else_if = {
					limit = {
						has_idea_with_trait = electronics_concern
					}
					
					multiply_variable = { RS_engineering_25_boost_cost_var = 0.8 }
					multiply_variable = { RS_engineering_50_boost_cost_var = 0.8 }
				}
				else = {
					multiply_variable = { RS_industry_25_boost_cost_var = 0.9 }
					multiply_variable = { RS_industry_50_boost_cost_var = 0.9 }
					
					multiply_variable = { RS_engineering_25_boost_cost_var = 0.9 }
					multiply_variable = { RS_engineering_50_boost_cost_var = 0.9 }
				}
			}
			else = {
				multiply_variable = { RS_industry_25_boost_cost_var = 1.2 }
				multiply_variable = { RS_industry_50_boost_cost_var = 1.2 }
				
				multiply_variable = { RS_engineering_25_boost_cost_var = 1.2 }
				multiply_variable = { RS_engineering_50_boost_cost_var = 1.2 }
			}
			
			set_variable = { RS_infantry_25_boost_cost_var = num_of_military_factories }
			multiply_variable = { RS_infantry_25_boost_cost_var = 1.6 }
			
			set_variable = { RS_infantry_50_boost_cost_var = RS_infantry_25_boost_cost_var }
			multiply_variable = { RS_infantry_50_boost_cost_var = 1.8 }
			
			set_variable = { RS_total_army_savings_clamper_var = RS_infantry_50_boost_cost_var }
			multiply_variable = { RS_total_army_savings_clamper_var = 3 }
			
			set_variable = { RS_air_25_boost_cost_var = RS_infantry_25_boost_cost_var }
			multiply_variable = { RS_air_25_boost_cost_var = 1.5 }
			
			set_variable = { RS_air_50_boost_cost_var = RS_infantry_50_boost_cost_var }
			multiply_variable = { RS_air_50_boost_cost_var = 1.5 }
			
			set_variable = { RS_total_air_savings_clamper_var = RS_air_50_boost_cost_var }
			multiply_variable = { RS_total_air_savings_clamper_var = 3 }
			
			if = { # more efficient spending
				limit = {
					amount_taken_ideas = {
						amount < 1
						
						slots = { aircraft_manufacturer }
					}
				}
				
				multiply_variable = { RS_air_25_boost_cost_var = 1.2 }
				multiply_variable = { RS_air_50_boost_cost_var = 1.2 }
			}
			
			set_variable = { RS_armor_25_boost_cost_var = RS_infantry_25_boost_cost_var }
			set_variable = { RS_armor_50_boost_cost_var = RS_infantry_50_boost_cost_var }
			
			if = { # more efficient spending
				limit = {
					amount_taken_ideas = {
						amount < 1
						
						slots = { tank_manufacturer }
					}
				}
				
				multiply_variable = { RS_armor_25_boost_cost_var = 1.2 }
				multiply_variable = { RS_armor_50_boost_cost_var = 1.2 }
			}
			
			set_variable = { RS_artillery_25_boost_cost_var = RS_infantry_25_boost_cost_var }
			set_variable = { RS_artillery_50_boost_cost_var = RS_infantry_50_boost_cost_var }
			
			if = { # more efficient spending
				limit = {
					amount_taken_ideas = {
						amount > 0
						
						slots = { materiel_manufacturer }
					}
				}
				
				if = {
					limit = {
						has_idea_with_trait = NTR_infantry_equipment_manufacturer
					}
					
					multiply_variable = { RS_infantry_25_boost_cost_var = 0.8 }
					multiply_variable = { RS_infantry_50_boost_cost_var = 0.8 }
				}
				else_if = {
					limit = {
						has_idea_with_trait = NTR_artillery_manufacturer
					}
					
					multiply_variable = { RS_artillery_25_boost_cost_var = 0.8 }
					multiply_variable = { RS_artillery_50_boost_cost_var = 0.8 }
				}
				else = {
					multiply_variable = { RS_infantry_25_boost_cost_var = 0.9 }
					multiply_variable = { RS_infantry_50_boost_cost_var = 0.9 }
					
					multiply_variable = { RS_artillery_25_boost_cost_var = 0.9 }
					multiply_variable = { RS_artillery_50_boost_cost_var = 0.9 }
				}
			}
			else = {
				multiply_variable = { RS_infantry_25_boost_cost_var = 1.2 }
				multiply_variable = { RS_infantry_50_boost_cost_var = 1.2 }
				
				multiply_variable = { RS_artillery_25_boost_cost_var = 1.2 }
				multiply_variable = { RS_artillery_50_boost_cost_var = 1.2 }
			}
			
			set_variable = { RS_naval_25_boost_cost_var = num_of_naval_factories }
			multiply_variable = { RS_naval_25_boost_cost_var = 1.6 }
			
			set_variable = { RS_naval_50_boost_cost_var = RS_naval_25_boost_cost_var }
			multiply_variable = { RS_naval_50_boost_cost_var = 1.8 }
			
			set_variable = { RS_total_naval_savings_clamper_var = RS_naval_50_boost_cost_var }
			multiply_variable = { RS_total_naval_savings_clamper_var = 2 }
			
			if = {
				limit = {
					amount_taken_ideas = {
						amount < 1
						
						slots = { naval_manufacturer }
					}
				}
				
				multiply_variable = { RS_naval_25_boost_cost_var = 1.2 }
				multiply_variable = { RS_naval_50_boost_cost_var = 1.2 }
			}
			
			country_event = {
				id = SM_and_RS_GUI_events.1
				days = 7
			}
		}
		else = {
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.1 stopped"
		}
	}
}

country_event = { # Daily Increase of RS_total_industrial_savings_var
	id = SM_and_RS_GUI_events.2
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				check_variable = { RS_daily_industrial_savings_var > 0 }
			}
			
			if = {
				limit = {
					check_variable = { RS_total_industrial_savings_var < RS_total_industrial_savings_clamper_var }
				}
				
				add_to_variable = { RS_total_industrial_savings_var = RS_daily_industrial_savings_var }
				
				clamp_variable = {
					var = RS_total_industrial_savings_var
					max = RS_total_industrial_savings_clamper_var
				}
			}
			
			country_event = {
				id = SM_and_RS_GUI_events.2
				days = 1
			}
		}
		else = {
			clear_variable = RS_daily_industrial_savings_var
			
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.2 stopped"
		}
	}
}

country_event = { # Weekly Recalculation of SM_complexes vars
	id = SM_and_RS_GUI_events.3
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				check_variable = { SM_country_amount_of_complexes > 0 }
			}
			
			set_temp_variable = { SM_local_resources_updater_temp_var = 1 }
			add_to_temp_variable = { SM_local_resources_updater_temp_var = modifier@local_resources_factor }
			multiply_temp_variable = { SM_local_resources_updater_temp_var = SM_base_local_resources_var?0.04 }
			
			set_temp_variable = { SM_dynamic_state_monthly_population_updater_temp_var = 1 }
			add_to_temp_variable = { SM_dynamic_state_monthly_population_updater_temp_var = modifier@production_speed_buildings_factor }
			multiply_temp_variable = { SM_dynamic_state_monthly_population_updater_temp_var = SM_base_local_monthly_population_var?0.04 }
			
			for_each_scope_loop = {
				array = SM_states_with_dynamic_modifiers_from_complexes
				
				if = {
					limit = {
						industrial_complex > 0
					}
					
					if = {
						limit = {
							check_variable = { SM_state_amount_of_complexes > building_level@industrial_complex }
						}
						
						subtract_from_variable = { ROOT.SM_country_amount_of_complexes = SM_state_amount_of_complexes }
						add_to_variable = { ROOT.SM_negative_industrial_factory_donations_var = SM_state_amount_of_complexes }
						set_variable = { SM_state_amount_of_complexes = building_level@industrial_complex }
						add_to_variable = { ROOT.SM_country_amount_of_complexes = SM_state_amount_of_complexes }
						subtract_from_variable = { ROOT.SM_negative_industrial_factory_donations_var = SM_state_amount_of_complexes }
					}
					
					set_variable = { SM_local_resources_var = ROOT.SM_local_resources_updater_temp_var }
					multiply_variable = { SM_local_resources_var = SM_state_amount_of_complexes }
					
					subtract_from_variable = { SM_state_monthly_population_var = SM_dynamic_state_monthly_population_var }
					
					set_variable = { SM_dynamic_state_monthly_population_var = ROOT.SM_dynamic_state_monthly_population_updater_temp_var }
					multiply_variable = { SM_dynamic_state_monthly_population_var = SM_state_amount_of_complexes }
					
					add_to_variable = { SM_state_monthly_population_var = SM_dynamic_state_monthly_population_var }
				}
				else = {
					remove_dynamic_modifier = { modifier = SM_state_complexes_modifier }
					
					subtract_from_variable = { ROOT.SM_country_amount_of_complexes = SM_state_amount_of_complexes }
					add_to_variable = { ROOT.SM_negative_industrial_factory_donations_var = SM_state_amount_of_complexes }
					
					clear_variable = SM_state_amount_of_complexes
					
					remove_from_array = {
						array = ROOT.SM_states_with_dynamic_modifiers_from_complexes
						value = THIS
					}
				}
			}
			
			if = {
				limit = {
					check_variable = { SM_country_amount_of_complexes > 0 }
				}
				
				if = {
					limit = {
						has_completed_focus = NTR_the_future_planning_committee
					}
					
					set_variable = { RS_daily_industrial_savings_var = 1 }
					add_to_variable = { RS_daily_industrial_savings_var = modifier@research_speed_factor }
					multiply_variable = { RS_daily_industrial_savings_var = SM_country_amount_of_complexes }
					
					if = {
						limit = {
							has_completed_focus = NTR_establishing_the_supracommunal_committee
						}
						
						multiply_variable = { RS_daily_industrial_savings_var = 0.024 }
					}
					else = {
						multiply_variable = { RS_daily_industrial_savings_var = 0.02 }
					}
				}
				
				country_event = {
					id = SM_and_RS_GUI_events.3
					days = 7
				}
			}
			else = {
				remove_dynamic_modifier = { modifier = SM_country_complexes_modifier }
				clear_variable = SM_negative_industrial_factory_donations_var
				clear_variable = SM_country_amount_of_complexes
				
				log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.3 stopped"
			}
		}
		else = {
			clear_variable = SM_country_amount_of_complexes
			
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.3 stopped"
		}
	}
}

country_event = { # Daily Increase of RS_total_army_savings_var (and RS_total_air_savings_var)
	id = SM_and_RS_GUI_events.4
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				check_variable = { RS_daily_army_savings_var > 0 }
			}
			
			add_to_variable = { RS_total_army_savings_var = RS_daily_army_savings_var }
			
			if = {
				limit = {
					check_variable = { RS_total_army_savings_var < RS_total_army_savings_clamper_var }
				}
				
				add_to_variable = { RS_total_army_savings_var = RS_daily_army_savings_var }
				
				clamp_variable = {
					var = RS_total_army_savings_var
					max = RS_total_army_savings_clamper_var
				}
			}
			
			if = {
				limit = {
					has_variable = RS_daily_air_savings_var
				}
				
				add_to_variable = { RS_total_air_savings_var = RS_daily_air_savings_var }
				
				if = {
					limit = {
						check_variable = { RS_total_air_savings_var < RS_total_air_savings_clamper_var }
					}
					
					add_to_variable = { RS_total_air_savings_var = RS_daily_air_savings_var }
					
					clamp_variable = {
						var = RS_total_air_savings_var
						max = RS_total_air_savings_clamper_var
					}
				}
			}
			
			country_event = {
				id = SM_and_RS_GUI_events.4
				days = 1
			}
		}
		else = {
			clear_variable = RS_daily_army_savings_var
			
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.4 stopped"
		}
	}
}

country_event = { # Recalculation of SM_country_factories_modifier vars
	id = SM_and_RS_GUI_events.5
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				check_variable = { SM_country_amount_of_factories > 0 }
			}
			
			if = {
				limit = {
					any_of_scopes = {
						array = core_states
						
						check_variable = { SM_state_amount_of_factories > building_level@arms_factory }
					}
				}
				
				for_each_scope_loop = {
					array = core_states
					
					if = {
						limit = {
							check_variable = { SM_state_amount_of_factories > building_level@arms_factory }
						}
						
						subtract_from_variable = { ROOT.SM_country_amount_of_factories = SM_state_amount_of_factories }
						add_to_variable = { ROOT.SM_negative_military_factory_donations_var = SM_state_amount_of_factories }
						
						if = {
							limit = {
								arms_factory > 0
							}
							
							set_variable = { SM_state_amount_of_factories = building_level@arms_factory }
							
							add_to_variable = { ROOT.SM_country_amount_of_factories = SM_state_amount_of_factories }
							subtract_from_variable = { ROOT.SM_negative_military_factory_donations_var = SM_state_amount_of_factories }
						}
						else = {
							clear_variable = SM_state_amount_of_factories
						}
						
						if = {
							limit = {
								check_variable = { SM_country_amount_of_factories = 0 }
							}
							
							set_temp_variable = { break = 1 }
						}
					}
				}
				
				if = {
					limit = {
						check_variable = { SM_country_amount_of_factories = 0 }
					}
					
					remove_dynamic_modifier = { modifier = SM_country_factories_modifier }
					
					clear_variable = SM_country_amount_of_factories
					clear_variable = SM_negative_military_factory_donations_var
					clear_variable = SM_experience_gain_army_var
					
					if = {
						limit = {
							has_variable = SM_weekly_manpower_var
						}
						
						clear_variable = SM_weekly_manpower_var
					}
					if = {
						limit = {
							has_variable = SM_experience_gain_air_var
						}
						
						clear_variable = SM_experience_gain_air_var
					}
					
					log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.5 stopped"
					break = yes
				}
			}
			
			set_variable = { SM_experience_gain_army_var = 1 }
			add_to_variable = { SM_experience_gain_army_var = modifier@industrial_capacity_factory }
			multiply_variable = { SM_experience_gain_army_var = SM_country_amount_of_factories }
			
			if = {
				limit = {
					has_country_flag = SM_weekly_ponypower_unlocked_flag
				}
				
				SM_calculate_bonus_ponypower_percentage = yes
				
				set_variable = { SM_weekly_manpower_var = SM_experience_gain_army_var }
				multiply_variable = { SM_weekly_manpower_var = 20 }
				multiply_variable = { SM_weekly_manpower_var = SM_bonus_consciptors_percentage_var }
			}
			
			if = {
				limit = {
					has_completed_focus = NTR_the_future_planning_committee
				}
				
				set_variable = { RS_daily_army_savings_var = 1 }
				add_to_variable = { RS_daily_army_savings_var = modifier@research_speed_factor }
				multiply_variable = { RS_daily_army_savings_var = SM_country_amount_of_factories }
			}
			
			if = {
				limit = {
					has_completed_focus = NTR_a_northern_airforce
				}
				
				set_variable = { SM_experience_gain_air_var = SM_experience_gain_army_var }
				multiply_variable = { SM_experience_gain_air_var = SM_basic_air_experience_var?0.01 }
				
				if = {
					limit = {
						has_completed_focus = NTR_the_future_planning_committee
					}
					
					set_variable = { RS_daily_air_savings_var = RS_daily_army_savings_var }
					divide_variable = { RS_daily_air_savings_var = 2 }
				}
			}
			
			multiply_variable = { SM_experience_gain_army_var = SM_basic_army_experience_var?0.02 }
			
			country_event = {
				id = SM_and_RS_GUI_events.5
				days = 7
			}
		}
		else = {
			clear_variable = SM_country_amount_of_factories
			
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.5 stopped"
		}
	}
}

country_event = { # Daily increase of RS_total_naval_savings_var
	id = SM_and_RS_GUI_events.6
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				check_variable = { RS_daily_naval_savings_var > 0 }
			}
			
			add_to_variable = { RS_total_naval_savings_var = RS_daily_naval_savings_var }
			
			if = {
				limit = {
					check_variable = { RS_total_naval_savings_var < RS_total_naval_savings_clamper_var }
				}
				
				add_to_variable = { RS_total_naval_savings_var = RS_daily_naval_savings_var }
				
				clamp_variable = {
					var = RS_total_naval_savings_var
					max = RS_total_naval_savings_clamper_var
				}
			}
			
			country_event = {
				id = SM_and_RS_GUI_events.6
				days = 1
			}
		}
		else = {
			clear_variable = RS_daily_naval_savings_var
			
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.6 stopped"
		}
	}
}

country_event = { # Recalculation of SM_country_dockyards_modifier vars
	id = SM_and_RS_GUI_events.7
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				check_variable = { SM_country_amount_of_dockyards > 0 }
			}
			
			if = {
				limit = {
					has_completed_focus = NTR_northern_free_trade_area
				}
				
				if = {
					limit = {
						NOT = { has_variable = SM_needed_resources_updater_var }
					}
					
					# Newest Array #
					
					if = {
						limit = { check_variable = { resource_consumed@crystals > 0 } }
						add_to_array = { SM_needed_resources = resource@crystals }
					}
					else = {
						add_to_array = { SM_needed_resources = 10000 }
					}
					if = {
						limit = { check_variable = { resource_consumed@chromium > 0 } }
						add_to_array = { SM_needed_resources = resource@chromium }
					}
					else = {
						add_to_array = { SM_needed_resources = 10000 }
					}
					if = {
						limit = { check_variable = { resource_consumed@rubber > 0 } }
						add_to_array = { SM_needed_resources = resource@rubber }
					}
					else = {
						add_to_array = { SM_needed_resources = 10000 }
					}
					if = {
						limit = { check_variable = { resource_consumed@aluminium > 0 } }
						add_to_array = { SM_needed_resources = resource@aluminium }
					}
					else = {
						add_to_array = { SM_needed_resources = 10000 }
					}
					if = {
						limit = { check_variable = { resource_consumed@tungsten > 0 } }
						add_to_array = { SM_needed_resources = resource@tungsten }
					}
					else = {
						add_to_array = { SM_needed_resources = 10000 }
					}
					if = {
						limit = { check_variable = { resource_consumed@steel > 0 } }
						add_to_array = { SM_needed_resources = resource@steel }
					}
					else = {
						add_to_array = { SM_needed_resources = 10000 }
					}
					
					SM_calculate_not_export_multiplier_and_array_updater_variable = yes
					
					country_event = {
						id = SM_and_RS_GUI_events.8
						hours = 1
					}
				}
				
				if = {
					limit = {
						any_of_scopes = {
							array = SM_states_with_dockyards_donations
							
							check_variable = { SM_state_amount_of_dockyards > building_level@dockyard }
						}
					}
					
					for_each_scope_loop = {
						array = SM_states_with_dockyards_donations
						
						if = {
							limit = {
								check_variable = { SM_state_amount_of_dockyards > building_level@dockyard }
							}
							
							subtract_from_variable = { ROOT.SM_country_amount_of_dockyards = SM_state_amount_of_dockyards }
							
							if = {
								limit = {
									check_variable = {
										var = modifier@local_resources
										compare = not_equals
										value = 0
									}
								}
								
								SM_calculate_resources_updater_with_local_modifier = yes
								
								while_loop_effect = {
									limit = { always = yes } # do_while
									
									subtract_from_variable = { SM_state_amount_of_dockyards = 1 }
									
									if = {
										limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 0 } }
										add_resource = { type = aluminium amount = -2 }
										add_to_variable = { ROOT.SM_needed_resources^0 = SM_needed_resources_local_updater_temp_var }
									}
									else_if = {
										limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 1 } }
										add_resource = { type = rubber amount = -2 }
										add_to_variable = { ROOT.SM_needed_resources^1 = SM_needed_resources_local_updater_temp_var }
									}
									else_if = {
										limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 2 } }
										add_resource = { type = tungsten amount = -2 }
										add_to_variable = { ROOT.SM_needed_resources^2 = SM_needed_resources_local_updater_temp_var }
									}
									else_if = {
										limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 3 } }
										add_resource = { type = steel amount = -2 }
										add_to_variable = { ROOT.SM_needed_resources^3 = SM_needed_resources_local_updater_temp_var }
									}
									else_if = {
										limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 4 } }
										add_resource = { type = chromium amount = -2 }
										add_to_variable = { ROOT.SM_needed_resources^4 = SM_needed_resources_local_updater_temp_var }
									}
									else = {
										add_resource = { type = crystals amount = -2 }
										add_to_variable = { ROOT.SM_needed_resources^5 = SM_needed_resources_local_updater_temp_var }
									}
									
									remove_from_array = {
										array = SM_state_bonus_resources
										index = SM_needed_resources_updater_var
									}
									
									if = {
										limit = {
											check_variable = { SM_state_amount_of_dockyards = building_level@dockyard }
										}
										
										set_temp_variable = { break = 1 }
									}
								}
							}
							else = {
								while_loop_effect = {
									limit = { always = yes } # do_while
									
									subtract_from_variable = { SM_state_amount_of_dockyards = 1 }
									
									if = {
										limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 0 } }
										add_resource = { type = aluminium amount = -2 }
										add_to_variable = { ROOT.SM_needed_resources^0 = ROOT.SM_needed_resources_updater_var }
									}
									else_if = {
										limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 1 } }
										add_resource = { type = rubber amount = -2 }
										add_to_variable = { ROOT.SM_needed_resources^1 = ROOT.SM_needed_resources_updater_var }
									}
									else_if = {
										limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 2 } }
										add_resource = { type = tungsten amount = -2 }
										add_to_variable = { ROOT.SM_needed_resources^2 = ROOT.SM_needed_resources_updater_var }
									}
									else_if = {
										limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 3 } }
										add_resource = { type = steel amount = -2 }
										add_to_variable = { ROOT.SM_needed_resources^3 = ROOT.SM_needed_resources_updater_var }
									}
									else_if = {
										limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 4 } }
										add_resource = { type = chromium amount = -2 }
										add_to_variable = { ROOT.SM_needed_resources^4 = ROOT.SM_needed_resources_updater_var }
									}
									else = {
										add_resource = { type = crystals amount = -2 }
										add_to_variable = { ROOT.SM_needed_resources^5 = ROOT.SM_needed_resources_updater_var }
									}
									
									remove_from_array = {
										array = SM_state_bonus_resources
										index = SM_needed_resources_updater_var
									}
									
									if = {
										limit = {
											check_variable = { SM_state_amount_of_dockyards = building_level@dockyard }
										}
										
										set_temp_variable = { break = 1 }
									}
								}
							}
							
							add_to_variable = { ROOT.SM_country_amount_of_dockyards = SM_state_amount_of_dockyards }
							
							if = {
								limit = {
									check_variable = { SM_state_amount_of_dockyards = 0 }
								}
								
								remove_from_array = {
									array = ROOT.SM_states_with_dockyards_donations
									value = THIS
								}
							}
						}
					}
					
					if = {
						limit = {
							check_variable = { SM_country_amount_of_dockyards = 0 }
						}
						
						remove_dynamic_modifier = { modifier = SM_country_dockyards_modifier }
						
						clear_variable = SM_country_amount_of_dockyards
						clear_variable = SM_negative_dockyard_donations_var
						
						if = {
							limit = {
								has_variable = RS_daily_naval_savings_var
							}
							
							set_variable = { RS_daily_naval_savings_var = 0 }
						}
						
						log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.7 stopped"
						break = yes
					}
				}
				
				find_lowest_in_array = {
					array = SM_needed_resources
					index = SM_most_needed_resource_index_temp_var
				}
				
				if = {
					limit = {
						any_of_scopes = { # check for consistency of the possible recalculation loop
							array = SM_states_with_dockyards_donations
							
							any_of = {
								array = SM_state_bonus_resources
								
								check_variable = {
									var = v
									compare = not_equals
									value = ROOT.SM_most_needed_resource_index_temp_var
								}
							}
						}
					}
					
					set_temp_variable = { SM_least_important_bonus_resource_index_temp_var = 0 }
					
					for_loop_effect = {
						start = 5
						compare = greater_than_or_equals
						add = -1
						value = SM_bonus_resources_index_temp_var
						
						if = {
							limit = {
								any_of_scopes = { # check for the presence of this resource among the bonus resources
									array = SM_states_with_dockyards_donations
									
									any_of = {
										array = SM_state_bonus_resources
										
										check_variable = { v = PREV.SM_bonus_resources_index_temp_var }
									}
								}
							}
							
							for_each_scope_loop = {
								array = SM_states_with_dockyards_donations
								
								for_each_loop = {
									array = SM_state_bonus_resources
									
									if = {
										limit = {
											check_variable = { v = PREV.SM_bonus_resources_index_temp_var }
										}
										
										if = {
											limit = {
												check_variable = {
													var = modifier@local_resources
													compare = not_equals
													value = 0
												}
											}
											
											SM_calculate_resources_updater_with_local_modifier = yes
											
											add_to_temp_array = { ROOT.SM_country_bonus_resources^v = SM_needed_resources_local_updater_temp_var }
										}
										else = {
											add_to_temp_array = { ROOT.SM_country_bonus_resources^v = ROOT.SM_needed_resources_updater_var }
										}
									}
								}
							}
							
							if = {
								limit = {
									check_variable = {
										var = SM_needed_resources^SM_bonus_resources_index_temp_var
										compare = greater_than_or_equals
										value = SM_needed_resources^SM_least_important_bonus_resource_index_temp_var
									}
								}
								
								set_temp_variable = { SM_least_important_bonus_resource_index_temp_var = SM_bonus_resources_index_temp_var }
							}
						}
						else = {
							add_to_temp_array = { SM_country_bonus_resources^SM_bonus_resources_index_temp_var = 0 }
						}
					}
					
					set_temp_variable = { SM_least_important_bonus_resource_value_temp_var = SM_needed_resources^SM_least_important_bonus_resource_index_temp_var }
					subtract_from_temp_variable = { SM_least_important_bonus_resource_value_temp_var = SM_most_needed_resource_index_temp_var }
					
					if = {
						limit = {
							check_variable = { SM_least_important_bonus_resource_value_temp_var > SM_needed_resources_updater_var } # if the difference between the most and least bonus resources is greater than the change after one iteration, then we can start a recalculation cycle
						}
						
						for_loop_effect = {
							compare = less_than_or_equals
							end = 5
							
							find_lowest_in_array = { array = SM_needed_resources }
							
							add_to_temp_array = { SM_needed_resources_in_descending_order = i }
							
							remove_from_array = {
								array = SM_needed_resources
								index = i # from find_lowest_in_array function
							}
						}
						
						if = {
							limit = { check_variable = { resource_consumed@crystals > 0 } }
							add_to_array = { SM_needed_resources = resource@crystals }
						}
						else = {
							add_to_array = { SM_needed_resources = 10000 }
						}
						if = {
							limit = { check_variable = { resource_consumed@chromium > 0 } }
							add_to_array = { SM_needed_resources = resource@chromium }
						}
						else = {
							add_to_array = { SM_needed_resources = 10000 }
						}
						if = {
							limit = { check_variable = { resource_consumed@rubber > 0 } }
							add_to_array = { SM_needed_resources = resource@rubber }
						}
						else = {
							add_to_array = { SM_needed_resources = 10000 }
						}
						if = {
							limit = { check_variable = { resource_consumed@aluminium > 0 } }
							add_to_array = { SM_needed_resources = resource@aluminium }
						}
						else = {
							add_to_array = { SM_needed_resources = 10000 }
						}
						if = {
							limit = { check_variable = { resource_consumed@tungsten > 0 } }
							add_to_array = { SM_needed_resources = resource@tungsten }
						}
						else = {
							add_to_array = { SM_needed_resources = 10000 }
						}
						if = {
							limit = { check_variable = { resource_consumed@steel > 0 } }
							add_to_array = { SM_needed_resources = resource@steel }
						}
						else = {
							add_to_array = { SM_needed_resources = 10000 }
						}
						
						while_loop_effect = {
							limit = { always = yes } # do_while
							break = SM_bonus_resources_recalculation_break_temp_var
							
							for_loop_effect = {
								start = 5
								end = 1
								add = -1
								value = SM_needed_resources_in_ascending_order_recalculation_index_temp_var
								break = SM_needed_resources_in_ascending_order_recalculation_break_temp_var
								
								set_temp_variable = { SM_least_important_bonus_resource_index_temp_var = SM_needed_resources_in_descending_order^SM_needed_resources_in_ascending_order_recalculation_index_temp_var }
								
								if = {
									limit = {
										check_variable = { SM_country_bonus_resources^SM_least_important_bonus_resource_index_temp_var > 0 }
									}
									
									while_loop_effect = {
										limit = { always = yes } # do_while
										break = SM_needed_resources_recalculation_break_temp_var
										
										random_scope_in_array = {
											array = SM_states_with_dockyards_donations
											
											limit = {
												any_of = {
													array = SM_state_bonus_resources
													
													check_variable = { v = PREV.SM_least_important_bonus_resource_index_temp_var }
													
													NOT = {
														any_of_scopes = {
															array = ROOT.SM_states_with_dockyards_donations
															
															check_variable = { modifier@local_resources > PREV.modifier@local_resources }
															
															any_of = {
																array = SM_state_bonus_resources
																
																check_variable = { v = PREV.PREV.SM_least_important_bonus_resource_index_temp_var }
															}
														}
													}
												}
											}
											
											if = {
												limit = { check_variable = { PREV.SM_least_important_bonus_resource_index_temp_var = 0 } }
												add_resource = { type = crystals amount = -2 }
											}
											else_if = {
												limit = { check_variable = { PREV.SM_least_important_bonus_resource_index_temp_var = 1 } }
												add_resource = { type = chromium amount = -2 }
											}
											else_if = {
												limit = { check_variable = { PREV.SM_least_important_bonus_resource_index_temp_var = 2 } }
												add_resource = { type = rubber amount = -2 }
											}
											else_if = {
												limit = { check_variable = { PREV.SM_least_important_bonus_resource_index_temp_var = 3 } }
												add_resource = { type = aluminium amount = -2 }
											}
											else_if = {
												limit = { check_variable = { PREV.SM_least_important_bonus_resource_index_temp_var = 4 } }
												add_resource = { type = tungsten amount = -2 }
											}
											else = {
												add_resource = { type = steel amount = -2 }
											}
											
											if = {
												limit = { check_variable = { ROOT.SM_needed_resources_in_descending_order^0 = 5 } }
												add_resource = { type = steel amount = 2 }
											}
											else_if = {
												limit = { check_variable = { ROOT.SM_needed_resources_in_descending_order^0 = 4 } }
												add_resource = { type = tungsten amount = 2 }
											}
											else_if = {
												limit = { check_variable = { ROOT.SM_needed_resources_in_descending_order^0 = 3 } }
												add_resource = { type = aluminium amount = 2 }
											}
											else_if = {
												limit = { check_variable = { ROOT.SM_needed_resources_in_descending_order^0 = 2 } }
												add_resource = { type = rubber amount = 2 }
											}
											else_if = {
												limit = { check_variable = { ROOT.SM_needed_resources_in_descending_order^0 = 1 } }
												add_resource = { type = chromium amount = 2 }
											}
											else = {
												add_resource = { type = crystals amount = 2 }
											}
											
											if = {
												limit = {
													check_variable = {
														var = modifier@local_resources
														compare = not_equals
														value = 0
													}
												}
												
												SM_calculate_resources_updater_with_local_modifier = yes
												
												subtract_from_temp_variable = { ROOT.SM_country_bonus_resources^PREV.SM_least_important_bonus_resource_index_temp_var = SM_needed_resources_local_updater_temp_var }
												add_to_temp_variable = { ROOT.SM_country_bonus_resources^ROOT.SM_needed_resources_in_descending_order^0 = SM_needed_resources_local_updater_temp_var }
												
												subtract_from_variable = { ROOT.SM_needed_resources^PREV.SM_least_important_bonus_resource_index_temp_var = SM_needed_resources_local_updater_temp_var }
												add_to_variable = { ROOT.SM_needed_resources^ROOT.SM_needed_resources_in_descending_order^0 = SM_needed_resources_local_updater_temp_var }
											}
											else = {
												subtract_from_temp_variable = { ROOT.SM_country_bonus_resources^PREV.SM_least_important_bonus_resource_index_temp_var = ROOT.SM_needed_resources_updater_var }
												add_to_temp_variable = { ROOT.SM_country_bonus_resources^ROOT.SM_needed_resources_in_descending_order^0 = ROOT.SM_needed_resources_updater_var }
												
												subtract_from_variable = { ROOT.SM_needed_resources^PREV.SM_least_important_bonus_resource_index_temp_var = SM_needed_resources_updater_var }
												add_to_variable = { ROOT.SM_needed_resources^ROOT.SM_needed_resources_in_descending_order^0 = SM_needed_resources_updater_var }
											}
										}
										
										set_temp_variable = { SM_most_important_bonus_resource_index_temp_var = SM_needed_resources_in_descending_order^0 }
										
										set_temp_variable = { SM_needed_resources_order_recalculation_index_temp_var = SM_needed_resources_in_ascending_order_recalculation_index_temp_var }
										subtract_from_temp_variable = { SM_needed_resources_order_recalculation_index_temp_var = 1 }
										
										for_loop_effect = {
											start = SM_needed_resources_order_recalculation_index_temp_var
											compare = greater_than_or_equals
											add = -1
											value = SM_needed_resources_order_recalculation_value_temp_var
											
											set_temp_variable = { SM_needed_resources_in_ascending_order_index_checker_temp_var = SM_needed_resources_in_descending_order^SM_needed_resources_order_recalculation_value_temp_var }
											
											if = {
												limit = {
													check_variable = { SM_needed_resources^SM_needed_resources_in_ascending_order_index_checker_temp_var < SM_needed_resources^SM_least_important_bonus_resource_index_temp_var }
												}
												
												set_temp_variable = { SM_needed_resources_in_descending_order^SM_needed_resources_order_recalculation_value_temp_var = SM_needed_resources_in_descending_order^SM_needed_resources_order_recalculation_index_temp_var }
												
												if = {
													limit = {
														check_variable = { SM_needed_resources_order_recalculation_value_temp_var = 0 }
													}
													
													set_temp_variable = { SM_needed_resources_in_descending_order_index_mover_temp_var = 2 }
												}
											}
											else = {
												if = {
													limit = {
														check_variable = { SM_needed_resources_order_recalculation_value_temp_var < SM_needed_resources_order_recalculation_index_temp_var }
													}
													
													set_temp_variable = { SM_needed_resources_in_descending_order^SM_needed_resources_order_recalculation_value_temp_var = SM_least_important_bonus_resource_index_temp_var }
												}
												
												set_temp_variable = { SM_needed_resources_in_descending_order_index_mover_temp_var = 1 }
												
												set_temp_variable = { break = 1 }
											}
										}
										
										set_temp_variable = { SM_needed_resources_order_recalculation_index_temp_var = SM_needed_resources_in_descending_order_index_mover_temp_var }
										subtract_from_temp_variable = { SM_needed_resources_order_recalculation_index_temp_var = 1 }
										
										for_loop_effect = {
											start = SM_needed_resources_in_descending_order_index_mover_temp_var
											compare = less_than_or_equals
											end = 5
											value = SM_needed_resources_order_recalculation_value_temp_var
											
											if = {
												limit = {
													check_variable = { SM_needed_resources^SM_needed_resources_order_recalculation_value_temp_var > SM_needed_resources^0 }
												}
												
												set_variable = { SM_needed_resources_in_descending_order^SM_needed_resources_order_recalculation_value_temp_var = SM_needed_resources_in_descending_order^SM_needed_resources_order_recalculation_index_temp_var }
											}
											else = {
												if = {
													limit = {
														check_variable = { SM_needed_resources_order_recalculation_value_temp_var > SM_needed_resources_in_descending_order_index_mover_temp_var }
													}
													
													set_variable = { SM_needed_resources_in_descending_order^SM_needed_resources_order_recalculation_value_temp_var = SM_most_important_bonus_resource_index_temp_var }
												}
												
												set_temp_variable = { break = 1 }
											}
										}
										
										for_loop_effect = {
											compare = less_than_or_equals
											end = 5
											value = SM_bonus_resources_index_temp_var
											
											if = {
												limit = {
													check_variable = { SM_bonus_resources^SM_bonus_resources_index_temp_var > 0 }
													check_variable = { SM_needed_resources^SM_bonus_resources_index_temp_var > SM_needed_resources^SM_least_important_bonus_resource_index_temp_var }
												}
												
												set_temp_variable = { SM_least_important_bonus_resource_index_temp_var = SM_bonus_resources_index_temp_var }
											}
										}
										
										set_temp_variable = { SM_least_important_bonus_resource_value_temp_var = SM_needed_resources^SM_least_important_bonus_resource_index_temp_var }
										subtract_from_temp_variable = { SM_least_important_bonus_resource_value_temp_var = SM_needed_resources^SM_needed_resources_in_descending_order^0 }
										
										if = {
											limit = {
												check_variable = { SM_least_important_bonus_resource_value_temp_var > SM_needed_resources_updater_var }
												check_variable = { SM_needed_resources_in_ascending_order_recalculation_index_temp_var > 1 }
											}
											
											if = {
												limit = {
													check_variable = {
														var = SM_needed_resources_in_descending_order^0
														compare = not_equals
														value = SM_most_important_bonus_resource_index_temp_var
													}
												}
												
												set_temp_variable = { SM_needed_resources_in_ascending_order_recalculation_break_temp_var = 1 }
												set_temp_variable = { SM_needed_resources_recalculation_break_temp_var = 1 }
											}
											else_if = {
												limit = {
													check_variable = { SM_country_bonus_resources^SM_needed_resources_in_ascending_order_recalculation_index_temp_var = 0 }
												}
												
												set_temp_variable = { SM_needed_resources_recalculation_break_temp_var = 1 }
											}
										}
										else = {
											set_temp_variable = { SM_bonus_resources_recalculation_break_temp_var = 1 }
											set_temp_variable = { SM_needed_resources_in_ascending_order_recalculation_break_temp_var = 1 }
											set_temp_variable = { SM_needed_resources_recalculation_break_temp_var = 1 }
										}
									}
								}
								else_if = {
									limit = {
										check_variable = { SM_needed_resources_in_ascending_order_recalculation_index_temp_var = 1 }
									}
									
									set_temp_variable = { SM_bonus_resources_recalculation_break_temp_var = 1 }
								}
							}
						}
					}
				}
			}
			else = {
				if = {
					limit = {
						any_of_scopes = {
							array = SM_states_with_dockyards_donations
							
							check_variable = { SM_state_amount_of_dockyards > building_level@dockyard }
						}
					}
					
					for_each_scope_loop = {
						array = SM_states_with_dockyards_donations
						
						if = {
							limit = {
								check_variable = { SM_state_amount_of_dockyards > building_level@dockyard }
							}
							
							subtract_from_variable = { ROOT.SM_country_amount_of_dockyards = SM_state_amount_of_dockyards }
							
							if = {
								limit = {
									dockyard > 0
								}
								
								set_variable = { SM_state_amount_of_dockyards = building_level@dockyard }
								add_to_variable = { ROOT.SM_country_amount_of_dockyards = SM_state_amount_of_dockyards }
							}
							else = {
								clear_variable = SM_state_amount_of_dockyards
							}
						}
					}
					
					if = {
						limit = {
							check_variable = { SM_country_amount_of_dockyards = 0 }
						}
						
						remove_dynamic_modifier = { modifier = SM_country_dockyards_modifier }
						
						clear_variable = SM_country_amount_of_dockyards
						clear_variable = SM_negative_dockyard_donations_var
						
						log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.7 stopped"
						break = yes
					}
				}
			}
			
			set_variable = { SM_experience_gain_navy_var = 1 }
			add_to_variable = { SM_experience_gain_navy_var = modifier@industrial_capacity_dockyard }
			multiply_variable = { SM_experience_gain_navy_var = SM_country_amount_of_dockyards }
			multiply_variable = { SM_experience_gain_navy_var = SM_basic_navy_experience_var?0.02 }
			
			if = {
				limit = {
					has_completed_focus = NTR_founding_the_northern_navy
					has_completed_focus = NTR_the_future_planning_committee
				}
				
				set_variable = { RS_daily_naval_savings_var = 1 }
				add_to_variable = { RS_daily_naval_savings_var = modifier@research_speed_factor }
				multiply_variable = { RS_daily_naval_savings_var = SM_country_amount_of_factories }
				
				if = {
					limit = {
						has_completed_focus = NTR_establishing_the_supracommunal_committee
					}
					
					multiply_variable = { RS_daily_naval_savings_var = 0.024 }
				}
				else = {
					multiply_variable = { RS_daily_naval_savings_var = 0.02 }
				}
			}
			
			country_event = {
				id = SM_and_RS_GUI_events.7
				days = 7
			}
		}
		else = {
			clear_variable = SM_country_amount_of_dockyards
			
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.7 stopped"
		}
	}
}

country_event = { # Cleans temporary needed things for bonus resources from guilds' dockyards
	id = SM_and_RS_GUI_events.8
	immediate = { log = "[GetDateText]: [Root.GetName]: event SM_and_RS_GUI_events.8" }
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		clear_array = SM_needed_resources
		
		clear_variable = SM_needed_resources_updater_var
	}
}

country_event = { # Consumer goods complexes industrial development
	id = SM_and_RS_GUI_events.9
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		set_variable = { RS_consumer_goods_complexes_savings_var = num_of_civilian_factories }
		add_to_variable  = { RS_consumer_goods_complexes_savings_var = num_of_military_factories }
		multiply_variable = { RS_consumer_goods_complexes_savings_var = modifier@consumer_goods_factor }
		
		clamp_variable = {
			var = RS_consumer_goods_complexes_savings_var
			max = num_of_civilian_factories
		}
		
		multiply_variable = { RS_consumer_goods_complexes_savings_var = 0.005 }
		
		add_to_variable = { RS_total_industrial_savings_var = RS_consumer_goods_complexes_savings_var }
		
		country_event = {
			id = SM_and_RS_GUI_events.9
			days = 1
		}
	}
}
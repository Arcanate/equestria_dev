add_namespace = SM_and_RS_GUI_events

### States Management and Research Savings GUI events ###

country_event = { # Weekly Recalculation of Research Boosts Costs
	id = SM_and_RS_GUI_events.1
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				has_country_flag = RS_GUI_unlocked
			}
			
			set_variable = { RS_engineering_25_boost_cost = num_of_civilian_factories }
			multiply_variable = { RS_engineering_25_boost_cost = 2.5 }
			
			set_variable = { RS_engineering_50_boost_cost = RS_engineering_25_boost_cost }
			multiply_variable = { RS_engineering_50_boost_cost = 1.8 }
			
			set_variable = { RS_industry_25_boost_cost = RS_engineering_25_boost_cost }
			set_variable = { RS_industry_50_boost_cost = RS_engineering_50_boost_cost }
			
			if = { # more efficient spending
				limit = {
					amount_taken_ideas = {
						amount > 0
						
						slots = { industrial_concern }
					}
				}
				
				if = {
					limit = {
						has_idea_with_trait = industrial_concern
					}
					
					multiply_variable = { RS_industry_25_boost_cost = 0.8 }
					multiply_variable = { RS_industry_50_boost_cost = 0.8 }
				}
				else_if = {
					limit = {
						has_idea_with_trait = electronics_concern
					}
					
					multiply_variable = { RS_engineering_25_boost_cost = 0.8 }
					multiply_variable = { RS_engineering_50_boost_cost = 0.8 }
				}
				else = {
					multiply_variable = { RS_industry_25_boost_cost = 0.9 }
					multiply_variable = { RS_industry_50_boost_cost = 0.9 }
					
					multiply_variable = { RS_engineering_25_boost_cost = 0.9 }
					multiply_variable = { RS_engineering_50_boost_cost = 0.9 }
				}
			}
			else = {
				multiply_variable = { RS_industry_25_boost_cost = 1.2 }
				multiply_variable = { RS_industry_50_boost_cost = 1.2 }
				
				multiply_variable = { RS_engineering_25_boost_cost = 1.2 }
				multiply_variable = { RS_engineering_50_boost_cost = 1.2 }
			}
			
			set_variable = { RS_infantry_25_boost_cost = num_of_military_factories }
			multiply_variable = { RS_infantry_25_boost_cost = 2.5 }
			
			set_variable = { RS_infantry_50_boost_cost = RS_infantry_25_boost_cost }
			multiply_variable = { RS_infantry_50_boost_cost = 1.8 }
			
			set_variable = { RS_air_25_boost_cost = RS_infantry_25_boost_cost }
			set_variable = { RS_air_50_boost_cost = RS_infantry_50_boost_cost }
			
			if = { # more efficient spending
				limit = {
					amount_taken_ideas = {
						amount < 1
						
						slots = { aircraft_manufacturer }
					}
				}
				
				multiply_variable = { RS_air_25_boost_cost = 1.2 }
				multiply_variable = { RS_air_50_boost_cost = 1.2 }
			}
			
			set_variable = { RS_armor_25_boost_cost = RS_infantry_25_boost_cost }
			set_variable = { RS_armor_50_boost_cost = RS_infantry_50_boost_cost }
			
			if = { # more efficient spending
				limit = {
					amount_taken_ideas = {
						amount < 1
						
						slots = { tank_manufacturer }
					}
				}
				
				multiply_variable = { RS_armor_25_boost_cost = 1.2 }
				multiply_variable = { RS_armor_50_boost_cost = 1.2 }
			}
			
			set_variable = { RS_artillery_25_boost_cost = RS_infantry_25_boost_cost }
			set_variable = { RS_artillery_50_boost_cost = RS_infantry_50_boost_cost }
			
			if = { # more efficient spending
				limit = {
					amount_taken_ideas = {
						amount > 0
						
						slots = { materiel_manufacturer }
					}
				}
				
				if = {
					limit = {
						has_idea_with_trait = NTR_infantry_equipment_manufacturer
					}
					
					multiply_variable = { RS_infantry_25_boost_cost = 0.8 }
					multiply_variable = { RS_infantry_50_boost_cost = 0.8 }
				}
				else_if = {
					limit = {
						has_idea_with_trait = NTR_artillery_manufacturer
					}
					
					multiply_variable = { RS_artillery_25_boost_cost = 0.8 }
					multiply_variable = { RS_artillery_50_boost_cost = 0.8 }
				}
				else = {
					multiply_variable = { RS_infantry_25_boost_cost = 0.9 }
					multiply_variable = { RS_infantry_50_boost_cost = 0.9 }
					
					multiply_variable = { RS_artillery_25_boost_cost = 0.9 }
					multiply_variable = { RS_artillery_50_boost_cost = 0.9 }
				}
			}
			else = {
				multiply_variable = { RS_infantry_25_boost_cost = 1.2 }
				multiply_variable = { RS_infantry_50_boost_cost = 1.2 }
				
				multiply_variable = { RS_artillery_25_boost_cost = 1.2 }
				multiply_variable = { RS_artillery_50_boost_cost = 1.2 }
			}
			
			set_variable = { RS_naval_25_boost_cost = num_of_naval_factories }
			multiply_variable = { RS_naval_25_boost_cost = 2.5 }
			
			set_variable = { RS_naval_50_boost_cost = RS_naval_25_boost_cost }
			multiply_variable = { RS_naval_50_boost_cost = 1.8 }
			
			if = {
				limit = {
					amount_taken_ideas = {
						amount < 1
						
						slots = { naval_manufacturer }
					}
				}
				
				multiply_variable = { RS_naval_25_boost_cost = 1.2 }
				multiply_variable = { RS_naval_50_boost_cost = 1.2 }
			}
			
			country_event = {
				id = SM_and_RS_GUI_events.1
				days = 7
			}
		}
		else = {
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.1 stopped"
		}
	}
}

country_event = { # Daily Increase of RS_civil_savings_sum_var
	id = SM_and_RS_GUI_events.2
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				check_variable = { RS_civil_savings_var > 0 }
			}
			
			add_to_variable = { RS_civil_savings_sum_var = RS_civil_savings_var }
			
			country_event = {
				id = SM_and_RS_GUI_events.2
				days = 1
			}
		}
		else = {
			clear_variable = RS_civil_savings_var
			
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.2 stopped"
		}
	}
}

country_event = { # Weekly Recalculation of SM_complexes vars
	id = SM_and_RS_GUI_events.3
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				check_variable = { SM_country_amount_of_complexes > 0 }
			}
			
			for_each_scope_loop = {
				array = SM_states_with_modifiers_from_complexes
				
				remove_dynamic_modifier = { modifier = SM_state_complexes_modifier }
				
				if = {
					limit = {
						industrial_complex > 0
					}
					
					if = {
						limit = {
							check_variable = { SM_state_amount_of_complexes > industrial_complex }
						}
						
						subtract_from_variable = { ROOT.SM_country_amount_of_complexes = SM_state_amount_of_complexes }
						set_variable = { SM_state_amount_of_complexes = industrial_complex }
						add_to_variable = { ROOT.SM_country_amount_of_complexes = SM_state_amount_of_complexes }
					}
					
					set_variable = { SM_local_resources_var = 1 }
					add_to_variable = { SM_local_resources_var = ROOT.modifier@local_resources_factor }
					multiply_variable = { SM_local_resources_var = 0.05 }
					multiply_variable = { SM_local_resources_var = SM_state_amount_of_complexes }
					
					add_dynamic_modifier = { modifier = SM_state_complexes_modifier }
					
					subtract_from_variable = { SM_state_monthly_population_var = SM_dynamic_state_monthly_population_var }
					
					set_variable = { SM_dynamic_state_monthly_population_var = 1 }
					add_to_variable = { SM_dynamic_state_monthly_population_var = ROOT.modifier@production_speed_buildings_factor }
					multiply_variable = { SM_dynamic_state_monthly_population_var = 0.05 }
					multiply_variable = { SM_dynamic_state_monthly_population_var = SM_state_amount_of_complexes }
					
					add_to_variable = { SM_state_monthly_population_var = SM_dynamic_state_monthly_population_var }
					
					set_temp_variable = { SM_dynamic_bonus_weekly_population_temp_var = SM_dynamic_state_monthly_population_var }
					divide_temp_variable = { SM_dynamic_bonus_weekly_population_temp_var = 4.285 }
					multiply_temp_variable = { SM_dynamic_bonus_weekly_population_temp_var = ROOT.modifier@monthly_population }
					multiply_temp_variable = { SM_dynamic_bonus_weekly_population_temp_var = state_population }
					
					add_manpower = SM_dynamic_bonus_weekly_population_temp_var
				}
				else = {
					subtract_from_variable = { ROOT.SM_country_amount_of_complexes = SM_state_amount_of_complexes }
					
					clear_variable = SM_state_amount_of_complexes
				}
			}
			
			if = {
				limit = {
					check_variable = { SM_country_amount_of_complexes < modifier@industrial_factory_donations }
				}
				
				remove_dynamic_modifier = { modifier = SM_country_complexes_modifier }
				
				if = {
					limit = {
						check_variable = { SM_country_amount_of_complexes > 0 }
					}
					
					add_dynamic_modifier = { modifier = SM_country_complexes_modifier }
				}
				else = {
					clear_variable = SM_country_amount_of_complexes
					
					log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.3 stopped"
					break = yes
				}
			}
			
			if = {
				limit = {
					has_completed_focus = NTR_the_future_planning_committee
				}
				
				set_variable = { RS_civil_savings_var = 1 }
				add_to_variable = { RS_civil_savings_var = modifier@research_speed_factor }
				multiply_variable = { RS_civil_savings_var = 0.02 }
				multiply_variable = { RS_civil_savings_var = SM_country_amount_of_complexes }
				
				if = {
					limit = {
						has_completed_focus = NTR_establishing_the_supracommunal_committee
					}
					
					multiply_variable = { RS_civil_savings_var = 1.2 }
				}
			}
			
			country_event = {
				id = SM_and_RS_GUI_events.3
				days = 7
			}
		}
		else = {
			clear_array = SM_states_with_modifiers_from_complexes
			
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.3 stopped"
		}
	}
}

country_event = { # Daily Increase of RS_army_savings_sum_var (and RS_air_savings_sum_var)
	id = SM_and_RS_GUI_events.4
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				check_variable = { RS_army_savings_var > 0 }
			}
			
			add_to_variable = { RS_army_savings_sum_var = RS_army_savings_var }
			
			if = {
				limit = {
					has_variable = RS_air_savings_var
				}
				
				add_to_variable = { RS_air_savings_sum_var = RS_air_savings_var }
			}
			
			country_event = {
				id = SM_and_RS_GUI_events.4
				days = 1
			}
		}
		else = {
			clear_variable = RS_army_savings_var
			
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.4 stopped"
		}
	}
}

country_event = { # Recalculation of SM_country_factories_modifier vars
	id = SM_and_RS_GUI_events.5
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				check_variable = { SM_country_amount_of_factories > 0 }
			}
			
			remove_dynamic_modifier = { modifier = SM_country_factories_modifier }
			
			if = {
				limit = {
					any_of_scopes = {
						array = core_states
						
						check_variable = { SM_state_amount_of_factories > arms_factory }
					}
				}
				
				for_each_scope_loop = {
					array = core_states
					
					if = {
						limit = {
							check_variable = { SM_state_amount_of_factories > arms_factory }
						}
						
						subtract_from_variable = { ROOT.SM_country_amount_of_factories = SM_state_amount_of_factories }
						
						if = {
							limit = {
								arms_factory > 0
							}
							
							set_variable = { SM_state_amount_of_factories = arms_factory }
							
							add_to_variable = { ROOT.SM_country_amount_of_factories = SM_state_amount_of_factories }
						}
						else = {
							clear_variable = SM_state_amount_of_factories
						}
					}
				}
				
				if = {
					limit = {
						check_variable = { SM_country_amount_of_factories = 0 }
					}
					
					clear_variable = SM_country_amount_of_factories
					
					log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.5 stopped"
					break = yes
				}
			}
			
			set_variable = { SM_experience_gain_army_var = 1 }
			add_to_variable = { SM_experience_gain_army_var = modifier@industrial_capacity_factory }
			multiply_variable = { SM_experience_gain_army_var = SM_country_amount_of_factories }
			
			if = {
				limit = {
					has_country_flag = SM_weekly_ponypower_unlocked_flag
				}
				
				SM_calculate_bonus_ponypower_percentage = yes
				
				set_variable = { SM_weekly_manpower_var = SM_experience_gain_army_var }
				multiply_variable = { SM_weekly_manpower_var = 25 }
				multiply_variable = { SM_weekly_manpower_var = SM_bonus_consciptors_percentage_var }
			}
			
			multiply_variable = { SM_experience_gain_army_var = 0.02 }
			
			if = {
				limit = {
					has_completed_focus = NTR_the_future_planning_committee
				}
				
				set_variable = { RS_army_savings_var = 1 }
				add_to_variable = { RS_army_savings_var = modifier@research_speed_factor }
				multiply_variable = { RS_army_savings_var = 0.02 }
				multiply_variable = { RS_army_savings_var = SM_country_amount_of_factories }
				
				if = {
					limit = {
						has_completed_focus = NTR_establishing_the_supracommunal_committee
					}
					
					multiply_variable = { RS_army_savings_var = 1.2 }
				}
			}
			
			if = {
				limit = {
					has_deployed_air_force_size = { size > 0 }
				}
				
				set_variable = { SM_experience_gain_air_var = SM_experience_gain_army_var }
				
				if = {
					limit = {
						has_completed_focus = NTR_the_future_planning_committee
					}
					
					set_variable = { RS_air_savings_var = RS_army_savings_var }
					divide_variable = { RS_air_savings_var = 2 }
				}
			}
			
			add_dynamic_modifier = { modifier = SM_country_factories_modifier }
			
			country_event = {
				id = SM_and_RS_GUI_events.5
				days = 7
			}
		}
		else = {
			clear_variable = SM_country_amount_of_factories
			
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.5 stopped"
		}
	}
}

country_event = { # Daily increase of RS_naval_savings_var_sum
	id = SM_and_RS_GUI_events.6
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				check_variable = { RS_naval_savings_var > 0 }
			}
			
			add_to_variable = { RS_naval_savings_var_sum = RS_naval_savings_var }
			
			country_event = {
				id = SM_and_RS_GUI_events.6
				days = 1
			}
		}
		else = {
			clear_variable = RS_naval_savings_var
			
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.6 stopped"
		}
	}
}

country_event = { # Recalculation of SM_state_dockyards_modifier vars
	id = SM_and_RS_GUI_events.7
	hidden = yes
	
	is_triggered_only = yes
	fire_only_once = no
	
	option = {
		if = {
			limit = {
				check_variable = { SM_country_amount_of_dockyards > 0 }
			}
			
			remove_dynamic_modifier = { modifier = SM_state_dockyards_modifier }
			
			if = {
				limit = {
					any_of_scopes = {
						array = core_states
						
						check_variable = { SM_state_amount_of_dockyards > dockyard }
					}
				}
				
				if = {
					limit = {
						has_completed_focus = NTR_northern_free_trade_area
					}
					
					for_each_scope_loop = {
						array = core_states
						
						if = {
							limit = {
								check_variable = { SM_state_amount_of_dockyards > dockyard }
							}
							
							subtract_from_variable = { ROOT.SM_country_amount_of_dockyards = SM_state_amount_of_dockyards }
							
							while_loop_effect = {
								limit = { always = yes } # do_while
								
								if = {
									limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 0 } }
									add_resource = { type = oil amount = -2 }
								}
								else_if = {
									limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 1 } }
									add_resource = { type = aluminium amount = -2 }
								}
								else_if = {
									limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 2 } }
									add_resource = { type = rubber amount = -2 }
								}
								else_if = {
									limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 3 } }
									add_resource = { type = tungsten amount = -2 }
								}
								else_if = {
									limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 4 } }
									add_resource = { type = steel amount = -2 }
								}
								else_if = {
									limit = { check_variable = { SM_state_bonus_resources^SM_state_amount_of_dockyards = 5 } }
									add_resource = { type = chromium amount = -2 }
								}
								else = {
									add_resource = { type = crystals amount = -2 }
								}
								
								subtract_from_variable = { SM_state_amount_of_dockyards = 1 }
								
								if = {
									limit = {
										check_variable = { SM_state_amount_of_dockyards = dockyard }
									}
									
									set_temp_variable = { break = 1 }
								}
							}
							
							if = {
								limit = {
									dockyard > 0
								}
								
								set_variable = { SM_state_amount_of_dockyards = arms_factory }
								add_to_variable = { ROOT.SM_country_amount_of_dockyards = SM_state_amount_of_dockyards }
							}
							else = {
								clear_variable = SM_state_amount_of_dockyards
							}
						}
					}
				}
				else = {
					for_each_scope_loop = {
						array = core_states
						
						if = {
							limit = {
								check_variable = { SM_state_amount_of_dockyards > dockyard }
							}
							
							subtract_from_variable = { ROOT.SM_country_amount_of_dockyards = SM_state_amount_of_dockyards }
							
							if = {
								limit = {
									dockyard > 0
								}
								
								set_variable = { SM_state_amount_of_dockyards = arms_factory }
								add_to_variable = { ROOT.SM_country_amount_of_dockyards = SM_state_amount_of_dockyards }
							}
							else = {
								clear_variable = SM_state_amount_of_dockyards
							}
						}
					}
				}
				
				if = {
					limit = {
						check_variable = { SM_country_amount_of_dockyards = 0 }
					}
					
					clear_variable = SM_country_amount_of_dockyards
					
					log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.7 stopped"
					break = yes
				}
			}
			
			set_variable = { SM_experience_gain_navy_var = 1 }
			add_to_variable = { SM_experience_gain_navy_var = modifier@industrial_capacity_factory }
			multiply_variable = { SM_experience_gain_navy_var = 0.02 }
			multiply_variable = { SM_experience_gain_navy_var = SM_country_amount_of_dockyards }
			
			add_dynamic_modifier = { modifier = SM_state_dockyards_modifier }
			
			if = {
				limit = {
					has_completed_focus = NTR_the_future_planning_committee
				}
				
				set_variable = { RS_naval_savings_var = 1 }
				add_to_variable = { RS_naval_savings_var = modifier@research_speed_factor }
				multiply_variable = { RS_naval_savings_var = 0.02 }
				multiply_variable = { RS_naval_savings_var = SM_country_amount_of_factories }
				
				if = {
					limit = {
						has_completed_focus = NTR_establishing_the_supracommunal_committee
					}
					
					multiply_variable = { RS_naval_savings_var = 1.2 }
				}
			}
			
			if = {
				limit = {
					has_completed_focus = NTR_northern_free_trade_area
				}
				
				while_loop_effect = {
					limit = { always = yes } # break = out
					break = SM_bonus_resources_recalculation_break_temp_var
					
					add_to_array = { SM_resources = resource@oil }
					add_to_array = { SM_resources = resource@aluminium }
					add_to_array = { SM_resources = resource@rubber }
					add_to_array = { SM_resources = resource@tungsten }
					add_to_array = { SM_resources = resource@steel }
					add_to_array = { SM_resources = resource@chromium }
					add_to_array = { SM_resources = resource@crystals }
					
					find_lowest_in_array = { array = SM_required_resources }
					set_temp_variable = { SM_most_needed_resource_index_temp_var = i }
					
					clear_array = SM_required_resources
					
					if = {
						limit = {
							any_of_scopes = {
								array = core_states
								
								any_of = {
									array = SM_state_bonus_resources
									
									check_variable = {
										var = v
										compare = not_equals
										value = ROOT.SM_most_needed_resource_index_temp_var
									}
								}
							}
						}
						
						add_to_array = { SM_produced_resources = resource_produced@oil }
						add_to_array = { SM_produced_resources = resource_produced@aluminium }
						add_to_array = { SM_produced_resources = resource_produced@rubber }
						add_to_array = { SM_produced_resources = resource_produced@tungsten }
						add_to_array = { SM_produced_resources = resource_produced@steel }
						add_to_array = { SM_produced_resources = resource_produced@chromium }
						add_to_array = { SM_produced_resources = resource_produced@crystals }
						
						find_highest_in_array = { array = SM_produced_resources }
						set_temp_variable = { SM_least_needed_resource_index_temp_var = i }
						
						clear_array = SM_required_resources
						
						random_scope_in_array = {
							array = core_states
							
							limit = {
								any_of = {
									array = SM_state_bonus_resources
									
									check_variable = { v = ROOT.SM_least_needed_resource_index_temp_var }
								}
							}
							
							for_each_loop = {
								array = SM_state_bonus_resources
								
								if = {
									limit = {
										check_variable = { v = ROOT.SM_least_needed_resource_index_temp_var }
									}
									
									if = {
										limit = { check_variable = { v = 0 } }
										add_resource = { type = oil amount = -2 }
									}
									else_if = {
										limit = { check_variable = { v = 1 } }
										add_resource = { type = aluminium amount = -2 }
									}
									else_if = {
										limit = { check_variable = { v = 2 } }
										add_resource = { type = rubber amount = -2 }
									}
									else_if = {
										limit = { check_variable = { v = 3 } }
										add_resource = { type = tungsten amount = -2 }
									}
									else_if = {
										limit = { check_variable = { v = 4 } }
										add_resource = { type = steel amount = -2 }
									}
									else_if = {
										limit = { check_variable = { v = 5 } }
										add_resource = { type = chromium amount = -2 }
									}
									else = {
										add_resource = { type = crystals amount = -2 }
									}
									
									if = {
										limit = {
											if = {
												limit = { check_variable = { v = 0 } }
												check_variable = { ROOT.SM_most_needed_resource_index_temp_var < resource@oil }
											}
											else_if = {
												limit = { check_variable = { v = 1 } }
												check_variable = { ROOT.SM_most_needed_resource_index_temp_var < resource@aluminium }
											}
											else_if = {
												limit = { check_variable = { v = 2 } }
												check_variable = { ROOT.SM_most_needed_resource_index_temp_var < resource@rubber }
											}
											else_if = {
												limit = { check_variable = { v = 3 } }
												check_variable = { ROOT.SM_most_needed_resource_index_temp_var < resource@tungsten }
											}
											else_if = {
												limit = { check_variable = { v = 4 } }
												check_variable = { ROOT.SM_most_needed_resource_index_temp_var < resource@steel }
											}
											else_if = {
												limit = { check_variable = { v = 5 } }
												check_variable = { ROOT.SM_most_needed_resource_index_temp_var < resource@chromium }
											}
											else = {
												check_variable = { ROOT.SM_most_needed_resource_index_temp_var < resource@crystals }
											}
										}
										
										set_temp_variable = { v = ROOT.SM_most_needed_resource_index_temp_var }
										
										if = {
											limit = { check_variable = { v = 0 } }
											add_resource = { type = oil amount = 2 }
										}
										else_if = {
											limit = { check_variable = { v = 1 } }
											add_resource = { type = aluminium amount = 2 }
										}
										else_if = {
											limit = { check_variable = { v = 2 } }
											add_resource = { type = rubber amount = 2 }
										}
										else_if = {
											limit = { check_variable = { v = 3 } }
											add_resource = { type = tungsten amount = 2 }
										}
										else_if = {
											limit = { check_variable = { v = 4 } }
											add_resource = { type = steel amount = 2 }
										}
										else_if = {
											limit = { check_variable = { v = 5 } }
											add_resource = { type = chromium amount = 2 }
										}
										else = {
											add_resource = { type = crystals amount = 2 }
										}
										
										set_temp_variable = { break = 1 }
									}
									else = {
										if = {
											limit = { check_variable = { v = 0 } }
											add_resource = { type = oil amount = 2 }
										}
										else_if = {
											limit = { check_variable = { v = 1 } }
											add_resource = { type = aluminium amount = 2 }
										}
										else_if = {
											limit = { check_variable = { v = 2 } }
											add_resource = { type = rubber amount = 2 }
										}
										else_if = {
											limit = { check_variable = { v = 3 } }
											add_resource = { type = tungsten amount = 2 }
										}
										else_if = {
											limit = { check_variable = { v = 4 } }
											add_resource = { type = steel amount = 2 }
										}
										else_if = {
											limit = { check_variable = { v = 5 } }
											add_resource = { type = chromium amount = 2 }
										}
										else = {
											add_resource = { type = crystals amount = 2 }
										}
										
										set_temp_variable = { ROOT.SM_bonus_resources_recalculation_break_temp_var = 1 }
									}
								}
							}
						}
					}
					else = {
						set_temp_variable = { SM_bonus_resources_recalculation_break_temp_var = 1 }
					}
				}
			}
			
			country_event = {
				id = SM_and_RS_GUI_events.7
				days = 7
			}
		}
		else = {
			clear_variable = SM_country_amount_of_dockyards
			
			log = "[GetDateText]: [Root.GetName]: self-triggering event SM_and_RS_GUI_events.7 stopped"
		}
	}
}
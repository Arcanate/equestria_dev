on_actions = {
	# Months counter initialization
	on_startup = {
		effect = {
			set_variable = { global.month = 1 }
			
			NTR = {
				# Famine stuff
				country_event = { id = Ntribes.998 days = 274 random = 709 } # October-November
			}
		}
	}
	
	# ROOT is country, this is ran for every country
	on_monthly = {
		effect = {
			if = {
				limit = {
					NOT = { has_global_flag = on_monthly_done }
				}
				log = "[GetDateText]: global on_monthly"
				add_to_variable = { global.month = 1 }
				if = {
					limit = {
						check_variable = { global.month > 12 }
					}
					set_variable = { global.month = 1 }
				}
				set_global_flag = { flag = on_monthly_done value = 1 days = 1 }
			}
			
			# ON YEARLY
			if = {
				#don't touch!
				limit = {
					NOT = {
						check_variable = { global.last_year = global.year }
						has_global_flag = on_yearly_done
					}
				}
				#this is done only ONCE per year, even though on_daily fires for every country
				#will also be done on startup
				log = "[GetDateText]: global on_yearly"

				#your code here
				SRS = { country_event = socrep_grif.76 }
				
				NTR = {
					# Famine stuff
					set_variable = { NTR_next_year_agricultural_support_var = 1 }
					country_event = { id = Ntribes.998 days = 274 random = 720 } # October-November
				}
				
				# Dynamic monthly population
				every_country = {
					limit = {
						any_of_scopes = {
							array = controlled_states
							
							has_variable = SM_state_monthly_population_var
						}
					}
					
					set_temp_variable = { SM_state_monthly_population_multiplier_temp_var = 0.012 }
					add_to_temp_variable = { SM_state_monthly_population_multiplier_temp_var = modifier@monthly_population }
					
					for_each_scope_loop = {
						array = controlled_states
						
						set_temp_variable = { SM_state_monthly_population_temp_var = CONTROLLER.SM_state_monthly_population_multiplier_temp_var }
						multiply_temp_variable = { SM_state_monthly_population_temp_var = state_population_k }
						multiply_temp_variable = { SM_state_monthly_population_temp_var = SM_state_monthly_population_var }
						multiply_temp_variable = { SM_state_monthly_population_temp_var = 1000 }
						
						add_manpower = SM_state_monthly_population_temp_var
					}
				}
				
				# Winter & Frozen Seas System
				if = {
					limit = {
						OR = {
							has_global_flag = EaW_winter_system_on_global_flag
							
							country_exists = NTR # frosen_seas_dynamic_modifier
						}
						
						OR = {
							check_variable = { global.month < 7 }
							check_variable = { global.month > 9 }
						}
					}
					
					if = {
						limit = {
							check_variable = { global.month = 10 }
							
							has_global_flag = EaW_winter_system_on_global_flag
						}
						
						every_country = {
							limit = {
								any_of_scopes = {
									array = controlled_states
									
									check_variable = { EaW_state_winter_grade_var > 3 }
								}
							}
							
							for_each_scope_loop = {
								array = controlled_states
								
								if = {
									limit = {
										check_variable = { EaW_state_winter_grade_var > 3 }
									}
									
									add_to_array = { PREV.EaW_controlled_states_with_winter = THIS }
									
									calculate_EaW_state_winter_debuffer_in_October = yes
								}
							}
							
							country_event = Ntribes.902
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 11 }
						}
						
						if = {
							limit = {
								has_global_flag = EaW_winter_system_on_global_flag
							}
							
							every_country = {
								limit = {
									exists = yes
								}
								
								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
									}
									
									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes
									
									if = {
										limit = {
											any_of_scopes = {
												array = controlled_states
												
												check_variable = { EaW_state_winter_grade_var = 3 }
											}
										}
										
										for_each_scope_loop = {
											array = controlled_states
											
											if = {
												limit = {
													check_variable = { EaW_state_winter_grade_var = 3 }
												}
												
												add_to_array = { PREV.EaW_controlled_states_with_winter = THIS }
											}
										}
										
										for_each_scope_loop = {
											array = EaW_controlled_states_with_winter
											
											calculate_EaW_state_winter_debuffer_in_November = yes
										}
									}
									else = {
										for_each_scope_loop = {
											array = EaW_controlled_states_with_winter
											
											set_temp_variable = { EaW_state_winter_modifier_temp_var = EaW_state_winter_debuffer_var }
											divide_temp_variable = { EaW_state_winter_modifier_temp_var = 2 } # 0.5/0.4 -> 0.25/0.2
											add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_modifier_temp_var }
										}
										
										if = {
											limit = {
												check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.75 }
												check_variable = { EaW_controlled_states_with_winter^num = num_controlled_states } # all 4+
											}
											
											add_EaW_frozen_seas_dynamic_effects = yes
										}
									}
									
									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else_if = {
									limit = {
										any_of_scopes = {
											array = controlled_states
											
											check_variable = { EaW_state_winter_grade_var = 3 }
										}
									}
									
									for_each_scope_loop = {
										array = controlled_states
										
										if = {
											limit = {
												check_variable = { EaW_state_winter_grade_var = 3 }
											}
											
											add_to_array = { PREV.EaW_controlled_states_with_winter = THIS }
											
											set_temp_variable = { EaW_state_winter_modifier_temp_var = EaW_state_winter_debuffer_var }
											divide_temp_variable = { EaW_state_winter_modifier_temp_var = 3 } # 0.3 -> 0.1
											add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_modifier_temp_var }
										}
									}
									
									country_event = Ntribes.902
								}
							}
						}
						else_if = {
							limit = {
								country_exists = NTR
							}
							
							if = {
								limit = {
									NTR = {
										check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.75 }
										
										NOT = {
											any_of_scopes = {
												array = controlled_states
												
												is_coastal = yes
												is_in_home_area = yes
												
												check_variable = { EaW_state_winter_grade_var < 4 }
											}
										}
									}
								}
								
								NTR = { add_EaW_frozen_seas_dynamic_effects = yes }
							}
							
							if = {
								limit = {
									NTR = { has_civil_war = yes }
								}
								
								random_scope_in_array = {
									array = NTR.enemies
									
									limit = {
										check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.75 }
										
										NOT = {
											any_of_scopes = {
												array = controlled_states
												
												is_coastal = yes
												is_in_home_area = yes
												
												check_variable = { EaW_state_winter_grade_var < 4 }
											}
										}
									}
									
									add_EaW_frozen_seas_dynamic_effects = yes
								}
							}
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 12 }
						}
						
						if = {
							limit = {
								has_global_flag = EaW_winter_system_on_global_flag
							}
							
							every_country = {
								limit = {
									exists = yes
								}
								
								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
									}
									
									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes
									
									if = {
										limit = {
											any_of_scopes = {
												array = controlled_states
												
												check_variable = { EaW_state_winter_grade_var = 2 }
											}
										}
										
										for_each_scope_loop = {
											array = controlled_states
											
											if = {
												limit = {
													check_variable = { EaW_state_winter_grade_var = 2 }
												}
												
												add_to_array = { PREV.EaW_controlled_states_with_winter = THIS }
											}
										}
										
										for_each_scope_loop = {
											array = EaW_controlled_states_with_winter
											
											calculate_EaW_state_winter_debuffer_in_December = yes
										}
									}
									else = {
										for_each_scope_loop = {
											array = EaW_controlled_states_with_winter
											
											if = {
												limit = {
													check_variable = { EaW_state_winter_grade_var = 3 }
												}
												
												set_temp_variable = { EaW_state_winter_modifier_temp_var = EaW_state_winter_debuffer_var }
												divide_temp_variable = { EaW_state_winter_modifier_temp_var = 1.5 } # 0.3 -> 0.2
												add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_modifier_temp_var }
											}
											else = {
												set_temp_variable = { EaW_state_winter_modifier_temp_var = EaW_state_winter_debuffer_var }
												multiply_temp_variable = { EaW_state_winter_modifier_temp_var = 0.75 } # 0.5/0.4 -> 0.375/0.3
												add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_modifier_temp_var }
											}
										}
										
										if = {
											limit = {
												check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.5 }
												NOT = { has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier } }
												check_variable = { EaW_controlled_states_with_winter^num = num_controlled_states }
												
												if = {
													limit = {
														check_variable = {
															var = NTR_icebreakers_convoys_reversed_ratio_var
															compare = less_than_or_equals
															value = 0.75
														}
													}
													
													NOT = {
														any_of_scopes = {
															array = controlled_states
															
															is_coastal = yes
															is_in_home_area = yes
															
															check_variable = { EaW_state_winter_grade_var = 3 }
														}
													}
												}
											}
											
											add_EaW_frozen_seas_dynamic_effects = yes
										}
									}
									
									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else_if = {
									limit = {
										any_of_scopes = {
											array = controlled_states
											
											check_variable = { EaW_state_winter_grade_var = 2 }
										}
									}
									
									for_each_scope_loop = {
										array = controlled_states
										
										if = {
											limit = {
												check_variable = { EaW_state_winter_grade_var = 2 }
											}
											
											add_to_array = { PREV.EaW_controlled_states_with_winter = THIS }
											
											set_temp_variable = { EaW_state_winter_modifier_temp_var = EaW_state_winter_debuffer_var }
											divide_temp_variable = { EaW_state_winter_modifier_temp_var = 2 } # 0.2 -> 0.1
											add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_modifier_temp_var }
										}
									}
									
									country_event = Ntribes.902
								}
							}
						}
						else_if = {
							limit = {
								country_exists = NTR
							}
							
							if = {
								limit = {
									NTR = {
										NOT = { has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier } }
										check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.5 }
										
										if = {
											limit = {
												check_variable = {
													var = NTR_icebreakers_convoys_reversed_ratio_var
													compare = less_than_or_equals
													value = 0.75
												}
											}
											
											NOT = {
												any_of_scopes = {
													array = controlled_states
													
													is_coastal = yes
													is_in_home_area = yes
													
													check_variable = { EaW_state_winter_grade_var < 4 }
												}
											}
										}
										else = {
											NOT = {
												any_of_scopes = {
													array = controlled_states
													
													is_coastal = yes
													is_in_home_area = yes
													
													check_variable = { EaW_state_winter_grade_var < 3 }
												}
											}
										}
									}
								}
								
								NTR = { add_EaW_frozen_seas_dynamic_effects = yes }
							}
							
							if = {
								limit = {
									NTR = { has_civil_war = yes }
								}
								
								random_scope_in_array = {
									array = NTR.enemies
									
									limit = {
										check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.5 }
										NOT = { has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier } }
										
										if = {
											limit = {
												check_variable = {
													var = NTR_icebreakers_convoys_reversed_ratio_var
													compare = less_than_or_equals
													value = 0.75
												}
											}
											
											NOT = {
												any_of_scopes = {
													array = controlled_states
													
													is_coastal = yes
													is_in_home_area = yes
													
													check_variable = { EaW_state_winter_grade_var < 4 }
												}
											}
										}
										else = {
											NOT = {
												any_of_scopes = {
													array = controlled_states
													
													is_coastal = yes
													is_in_home_area = yes
													
													check_variable = { EaW_state_winter_grade_var < 3 }
												}
											}
										}
									}
									
									add_EaW_frozen_seas_dynamic_effects = yes
								}
							}
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 1 }
						}
						
						if = {
							limit = {
								has_global_flag = EaW_winter_system_on_global_flag
							}
							
							every_country = {
								limit = {
									exists = yes
								}
								
								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
									}
									
									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes
									
									for_each_scope_loop = {
										array = controlled_states
										
										if = {
											limit = {
												check_variable = { EaW_state_winter_grade_var = 1 }
											}
											
											add_to_array = { PREV.EaW_controlled_states_with_winter = THIS }
										}
									}
									
									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter
										
										add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_debuffer_var }
									}
									
									if = {
										limit = {
											check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.2 }
											NOT = { has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier } }
											check_variable = { EaW_controlled_states_with_winter^num = num_controlled_states }
											
											if = {
												limit = {
													check_variable = {
														var = NTR_icebreakers_convoys_reversed_ratio_var
														compare = less_than_or_equals
														value = 0.5
													}
												}
												
												NOT = {
													any_of_scopes = {
														array = controlled_states
														
														is_coastal = yes
														is_in_home_area = yes
														
														check_variable = { EaW_state_winter_grade_var < 4 }
													}
												}
											}
											else_if = {
												limit = {
													check_variable = {
														var = NTR_icebreakers_convoys_reversed_ratio_var
														compare = less_than_or_equals
														value = 0.75
													}
												}
												
												NOT = {
													any_of_scopes = {
														array = controlled_states
														
														is_coastal = yes
														is_in_home_area = yes
														
														check_variable = { EaW_state_winter_grade_var < 3 }
													}
												}
											}
										}
										
										add_EaW_frozen_seas_dynamic_effects = yes
									}
									
									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else_if = {
									limit = {
										any_of_scopes = {
											array = controlled_states
											
											check_variable = { EaW_state_winter_grade_var = 1 }
										}
									}
									
									for_each_scope_loop = {
										array = controlled_states
										
										if = {
											limit = {
												has_variable = EaW_state_winter_debuffer_var
											}
											
											add_to_array = { PREV.EaW_controlled_states_with_winter = THIS }
											add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_debuffer_var }
										}
									}
									
									country_event = Ntribes.902
								}
							}
						}
						else_if = {
							limit = {
								country_exists = NTR
							}
							
							if = {
								limit = {
									NTR = {
										NOT = { has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier } }
										check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.2 }
										
										if = {
											limit = {
												check_variable = {
													var = NTR_icebreakers_convoys_reversed_ratio_var
													compare = less_than_or_equals
													value = 0.5
												}
											}
											
											NOT = {
												any_of_scopes = {
													array = controlled_states
													
													is_coastal = yes
													is_in_home_area = yes
													
													check_variable = { EaW_state_winter_grade_var < 4 }
												}
											}
										}
										else_if = {
											limit = {
												check_variable = {
													var = NTR_icebreakers_convoys_reversed_ratio_var
													compare = less_than_or_equals
													value = 0.75
												}
											}
											
											NOT = {
												any_of_scopes = {
													array = controlled_states
													
													is_coastal = yes
													is_in_home_area = yes
													
													check_variable = { EaW_state_winter_grade_var < 3 }
												}
											}
										}
									}
								}
								
								NTR = { add_EaW_frozen_seas_dynamic_effects = yes }
							}
							
							if = {
								limit = {
									NTR = { has_civil_war = yes }
								}
								
								random_scope_in_array = {
									array = NTR.enemies
									
									limit = {
										check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.2 }
										NOT = { has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier } }
										
										if = {
											limit = {
												check_variable = {
													var = NTR_icebreakers_convoys_reversed_ratio_var
													compare = less_than_or_equals
													value = 0.5
												}
											}
											
											NOT = {
												any_of_scopes = {
													array = controlled_states
													
													is_coastal = yes
													is_in_home_area = yes
													
													check_variable = { EaW_state_winter_grade_var < 4 }
												}
											}
										}
										else_if = {
											limit = {
												check_variable = {
													var = NTR_icebreakers_convoys_reversed_ratio_var
													compare = less_than_or_equals
													value = 0.75
												}
											}
											
											NOT = {
												any_of_scopes = {
													array = controlled_states
													
													is_coastal = yes
													is_in_home_area = yes
													
													check_variable = { EaW_state_winter_grade_var < 3 }
												}
											}
										}
									}
									
									add_EaW_frozen_seas_dynamic_effects = yes
								}
							}
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 2 }
						}
						
						if = {
							limit = {
								has_global_flag = EaW_winter_system_on_global_flag
							}
							
							every_country = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
								}
								
								if = {
									limit = {
										any_of_scopes = {
											array = EaW_controlled_states_with_winter
											
											check_variable = { EaW_state_winter_grade_var > 1 }
										}
									}
									
									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes
									
									if = {
										limit = {
											any_of_scopes = {
												array = EaW_controlled_states_with_winter
												
												check_variable = { EaW_state_winter_grade_var = 2 }
											}
										}
										
										for_each_scope_loop = {
											array = EaW_controlled_states_with_winter
											
											if = {
												limit = {
													check_variable = { EaW_state_winter_grade_var > 1 }
												}
												
												calculate_EaW_state_winter_debuffer_in_February = yes
											}
											else = {
												remove_from_array = {
													array = PREV.EaW_controlled_states_with_winter
													value = THIS
												}
											}
										}
										
										if = {
											limit = {
												has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
											}
											
											remove_EaW_frozen_seas_effects = yes
										}
									}
									else = {
										for_each_scope_loop = {
											array = EaW_controlled_states_with_winter
											
											if = {
												limit = {
													check_variable = { EaW_state_winter_grade_var > 2 }
												}
												
												if = {
													limit = {
														check_variable = { EaW_state_winter_grade_var = 3 }
													}
													
													set_temp_variable = { EaW_state_winter_modifier_temp_var = EaW_state_winter_debuffer_var }
													divide_temp_variable = { EaW_state_winter_modifier_temp_var = 1.5 } # 0.3 -> 0.2
													add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_modifier_temp_var }
												}
												else_if = {
													limit = {
														check_variable = { EaW_state_winter_grade_var = 4 }
													}
													
													set_temp_variable = { EaW_state_winter_modifier_temp_var = EaW_state_winter_debuffer_var }
													multiply_temp_variable = { EaW_state_winter_modifier_temp_var = 0.75 } # 0.4 -> 0.3
													add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_modifier_temp_var }
												}
												else = {
													set_temp_variable = { EaW_state_winter_modifier_temp_var = EaW_state_winter_debuffer_var }
													multiply_temp_variable = { EaW_state_winter_modifier_temp_var = 0.8 } # 0.5 -> 0.4
													add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_modifier_temp_var }
												}
											}
											else = {
												remove_from_array = {
													array = PREV.EaW_controlled_states_with_winter
													value = THIS
												}
											}
										}
										
										if = {
											limit = {
												has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
												
												OR = {
													check_variable = { EaW_controlled_states_with_winter^num < num_controlled_states }
													
													check_variable = {
														var = NTR_icebreakers_convoys_reversed_ratio_var
														compare = less_than_or_equals
														value = 0.4
													}
													
													if = {
														check_variable = {
															var = NTR_icebreakers_convoys_reversed_ratio_var
															compare = less_than_or_equals
															value = 0.75
														}
														
														any_of_scopes = {
															array = EaW_controlled_states_with_winter
															
															is_coastal = yes
															is_in_home_area = yes
															
															check_variable = { EaW_state_winter_grade_var = 3 }
														}
													}
												}
											}
											
											remove_EaW_frozen_seas_effects = yes
										}
									}
									
									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									if = {
										limit = {
											has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
										}
										
										remove_EaW_frozen_seas_effects = yes
									}
									
									country_event = Ntribes.903
								}
							}
						}
						else_if = {
							limit = {
								country_exists = NTR
							}
							
							if = {
								limit = {
									NTR = {
										has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
										
										OR = {
											check_variable = {
												var = NTR_icebreakers_convoys_reversed_ratio_var
												compare = less_than_or_equals
												value = 0.4
											}
											
											if = {
												check_variable = {
													var = NTR_icebreakers_convoys_reversed_ratio_var
													compare = less_than_or_equals
													value = 0.75
												}
												
												any_of_scopes = {
													array = controlled_states
													
													is_coastal = yes
													is_in_home_area = yes
													
													check_variable = { EaW_state_winter_grade_var = 3 }
												}
											}
										}
									}
								}
								
								NTR = { remove_EaW_frozen_seas_effects = yes }
							}
							
							if = {
								limit = {
									NTR = { has_civil_war = yes }
								}
								
								random_scope_in_array = {
									array = NTR.enemies
									
									limit = {
										has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
										
										OR = {
											check_variable = {
												var = NTR_icebreakers_convoys_reversed_ratio_var
												compare = less_than_or_equals
												value = 0.4
											}
											
											if = {
												check_variable = {
													var = NTR_icebreakers_convoys_reversed_ratio_var
													compare = less_than_or_equals
													value = 0.8
												}
												
												any_of_scopes = {
													array = controlled_states
													
													is_coastal = yes
													is_in_home_area = yes
													
													check_variable = { EaW_state_winter_grade_var = 3 }
												}
											}
										}
									}
									
									remove_EaW_frozen_seas_effects = yes
								}
							}
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 3 }
						}
						
						if = {
							limit = {
								has_global_flag = EaW_winter_system_on_global_flag
							}
							
							every_country = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
								}
								
								if = {
									limit = {
										any_of_scopes = {
											array = EaW_controlled_states_with_winter
											
											check_variable = { EaW_state_winter_grade_var > 2 }
										}
									}
									
									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes
									
									if = {
										limit = {
											any_of_scopes = {
												array = EaW_controlled_states_with_winter
												
												check_variable = { EaW_state_winter_grade_var = 3 }
											}
										}
										
										for_each_scope_loop = {
											array = EaW_controlled_states_with_winter
											
											if = {
												limit = {
													check_variable = { EaW_state_winter_grade_var > 2 }
												}
												
												calculate_EaW_state_winter_debuffer_in_March = yes
											}
											else = {
												remove_from_array = {
													array = PREV.EaW_controlled_states_with_winter
													value = THIS
												}
											}
										}
										
										if = {
											limit = {
												has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
											}
											
											remove_EaW_frozen_seas_effects = yes
										}
									}
									else = {
										for_each_scope_loop = {
											array = EaW_controlled_states_with_winter
											
											if = {
												limit = {
													check_variable = { EaW_state_winter_grade_var > 3 }
												}
												
												if = {
													limit = {
														check_variable = { EaW_state_winter_grade_var = 4 }
													}
													
													set_temp_variable = { EaW_state_winter_modifier_temp_var = EaW_state_winter_debuffer_var }
													divide_temp_variable = { EaW_state_winter_modifier_temp_var = 2 } # 0.4 -> 0.2
													add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_modifier_temp_var }
												}
												else = {
													set_temp_variable = { EaW_state_winter_modifier_temp_var = EaW_state_winter_debuffer_var }
													multiply_temp_variable = { EaW_state_winter_modifier_temp_var = 0.6 } # 0.5 -> 0.3
													add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_modifier_temp_var }
												}
											}
											else = {
												remove_from_array = {
													array = PREV.EaW_controlled_states_with_winter
													value = THIS
												}
											}
										}
										
										if = {
											limit = {
												has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
												
												OR = {
													check_variable = { EaW_controlled_states_with_winter^num < num_controlled_states }
													
													check_variable = {
														var = NTR_icebreakers_convoys_reversed_ratio_var
														compare = less_than_or_equals
														value = 0.6
													}
												}
											}
											
											remove_EaW_frozen_seas_effects = yes
										}
									}
									
									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									if = {
										limit = {
											has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
										}
										
										remove_EaW_frozen_seas_effects = yes
									}
									
									country_event = Ntribes.903
								}
							}
						}
						else_if = {
							limit = {
								country_exists = NTR
							}
							
							if = {
								limit = {
									NTR = {
										has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
										
										OR = {
											check_variable = {
												var = NTR_icebreakers_convoys_reversed_ratio_var
												compare = less_than_or_equals
												value = 0.6
											}
										}
									}
								}
								
								NTR = { remove_EaW_frozen_seas_effects = yes }
							}
							
							if = {
								limit = {
									NTR = { has_civil_war = yes }
								}
								
								random_scope_in_array = {
									array = NTR.enemies
									
									limit = {
										has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
										
										OR = {
											check_variable = {
												var = NTR_icebreakers_convoys_reversed_ratio_var
												compare = less_than_or_equals
												value = 0.6
											}
										}
									}
									
									remove_EaW_frozen_seas_effects = yes
								}
							}
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 4 }
						}
						
						if = {
							limit = {
								has_global_flag = EaW_winter_system_on_global_flag
							}
							
							every_country = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
								}
								
								if = {
									limit = {
										any_of_scopes = {
											array = EaW_controlled_states_with_winter
											
											check_variable = { EaW_state_winter_grade_var > 3 }
										}
									}
									
									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes
									
									if = {
										limit = {
											any_of_scopes = {
												array = EaW_controlled_states_with_winter
												
												check_variable = { EaW_state_winter_grade_var = 4 }
											}
										}
										
										for_each_scope_loop = {
											array = EaW_controlled_states_with_winter
											
											if = {
												limit = {
													check_variable = { EaW_state_winter_grade_var > 3 }
												}
												
												calculate_EaW_state_winter_debuffer_in_April = yes
											}
											else = {
												remove_from_array = {
													array = PREV.EaW_controlled_states_with_winter
													value = THIS
												}
											}
										}
										
										if = {
											limit = {
												has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
											}
											
											remove_EaW_frozen_seas_effects = yes
										}
									}
									else = {
										for_each_scope_loop = {
											array = EaW_controlled_states_with_winter
											
											set_temp_variable = { EaW_state_winter_modifier_temp_var = EaW_state_winter_debuffer_var }
											multiply_temp_variable = { EaW_state_winter_modifier_temp_var = 0.4 } # 0.5 -> 0.2
											add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_modifier_temp_var }
										}
										
										if = {
											limit = {
												has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
												
												OR = {
													check_variable = { EaW_controlled_states_with_winter^num < num_controlled_states }
													
													check_variable = {
														var = NTR_icebreakers_convoys_reversed_ratio_var
														compare = less_than_or_equals
														value = 0.8
													}
												}
											}
											
											remove_EaW_frozen_seas_effects = yes
										}
									}
									
									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									if = {
										limit = {
											has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
										}
										
										remove_EaW_frozen_seas_effects = yes
									}
									
									country_event = Ntribes.903
								}
							}
						}
						else_if = {
							limit = {
								country_exists = NTR
							}
							
							if = {
								limit = {
									NTR = {
										has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
										
										check_variable = {
											var = NTR_icebreakers_convoys_reversed_ratio_var
											compare = less_than_or_equals
											value = 0.8
										}
									}
								}
								
								NTR = { remove_EaW_frozen_seas_effects = yes }
							}
							
							if = {
								limit = {
									NTR = { has_civil_war = yes }
								}
								
								random_scope_in_array = {
									array = NTR.enemies
									
									limit = {
										has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
										
										check_variable = {
											var = NTR_icebreakers_convoys_reversed_ratio_var
											compare = less_than_or_equals
											value = 0.8
										}
									}
									
									remove_EaW_frozen_seas_effects = yes
								}
							}
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 5 }
						}
						
						if = {
							limit = {
								has_global_flag = EaW_winter_system_on_global_flag
							}
							
							every_country = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
								}
								
								if = {
									limit = {
										any_of_scopes = {
											array = EaW_controlled_states_with_winter
											
											check_variable = { EaW_state_winter_grade_var = 5 }
										}
									}
									
									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes
									
									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter
										
										if = {
											limit = {
												check_variable = { EaW_state_winter_grade_var = 5 }
											}
											
											calculate_EaW_state_winter_debuffer_in_May = yes
										}
										else = {
											remove_from_array = {
												array = PREV.EaW_controlled_states_with_winter
												value = THIS
											}
										}
									}
									
									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									country_event = Ntribes.903
								}
							}
						}
						
						if = {
							limit = {
								country_exists = NTR
							}
							
							if = {
								limit = {
									NTR = { has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier } }
								}
								
								NTR = { remove_EaW_frozen_seas_effects = yes }
							}
							
							if = {
								limit = {
									NTR = { has_civil_war = yes }
								}
								
								random_scope_in_array = {
									array = NTR.enemies
									
									limit = {
										has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
									}
									
									remove_EaW_frozen_seas_effects = yes
								}
							}
						}
					}
					else = {
						if = {
							limit = {
								has_global_flag = EaW_winter_system_on_global_flag
							}
							
							every_country = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
								}
								
								country_event = Ntribes.903
							}
						}
					}
				}
				
				#don't touch!
				set_variable = { global.last_year = global.year }
				set_global_flag = { flag = on_yearly_done value = 1 days = 1 }
			}
		}
	}
	
	on_monthly_CHN = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] on_monthly_CHN"
			if = {
				limit = {
					NOT = { has_global_flag = christmas_truce_fired }
					check_variable = { global.month = 12 }
					event_target:equestria = {
						exists = yes
						has_government = democratic
						has_war_with = CHN
						CHN = { has_government = fascism }
						fascism < 0.1
					}
				}
				event_target:equestria = { country_event = { id = equestria.181 days = 24 random = 48 } }#days to hours applied
			}
		}
	}
	
	on_weekly_MAN = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] on_weekly_MAN"
			if = {
				limit = {
					has_country_flag = MAN_continuous_love_distribution_country_flag
				}
				add_political_power = var:MAN_continuous_love_distribution_pp_var
				add_stability = var:MAN_continuous_love_distribution_stab_var
				set_temp_variable = { MAN_continuous_love_distribution_pp_var_TEMP = MAN_lovetax_variable }
				multiply_temp_variable = { MAN_continuous_love_distribution_pp_var_TEMP = 20 }
				set_variable = { MAN_continuous_love_distribution_pp_var = MAN_continuous_love_distribution_pp_var_TEMP }
				round_variable = MAN_continuous_love_distribution_pp_var
				set_temp_variable = { MAN_continuous_love_distribution_stab_var_TEMP = MAN_lovetax_variable }
				divide_temp_variable = { MAN_continuous_love_distribution_stab_var_TEMP = 200 }
				set_variable = { MAN_continuous_love_distribution_stab_var = MAN_continuous_love_distribution_stab_var_TEMP }
			}
			if = {
				limit = {
					has_country_flag = MAN_continuous_love_tax_sucking_country_flag
				}
				add_to_variable = { var = MAN_lovetax_variable value = 0.005 }
				add_to_variable = { MAN_continuous_love_tax_sucking_how_many_weeks_elasped_variable = 1 }
				add_to_variable = { var = MAN_lovetax_variable value = MAN_continuous_love_tax_sucking_bonus_variable }
				### calculations for the next weekly love harvest ###
				clear_variable = MAN_continuous_love_tax_sucking_bonus_variable
				clear_variable = MAN_continuous_love_tax_sucking_bonus_civ_factories_display_variable
				set_variable = { MAN_continuous_love_tax_sucking_bonus_civ_factories_display_variable = num_of_available_civilian_factories }
				set_temp_variable = { MAN_continuous_love_tax_sucking_bonus_variable_TEMP = MAN_continuous_love_tax_sucking_bonus_civ_factories_display_variable }
				multiply_temp_variable = { MAN_continuous_love_tax_sucking_bonus_variable_TEMP = 0.015 }
				set_temp_variable = { MAN_continuous_love_tax_sucking_how_many_weeks_elasped_variable_TEMP = MAN_continuous_love_tax_sucking_how_many_weeks_elasped_variable } ## base value should always be one (1) ##
				multiply_temp_variable = { MAN_continuous_love_tax_sucking_bonus_variable_TEMP = MAN_continuous_love_tax_sucking_how_many_weeks_elasped_variable_TEMP }
				set_variable = { MAN_continuous_love_tax_sucking_bonus_variable = MAN_continuous_love_tax_sucking_bonus_variable_TEMP }
			}
			if = {
				limit = {
					has_idea = MAN_internal_migration
				}
				save_current_manpower = yes
				every_owned_state = {
					limit = { has_state_category = megalopolis }
					add_manpower = 2500
				}
				every_owned_state = {
					limit = { has_state_category = metropolis }
					add_manpower = 2000
				}
				every_owned_state = {
					limit = { has_state_category = large_city }
					add_manpower = 1500
				}
				every_owned_state = {
					limit = { has_state_category = city }
					add_manpower = 1000
				}
				restore_previous_manpower = yes
			}
		}
	}

	on_weekly_ELF = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] on_weekly_ELF"
			if = {
				limit = {
					has_country_flag = ELF_bits_gun_weekly_shipments
					has_idea = ELF_bits_gun_idea
				}
				add_equipment_to_stockpile = {
					type = infantry_equipment_2
					amount = 200
					producer = ELF
				}
			}
		}
	}
}
on_actions = {

	#Not run on a specific country.
	on_startup = {
		effect = {
			log = "[GetDateText] Equestria at War main on_startup begin"
			every_state = {
				if = {
					limit = { in_dry_subarctic_climate_region = yes }
					set_variable = { EaW_state_winter_grade_var = 5 }
				}
				else_if = {
					limit = { in_moist_subarctic_climate_region = yes }
					set_variable = { EaW_state_winter_grade_var = 4 }
				}
				else_if = {
					limit = { in_dry_continental_climate_region = yes }
					set_variable = { EaW_state_winter_grade_var = 3 }
				}
				else_if = {
					limit = { in_moist_continental_climate_region = yes }
					set_variable = { EaW_state_winter_grade_var = 2 }
				}
				else_if = {
					limit = { in_oceanic_climate_region = yes }
					set_variable = { EaW_state_winter_grade_var = 1 }
				}
			}
			SRS = {
				set_variable = { total_sum_of_internationalist_and_communalist_displeasure = 0 }
				add_to_variable = { total_sum_of_internationalist_and_communalist_displeasure = displeasure_towards_communards_var }
				add_to_variable = { total_sum_of_internationalist_and_communalist_displeasure = displeasure_towards_internationalists_var }
				set_temp_variable = { internationalist_displeasure_as_a_percentage_ersatz = displeasure_towards_internationalists_var }
				divide_temp_variable = { internationalist_displeasure_as_a_percentage_ersatz = total_sum_of_internationalist_and_communalist_displeasure }
				set_variable = { internationalist_displeasure_as_a_percentage = internationalist_displeasure_as_a_percentage_ersatz }
				set_temp_variable = { communalist_displeasure_as_a_percentage_ersatz = displeasure_towards_communards_var }
				divide_temp_variable = { communalist_displeasure_as_a_percentage_ersatz = total_sum_of_internationalist_and_communalist_displeasure }
				set_variable = { communalist_displeasure_as_a_percentage = communalist_displeasure_as_a_percentage_ersatz }
			}
			#SOL is used here as a random country selector
			#Thanks to Delincious from KR team for the idea <3
			SOL = {
				if = {
					limit = { is_ai = no }
					random_other_country = {
						limit = { is_ai = yes }
						country_event = { id = Ntribes.949 hours = 1 } # on/off winter system
						set_variable = { eaw_welcome_screen = 1 }
						capital_scope = { SOL = { goto_state = PREV } }
						change_tag_from = PREV
					}
				}
				else = {
					random_country = {
						limit = { is_ai = no }
						country_event = Ntribes.949 # on/off winter system
					}
				}
			}
			OLE = {
				random_unit_leader = {
					limit = { has_id = 105 }
					save_global_event_target_as = OLE_Roshuo
				}

				random_unit_leader = {
					limit = { has_id = 106 }
					save_global_event_target_as = OLE_Lurswig
				}

				random_unit_leader = {
					limit = { has_id = 107 }
					save_global_event_target_as = OLE_Perkele
				}

				random_unit_leader = {
					limit = { has_id = 108 }
					save_global_event_target_as = OLE_Manntlerhim
				}

				random_unit_leader = {
					limit = { has_id = 110 }
					save_global_event_target_as = OLE_Einair
				}

				random_unit_leader = {
					limit = { has_id = 111 }
					save_global_event_target_as = OLE_Pirhonen
				}

				random_unit_leader = {
					limit = { has_id = 112 }
					save_global_event_target_as = OLE_Eilert
				}

				random_unit_leader = {
					limit = { has_id = 113 }
					save_global_event_target_as = OLE_Ansa
				}

				random_unit_leader = {
					limit = { has_id = 114 }
					save_global_event_target_as = OLE_Virta
				}

				random_unit_leader = {
					limit = { has_id = 115 }
					save_global_event_target_as = OLE_Rikka
				}
			}
			EQS = {
				save_global_event_target_as = equestria
				if = {
					limit = {
						NOT = {
							has_game_rule = {
								rule = equestria_united_status
								option = EQS_STATUS_CIVIL_WAR
							}
						}
					}
					country_event = { id = equestria.1 hours = 15 }
					country_event = { id = equestria.200 days = 300 }
					country_event = { id = news.1101 days = 210 }
					country_event = { id = news.300 days = 171 }
					news_event = { id = news.16 days = 200 random = 960 }#days to hours applied
				}
				#country_event = { id = equestria.102 days = 93 }
				set_country_flag = manpower_laws_blocked
				set_country_flag = economic_laws_blocked
				set_country_flag = { flag = celestia_evil_meter value = 0 }
				country_event = { id = equestria.170 days = 30 random = 17280 }#days to hours applied
				country_event = { id = utility.7 hours = 1 }
			}
			STG = {
				country_event = { id = stalliongrad.0 days = 1 }
				country_event = { id = stalliongrad.12 days = 10 }
				country_event = { id = stalliongrad.13 days = 20 }
				country_event = { id = stalliongrad.24 days = 45 }
				country_event = { id = stalliongrad.2 days = 60 }
				country_event = { id = stalliongrad.115 days = 545 random = 960 }#days to hours applied
				country_event = { id = stalliongrad.139 days = 1095 random = 7200 }#days to hours applied
				if = {
					limit = { is_ai = yes }
					random_list = {
						5 = { set_country_flag = STG_darkwing_natbol }
						95 ={ }
					}
					else = { set_country_flag = STG_darkwing_natbol }
				}
			}
			SOL = { save_global_event_target_as = solar_empire }
			GRI = {
				save_global_event_target_as = griffonian_empire
				set_variable = { global.griffonian_empire_var = THIS }
				country_event = { id = imperial.1 days = 6 random = 240 }#days to hours applied
				country_event = { id = imperial.60 days = 186 random = 480 }#days to hours applied
			}
			DED = {
				every_other_country = {
					country_event = deadempire.36
				}
				every_owned_state = {
					add_claim_by = HLR
				}
			}
			CHN = {
				add_opinion_modifier = { target = EQS modifier = distrustful_relations }
				reverse_add_opinion_modifier = { target = EQS modifier = distrustful_relations }
				add_opinion_modifier = { target = CRY modifier = distrustful_relations }
				reverse_add_opinion_modifier = { target = CRY modifier = distrustful_relations }
				add_opinion_modifier = { target = EQC modifier = distrustful_relations }
				reverse_add_opinion_modifier = { target = EQC modifier = distrustful_relations }
				add_opinion_modifier = { target = EQS modifier = CHN_Embargo }
				reverse_add_opinion_modifier = { target = EQS modifier = CHN_Embargo }
				add_opinion_modifier = { target = CRY modifier = CHN_Embargo }
				reverse_add_opinion_modifier = { target = CRY modifier = CHN_Embargo }
				add_opinion_modifier = { target = EQC modifier = CHN_Embargo }
				reverse_add_opinion_modifier = { target = EQC modifier = CHN_Embargo }
				add_opinion_modifier = { target = GRI modifier = CHN_GRI_Friendship }
				reverse_add_opinion_modifier = { target = GRI modifier = CHN_GRI_Friendship }
			}
			EYR = {
				add_opinion_modifier = { target = ERI modifier = mortal_enemies }
			}
			ERI = {
				add_opinion_modifier = { target = EYR modifier = mortal_enemies }
			}
			GRF = {
				country_event = { id = griffons.21 days = 943 random = 96 }#days to hours applied
				country_event = { id = griffons.22 days = 987 random = 96 }#days to hours applied
				country_event = { id = griffons.23 days = 931 random = 96 }#days to hours applied
				country_event = { id = griffons.24 days = 968 random = 96 }#days to hours applied
				country_event = { id = griffons.25 days = 938 random = 96 }#days to hours applied
			}
			FEA = {
				country_event = { id = feat.15 days = 60 random = 2880 }#days to hours applied
				country_event = { id = feat.20 days = 72 random = 144 }#days to hours applied
				country_event = { id = feat.21 days = 105 random = 144 }#days to hours applied
			}
			FAT = {
				country_event = { id = griffonRepublic.60 days = 9 random = 38400 }#days to hours applied
				country_event = { id = griffonRepublic.61 days = 10 random = 13920 }#days to hours applied
				country_event = { id = griffonRepublic.62 days = 11 random = 9600 }#days to hours applied
				country_event = { id = griffonRepublic.63 days = 12 random = 28800 }#days to hours applied
				country_event = { id = griffonRepublic.64 days = 13 random = 22080 }#days to hours applied
				country_event = { id = griffonRepublic.65 days = 14 random = 48000 }#days to hours applied
			}
			NTR = {
				country_event = { id = Ntribes.599 days = 1 }
				log = "[This.GetName]: self-triggering event Ntribes.599 started"
				add_dynamic_modifier = { modifier = NTR_traditionalism_influence_dynamic_modifier }

				country_event = { id = Ntribes.598 days = 1 }
				log = "[This.GetName]: self-triggering event Ntribes.598 started"
				add_dynamic_modifier = { modifier = NTR_communist_partisans_dynamic_modifier }

				set_variable = { NTR_icebreakers_convoys_reversed_ratio_var = 1 }
				add_EaW_frozen_seas_dynamic_effects = yes

				country_event = { id = Ntribes.500 days = 7 random = 168 }#days to hours applied
				country_event = { id = Ntribes.501 days = 28 random = 336 }#days to hours applied
				country_event = { id = Ntribes.502 days = 56 random = 336 }#days to hours applied
				country_event = { id = Ntribes.503 days = 91 random = 336 }#days to hours applied
				country_event = { id = Ntribes.504 days = 119 random = 336 }#days to hours applied
			}
			KAT = {
				country_event = { id = katerin.1 days = 1 } #the Ball, was set this in history files
				#country_event = { id = katerin.2 days = 9 } #Plague event starter - Dummied out for now.
				country_event = { id = katerin.135 days = 15 } #THE NEW Plague event
			}
			BRF = {
				country_event = { id = prywhen.6 days = 1 }
			}
			OLV = {
				country_event = { id = radjur.1 days = 1 }
			}
			JER = {
				country_event = { id = aquileia.30 days = 157 random = 480 }#days to hours applied
			}
			ARA = {
				country_event = { id = arantiga.2 days = 470 random = 480 }#days to hours applied
			}
			FIR = {
				country_event = { id = FIR.1 days = 1 random = 1200 }#days to hours applied
			}
			EQC = {
				country_event = { id = mareland.19 days = 20 random = 5760 }#days to hours applied
			}
			SIC = {
				country_event = { id = sicameon.1 days = 240 }
				country_event = { id = sicameon.2 days = 104 }
			}
			NIM = {
				if = {
					limit = { is_historical_focus_on = no }
					random_list = {
						5 = {
							set_global_flag = NIM_have_helots_rebel
						}
						95 = {

						}
					}
				}
			}
			LNS = { save_global_event_target_as = longsword }
			FLO = {
				country_event = { id = flowena.97 days = 14 }
			}

			every_country = {
				if = {
					limit = {
						is_riverlands_country = yes
					}
					add_opinion_modifier = { target = GRI modifier = RIV_hates_the_empire }
					add_opinion_modifier = { target = event_target:longsword modifier = mortal_enemies }
					add_opinion_modifier = { target = HLQ modifier = mortal_enemies }
					add_opinion_modifier = { target = event_target:longsword modifier = CHN_Embargo }
					add_opinion_modifier = { target = HLQ modifier = CHN_Embargo }
					reverse_add_opinion_modifier = { target = event_target:longsword modifier = mortal_enemies }
					reverse_add_opinion_modifier = { target = HLQ modifier = mortal_enemies }
					reverse_add_opinion_modifier = { target = event_target:longsword modifier = CHN_Embargo }
					reverse_add_opinion_modifier = { target = HLQ modifier = CHN_Embargo }
					add_opinion_modifier = { target = OLV modifier = distrustful_relations }
					add_opinion_modifier = { target = ZES modifier = distrustful_relations }
					reverse_add_opinion_modifier = { target = OLV modifier = distrustful_relations }
					reverse_add_opinion_modifier = { target = ZES modifier = distrustful_relations }
					if = {
						limit = { tag = WIT }
						add_opinion_modifier = { target = BAR modifier = sworn_enemies }
						reverse_add_opinion_modifier = { target = BAR modifier = sworn_enemies }
						else = {
							add_opinion_modifier = { target = BAR modifier = distrustful_relations }
							reverse_add_opinion_modifier = { target = BAR modifier = distrustful_relations }
						}
					}
					if = {
						limit = { is_river_fed_member = yes }
						every_other_country = {
							limit = { is_river_fed_member = yes }
							add_ai_strategy = {
								id = PREV
								type = alliance
								value = 200
							}
						}
					}
					every_other_country = {
						limit = { is_griffon_continent_griffon_country = yes }
						add_ai_strategy = {
							id = PREV
							type = alliance
							value = -200
						}
						PREV = {
							add_ai_strategy = {
								id = PREV
								type = alliance
								value = -200
							}
						}
					}
				}

				if = {
					limit = { is_pony_race = yes }
					add_ideas = pony_race
				}
				else_if = {
					limit = { is_changeling_race = yes }
					add_ideas = changeling_race
				}
				else_if = {
					limit = { is_deer_race = yes }
					add_ideas = deer_race
				}
				else_if = {
					limit = { is_griffon_race = yes }
					add_ideas = griffon_race
				}
				else_if = {
					limit = { is_diamond_dog_race = yes }
					add_ideas = diamond_dog_race
				}
				else = {
					set_technology = { generic_race = 1 }
					add_ideas = generic_race_idea
				}

				if = {
					limit = {
						is_on_equestrian_continent = no
						OR = {
							has_idea = dummy_idea_science
							NOT = {
								has_idea_with_trait = science_idea
							}
						}
					}
					if = {
						limit = {
							num_of_civilian_factories > 2
							has_tech = melee_weapons1
							NOT = { owns_big_griffon_city = yes }
							NOT = { owns_major_griffon_city = yes }
						}
						#log = "[Root.GetName] better_science_base"
						add_ideas = better_science_base
					}
					else_if = {
						limit = { owns_big_griffon_city = yes }
						#log = "[Root.GetName] big_science_base"
						add_ideas = big_science_base
					}
					else_if = {
						limit = { owns_major_griffon_city = yes }
						#log = "[Root.GetName] proper_science_base"
						add_ideas = proper_science_base
					}
					else_if = {
						limit = {
							NOT = { owns_major_griffon_city = yes }
							NOT = { owns_big_griffon_city = yes }
							OR = {
								NOT = { has_tech = melee_weapons1 }
								NOT = { num_of_civilian_factories > 2 }
							}
							is_griffon_continent_country = yes
						}
						#log = "[Root.GetName] poor_science_base"
						add_ideas = poor_science_base
					}
				}

				if = {
					limit = {
						OR = {
							is_on_equestrian_continent = yes
							has_idea = dummy_idea_science
							NOT = {
								has_idea_with_trait = science_idea
							}
						}
					}
					add_ideas = proper_science_base
				}

				if = {
					limit = {
						OR = {
							has_idea = dummy_idea_society
							NOT = {
								has_idea_with_trait = society_idea
							}
						}
					}
					if = {
						limit = { is_griffon_continent_country = yes }
						add_ideas = outdated_industry
						else = {
							add_ideas = modern_society
						}
					}
				}

				if = {
					limit = {
						is_ai = no
					}
					set_variable = { eaw_welcome_screen = 1 }
				}

				if = {
					limit = {
						is_griffon_continent_country = yes
						OR = {
							has_tribal_society = yes
							has_agrarian_society = yes
							has_pre_industrial_society = yes
							has_illiteracy = yes
						}
					}
					country_event = { id = griffonian.166 days = 912 } #comet sighted
				}

				if = {
					limit = {
						is_river_fed_member = yes
					}
					country_event = { id = river_cup.10 days = 193 }
					country_event = { id = river_cup.11 days = 1656 }
					country_event = { id = river_cup.12 days = 3119 }
					country_event = { id = river_cup.13 days = 4582 }
					country_event = { id = river_cup.14 days = 6045 }
					country_event = { id = river_cup.15 days = 7508 }
				}

				if = {
					limit = {
						NOT = {
							tag = GRI
							any_owned_state = {
								OR = {
									is_coastal = yes
									is_island_state = yes
								}
							}
						}
					}
					set_country_flag = started_out_as_landlocked
				}

				adjust_research_modifier = yes
				update_global_arrays = yes
				if = {
					limit = { NOT = { has_country_flag = weapons_fixed_at_start } }
					actually_fix_weapon_techs = yes
				}
			}

			CRY = {
				add_ideas = outdated_industry
				every_owned_state = {
					limit = { is_core_of = CRY }
					add_to_array = { global.original_CRY_cores = THIS }
				}
				adjust_research_modifier = yes
			}

			BUF = {
				add_ideas = poor_science_base
				adjust_research_modifier = yes
			}
			PLB = {
				add_ideas = better_science_base
				adjust_research_modifier = yes
			}
			GFF = {
				add_ideas = big_science_base
				adjust_research_modifier = yes
			}
			YAK = {
				add_ideas = big_science_base
				adjust_research_modifier = yes
			}
			JAK = {
				add_ideas = big_science_base
				adjust_research_modifier = yes
			}

			every_country = { adjust_EaW_society_development_vars = yes }

			NTR = {
				for_each_scope_loop = {
					array = controlled_states

					if = {
						limit = {
							has_variable = EaW_state_winter_grade_var
						}

						add_to_variable = { PREV.NTR_average_country_agricultural_production_var = EaW_state_winter_grade_var }
					}
					else = {
						subtract_from_variable = { PREV.NTR_average_country_agricultural_production_var = 5 }
					}
				}

				divide_variable = { NTR_average_country_agricultural_production_var = -10 }
				divide_variable = { NTR_average_country_agricultural_production_var = num_controlled_states }

				set_temp_variable = { NTR_famine_dynamic_modifier_debuffer_temp_var = -0.283 }
				calculate_NTR_famine_dynamic_modifier_debuffs = yes

				country_event = { id = Ntribes.996 days = 7 }
				log = "[This.GetName]: self-triggering event Ntribes.996 started"
			}

			log = "[GetDateText] Equestria at War main on_startup end"
		}
	}

	#FROM is war target
	on_declare_war = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_declare_war"
			hidden_effect = {
				country_event = deadempire.36
				country_event = griffonian.2
				FROM = {
					country_event = deadempire.36
					country_event = griffonian.2
				}
				if = {
					limit = {
						OR = {
							AND = {
								FROM = { tag = DED }
								tag = HLR
							}
							AND = {
								FROM = { tag = HLR }
								tag = DED
							}
						}
					}
					426 = { add_core_of = DED }
					564 = { add_core_of = DED }
				}
				if = {
					limit = {
						is_trading_with_NCH = yes
						FROM = { tag = NCH }
					}
					remove_opinion_modifier = { modifier = NCH_negative_trading target = FROM }
					remove_opinion_modifier = { modifier = trading target = FROM }
					if = {
						limit = {
							has_idea = NCH_trading_with_NCH_harmonic
						}
						remove_ideas = NCH_trading_with_NCH_harmonic
					}
					if = {
						limit = {
							has_idea = NCH_trading_with_NCH_fascist
						}
						remove_ideas = NCH_trading_with_NCH_fascist
					}
					FROM = {
						hidden_effect = {
							add_to_variable = {
								var = NCH_trade_partners_iter
								value = -1
							}
							add_to_variable = { var = gytha_sanity value = 1 }
						}
						NCH_get_trading_idea = yes
					}
				}
				if = {
					limit = {
						FROM = { is_trading_with_NCH = yes }
						tag = NCH
					}
					FROM = {
						remove_opinion_modifier = { modifier = NCH_negative_trading target = ROOT }
						remove_opinion_modifier = { modifier = trading target = ROOT }
						if = {
							limit = {
								has_idea = NCH_trading_with_NCH_harmonic
							}
							remove_ideas = NCH_trading_with_NCH_harmonic
						}
						if = {
							limit = {
								has_idea = NCH_trading_with_NCH_fascist
							}
							remove_ideas = NCH_trading_with_NCH_fascist
						}
					}
					hidden_effect = {
						add_to_variable = {
							var = NCH_trade_partners_iter
							value = -1
						}
						add_to_variable = { var = gytha_sanity value = 1 }
					}
					NCH_get_trading_idea = yes
				}
				if = {
					limit = {
						FROM = {
							is_in_faction = yes
							is_river_fed_member = yes
							NOT = { original_tag = ROOT }
						}
					}
					FROM = { save_event_target_as = defender }
					every_country = {
						limit = {
							NOT = { tag = FROM }
							is_in_faction_with = FROM
							is_subject = no
						}
						country_event = {
							id = riverfed.30
							days = 1
						}
					}
				}
				clear_variable = delayed_merc_payment_@FROM
				FROM = { clear_variable = delayed_merc_payment_@ROOT }
				if = {
					limit = {
						OR = {
							original_tag = ERI
							original_tag = EYR
						}
						FROM = {
							OR = {
								original_tag = ERI
								original_tag = EYR
							}
						}
					}
					set_country_flag = { flag = block_white_peace value = 1 days = 21 }
					FROM = { set_country_flag = { flag = block_white_peace value = 1 days = 21 } }
				}
				if = {
					limit = { FROM = { tag = GRW } }
					if = {
						limit = {
							tag = BRF
						}
						country_event = brodfeld.26
					}
					if = {
						limit = {
							tag = LUS
						}
						if = {
							limit = { has_poverty = yes }
							country_event = { id = lushi.31 days = 1 }
						}
						if = {
							limit = {
								has_idea = LUS_prywhen_communist_influence
								NOT = {
									has_government = communism
								}
							}
							country_event = { id = lushi.30 days = 1 }
							add_ideas = LUS_munities_and_disorder
							FROM = {
								load_oob = "GRW_militia_against_LUS"
							}
						}
					}
				}
				if = {
					limit = {
						OR = {
							AND = {
								tag = GRW
								FROM = { tag = BAN }
							}
							AND = {
								tag = BAN
								FROM = { tag = GRW }
							}
							AND = {
								tag = GRW
								FROM = { tag = BRF }
							}
							AND = {
								tag = BRF
								FROM = { tag = GRW }
							}
						}
					}
					GRW = { load_oob = "GRW_fun_for_player" }
				}
				if = {
					limit = { tag = DED FROM = { tag = HLR } }
					FROM = { add_timed_idea = {idea = HLR_Dreads_Incoming_Idea days = 200} }
				}
				if = {
					limit = {
						original_tag = OLE
						FROM = { original_tag = OLE }
					}
					if = {
						limit = {
							NOT = { tag = OLE }
							original_tag = OLE
						}
						if = {
							limit = {
								OR = {
									has_government = neutrality
									has_government = fascism
								}
							}
							set_cosmetic_tag = OLE_NEU
							else = {
								set_cosmetic_tag = OLE_DEM
							}
						}
					}
					FROM = {
						if = {
							limit = {
								NOT = { tag = OLE }
								original_tag = OLE
							}
							if = {
								limit = {
									OR = {
										has_government = neutrality
										has_government = fascism
									}
								}
								set_cosmetic_tag = OLE_NEU
								else = {
									set_cosmetic_tag = OLE_DEM
								}
							}
						}
					}
					if = {
						limit = {
							tag = OLE
							OR = {
								has_government = neutrality
								has_government = fascism
							}
						}
						set_cosmetic_tag = OLE_NEU
					}
				}
				if = {
					limit = {
						original_tag = CRY
						FROM = { original_tag = CRY }
					}
					if = {
						limit = {
							has_government = democratic
							NOT = { has_completed_focus = CRY_oldorder }
						}
						complete_national_focus = CRY_oldorder
						else = {
							FROM = {
								if = {
									limit = {
										has_government = democratic
										NOT = { has_completed_focus = CRY_oldorder }
									}
									complete_national_focus = CRY_oldorder
								}
							}
						}
					}
				}
				if = {
					limit = {
						original_tag = CRY has_government = democratic
					}
					country_event = { id = crysom.39 days = 1 }
				}
				if = {
					limit = {
						FROM = { original_tag = CRY has_government = democratic }
					}
					FROM = { country_event = { id = crysom.39 days = 1 } }
				}
				if = {
					limit = {
						original_tag = EQS
						FROM = { original_tag = BUF }
					}
					country_event = news.2001
				}
				if = {
					limit = {
						is_EQS_SOL = yes
						NOT = { has_completed_focus = SOL_bat_problems }
						FROM = { original_tag = EQS }
					}
					every_owned_state = {
						limit = { has_state_flag = eqs_bat_state }
						clr_state_flag = eqs_bat_state
						add_core_of = FROM
						FROM = { set_state_controller = PREV }
					}
				}
				if = {
					limit = {
						FROM = {
							is_EQS_SOL = yes
							NOT = { has_completed_focus = SOL_bat_problems }
						}
						original_tag = EQS
					}
					every_owned_state = {
						limit = { has_state_flag = eqs_bat_state }
						clr_state_flag = eqs_bat_state
						add_core_of = ROOT
						ROOT = { set_state_controller = PREV }
					}
				}
				if = {
					limit = {
						OR = {
							AND = {
								original_tag = EQS
								FROM = { original_tag = CRY has_government = fascism }
							}
							AND = {
								original_tag = CRY has_government = fascism
								FROM = { original_tag = EQS }
							}
						}
					}
					news_event = { id = news.45 days = 1 }
				}
				if = {
					limit = { tag = CHN }
					if = {
						limit = {
							NOT = { has_global_flag = the_war }
							FROM = {
								original_tag = EQS
							}
						}
						news_event = { id = news.3 days = 1 }
					}
					if = {
						limit = {
							has_government = fascism
							has_completed_focus = demand_equestria
							NOT = { country_exists = VAN EQS = { is_ai = yes } }
							FROM = {
								OR = {
									original_tag = EQS
									tag = NLR
								}
							}
						}
						country_event = { id = changelings.32 days = 1 random = 48 }#days to hours applied
					}
				}
				if = {
					limit = {
						tag = CHN
						has_country_leader = { ruling_only = yes name = "Queen Chrysalis" }
						FROM = {
							original_tag = OLE
						}
					}
					for_each_scope_loop = {
						array = global.majors
						if = {
							limit = {
								exists = yes
								is_on_equestrian_continent = yes
								NOT = {
									original_tag = CHN
									original_tag = OLE
									has_war_with = CHN
									has_capitulated = yes
									is_subject_of = CHN
								}
							}
							country_event = { id = changeling_diplo.4 days = 2 }
						}
					}
				}
				if = {
					limit = {
						STG = {
							exists = yes
							has_government = communism
							is_subject = no
						}
					}
					if = {
						limit = {
							OR = {
								AND = {
									tag = BAL
									FROM = { tag = EQS }
								}
								AND = {
									tag = EQS
									FROM = { tag = BAL }
								}
							}
						}
						BAL = { country_event = { id = civwar.14 days = 1 } }
					}
					if = {
						limit = {
							OR = {
								AND = {
									tag = BAL
									FROM = { tag = NLR }
								}
								AND = {
									tag = NLR
									FROM = { tag = BAL }
								}
							}
						}
						BAL = { country_event = { id = civwar.15 days = 1 } }
					}
				}
				#Remove BNPL bills if New Mareland goes to war
				if = {
					limit = {
						ROOT = { original_tag = EQC }
						ROOT = { EQC_has_bnpl_bills = yes }
						NOT = { FROM = { original_tag = EQC } } # Don't remove in a civil war
					}
					ROOT = {
						EQC_remove_bnpl_bills = yes
						set_country_flag = bnpl_bills_removed_through_war
					}
				}

				#Remove BNPL bills if New Mareland is declared war on
				if = {
					limit = {
						FROM = { original_tag = EQC }
						FROM = { EQC_has_bnpl_bills = yes }
					}
					FROM = {
						EQC_remove_bnpl_bills = yes
						set_country_flag = bnpl_bills_removed_through_war
					}
				}

				#Bronzehill Funded Rebels Rise Up in the Empire
				if = {
					limit = {
						FROM = {
							tag = BRZ
						}
						ROOT = {
							tag = GRI
							has_country_flag = BRZ_freikorps
						}
					}
					FROM = {
						country_event = bronzehill_revenge.5
					}
				}
				if = {
					limit = {
						ROOT = {
							tag = BRZ
						}
						FROM = {
							tag = GRI
							has_country_flag = BRZ_freikorps
						}
					}
					ROOT = {
						country_event = bronzehill_revenge.5
					}
				}

				#Gang up on Lake City
				if = {
					limit = {
						has_global_flag = LCT_holy_pony_empire_founded
						ROOT = { is_griffon_continent_griffon_country = yes }
						FROM = { original_tag = LCT }
					}
					ROOT = {
						country_event = { id = lakecity.91 days = 1 }
					}
				}

				#Remove from LCT pact
				if = {
					limit = {
						tag = LCT
						FROM = {
							OR = {
								has_opinion_modifier = anti_comintern_pact_opinion
								has_idea = LCT_anti_commie_pact
							}
						}
					}
					FROM = {
						remove_opinion_modifier = { target = LCT modifier = anti_comintern_pact_opinion }
						remove_ideas = LCT_anti_commie_pact
					}
				}

				#Call LCT Anti-Commie pact members to war
				if = {
					limit = {
						ROOT = { has_government = communism }
						FROM = { has_idea = LCT_anti_commie_pact }
					}
					FROM = {
						country_event = { id = lakecity.81 days = 1 }
					}
					ROOT = {
						save_global_event_target_as = LCT_pact_war_starter
					}
				}


				if = {#If someone goes to war with Nova Whirl while they're infiltrated with her partisans
					limit = {
						FROM = {
							original_tag = RCT
						}
						ROOT = {
							OR = {
								has_idea = RCT_militants1
								has_idea = RCT_militants2
								has_idea = RCT_militants3
							}
						}
					}
					ROOT = {
						country_event = { id = rivercity.1920 days = 2}
					}
				}
				if = {#If Nova Whirl goes to war with someone while they're infiltrated with her partisans
					limit = {
						FROM = {
							OR = {
								has_idea = RCT_militants1
								has_idea = RCT_militants2
								has_idea = RCT_militants3
							}
						}
						ROOT = {
							original_tag = RCT
						}
					}
					FROM = {
						country_event = { id = rivercity.1920 days = 2}
					}
				}
				#Spawn the Scotts for FRe if fre declares war
				if = {
					limit = {
						ROOT = { original_tag = FRE }
						NOT = {
							has_country_flag = FRE_Scotts_arrived_already
						}
						NOT = { FROM = { original_tag = EQC } } # Don't spawn in cicil war
					}
					ROOT = {
						country_event = { id = freeponies.15 days = 2}
						set_country_flag = FRE_Scotts_arrived_already
					}
				}

				#Spawn the Scotts for FRe if Fre is attacked
				if = {
					limit = {
						FROM = { original_tag = FRE }
						NOT = {
							has_country_flag = FRE_Scotts_arrived_already
						}
					}
					FROM = {
						country_event = { id = freeponies.15 days = 2}
						set_country_flag = FRE_Scotts_arrived_already
					}
				}
				
				#Civil war transfer society/science ideas
				if = {
					limit = {
						OR = {
							has_idea = dummy_idea_society
							NOT = { has_idea_with_trait = society_idea }
						}
					}
					if = {
						limit = { FROM = { NOT = { has_idea = modern_society } } }
						FROM = { ROOT = { transfer_society_ideas = yes } }
					}
					else = {
						add_ideas = modern_society
						if = {
							limit = { has_variable = NTR_VED_HLR_guilds_power_var }
							if = {
								limit = { has_completed_focus = NTR_the_dawn_of_a_new_millenium }
								set_variable = { NTR_VED_HLR_guilds_power_var = 4 }
							}
							else = {
								set_variable = { NTR_VED_HLR_guilds_power_var = 3 }
							}
						}
					}
				}
				
				if = {
					limit = {
						original_tag = FROM
					}
					log = "on_declare_war: is civil war root: [?root.GetTag] from: [?from.GetTag]"
					WORKAROUND_civil_war_load_tree_for_revolter = yes
					if = {
						limit = { FROM = { NOT = { has_idea = generic_race_idea } } }
						FROM = { ROOT = { transfer_race_ideas = yes } }
					}
					if = {
						limit = { FROM = { has_country_flag = started_out_as_landlocked } }
						set_country_flag = started_out_as_landlocked
					}
					if = {
						limit = { has_country_flag = started_out_as_landlocked }
						FROM = { set_country_flag = started_out_as_landlocked }
					}
					if = {
						limit = {
							OR = {
								tag = FAT
								FROM = { has_focus_tree = generic_griffon_focus }
							}
							has_focus_tree = generic_griffon_focus
						}
						if = {
							limit = {
								#TODO make sure which countries can have monarchist civil wars
								always = yes
							}
							set_country_flag = have_regular_puppets
						}
					}
					set_rule = {
						can_generate_female_aces = yes
					}
					FROM = {
						set_rule = {
							can_generate_female_aces = yes
						}
					}
				}
				if = {
					limit = {
						OR = {
							has_idea = dummy_idea_science
							NOT = { has_idea_with_trait = science_idea }
						}
					}
					if = {
						limit = {
							FROM = {
								NOT = {
									has_idea = proper_science_base
								}
							}
						}
						FROM = { ROOT = { transfer_science_ideas = yes } }
						else = {add_ideas = proper_science_base }
					}
				}
			}
			if = {
				limit = {
					FROM = {
						OR = {
							tag = BRF
							tag = SIC
							tag = WNG
							tag = FAL
							tag = BOI
							tag = LAK
							tag = TAL
							tag = FRN
							tag = ARA
							tag = EYR
							tag = ERI
							tag = AVI
							tag = POM
							tag = HEL
							tag = AET
							tag = FEZ
							tag = TRD
							tag = JER
							tag = JEB
							tag = JRR
							tag = VIN
							tag = JFT
							tag = PYT
							tag = YAL
							tag = ANG
							tag = GRI
							tag = KAT
							tag = STW
							tag = FEA
							tag = FAT
							tag = VED
						}
					}
					ROOT = {
						original_tag = GRY
						has_country_flag = GRY_has_imperial_patronage
					}
				}
				GRI = { country_event = { id = gryphianhost.129 days = 2 } }
				ROOT = { country_event = { id = gryphianhost.130 days = 2 } }
			}
			if = {
				limit = {
					FROM = {
						tag = GRY
					}
					ROOT = {
						original_tag = LCT
					}
				}
				FROM = { country_event = { id = gryphianhost.163 days = 2 } }
			}
			if = {
				limit = {
					ROOT = {
						OR = {
							tag = event_target:griffonian_empire
							is_in_faction_with = event_target:griffonian_empire
							is_subject_of = event_target:griffonian_empire
						}
					}
					FROM = { has_idea = FAT_republican_pact }
				}
				FROM = {
					country_event = griffonRepublic.79
				}
			}
			if = {
				limit = {
					FROM = {
						OR = {
							tag = event_target:griffonian_empire
							is_in_faction_with = event_target:griffonian_empire
							is_subject_of = event_target:griffonian_empire
						}
					}
					ROOT = { tag = FAT has_idea = FAT_republican_pact }
				}
				ROOT = {
					country_event = griffonRepublic.79
				}
			}
			if = {
				limit = { FROM = { is_river_fed_member = yes } }
				custom_effect_tooltip = RivCol_capitulation_TT
			}
			
			if = {
				limit = {
					original_tag = SRS
				}
				if = {
					limit = {
						NTR = {
							has_government = democratic
							exists = yes
							is_subject = no
						}
					}
					if = {
						limit = {
							NTR = {
								has_completed_focus = NTR_too_much_blood_already
								NOT = { has_war_with = SRS }
							}
							NOT = { has_country_flag = NTR_SRS_reclaiming_the_west_beginning_idea_check_on }
						}
						log = "[GetDateText]: [Root.GetName]: self-triggering event Ntribes.198 started"
						set_country_flag = NTR_SRS_reclaiming_the_west_beginning_idea_check_on
						country_event = {
							id = Ntribes.198
							days = 7
						}
					}
					else_if = {
						limit = {
							FROM = { tag = NTR }
						}
						FROM = {
							set_country_flag = NTR_SRS_has_defensive_war_flag
							if = {
								limit = {
									NOT = { has_country_flag = NTR_united_northern_front_flag }
								}
								add_ideas = NTR_fight_for_our_homeland_idea
							}
						}
						if = {
							limit = {
								has_idea = SRS_northern_war
							}
							remove_ideas = SRS_northern_war
							FROM = { remove_ideas = NTR_northern_war }
						}
						else_if = {
							limit = {
								has_idea = SRS_northern_clashes
							}
							remove_ideas = SRS_northern_clashes
							FROM = { remove_ideas = NTR_northern_clashes }
						}
					}
				}
				else_if = {
					limit = {
						NTR = {
							has_completed_focus = NTR_northern_pact
							exists = yes
							has_government = communism
							OR = {
								AND = {
									has_non_aggression_pact_with = SRS
									is_guaranteed_by = SRS
									has_guaranteed = SRS
								}
								is_subject_of = SRS
								is_in_faction_with = SRS
							}
						}
					}
					NTR = {
						add_to_war = {
							targeted_alliance = SRS
							enemy = FROM
						}
					}
				}
			}
			else_if = {
				limit = {
					tag = NTR
				}
				if = {
					limit = {
						FROM = { original_tag = SRS }
					}
					if = {
						limit = {
							has_idea = SRS_northern_war
						}
						remove_ideas = SRS_northern_war
						FROM = { remove_ideas = NTR_northern_war }
					}
					else_if = {
						limit = {
							has_idea = SRS_northern_clashes
						}
						remove_ideas = SRS_northern_clashes
						FROM = { remove_ideas = NTR_northern_clashes }
					}
				}
				else_if = {
					limit = {
						has_idea = NTR_anti_griffons_tactics_idea
						FROM = { has_tech = griffon_race }
					}
					FROM = { add_ideas = Griffons_war_with_the_northern_menace_idea_idea }
				}
			}
			else_if = {
				limit = {
					FROM = {
						original_tag = BRZ
						OR = {
							has_idea = BRZ_pacifism1
							has_idea = BRZ_pacifism2
							has_idea = BRZ_pacifism3
							has_idea = BRZ_pacifism4
						}
					}
				}
				FROM = {
					hidden_effect = {
						remove_ideas = BRZ_pacifism1
						remove_ideas = BRZ_pacifism2
						remove_ideas = BRZ_pacifism3
						remove_ideas = BRZ_pacifism4
					}
				}
			}
			
			if = {
				limit = {
					has_tech = griffon_race
					FROM = { has_idea = NTR_anti_griffons_tactics_idea }
				}
				add_ideas = Griffons_war_with_the_northern_menace_idea_idea
			}
			
			if = {
				limit = {
					OR = {
						is_ai = no
						NOT = { has_country_flag = recently_fixed_weapons }
					}
				}
				actually_fix_weapon_techs = yes
				set_country_flag = { flag = recently_fixed_weapons days = 1 value = 1 }
			}
			FROM = {
				if = {
					limit = {
						OR = {
							is_ai = no
							NOT = { has_country_flag = recently_fixed_weapons }
						}
					}
					actually_fix_weapon_techs = yes
					set_country_flag = { flag = recently_fixed_weapons days = 1 value = 1 }
				}
			}
		}
	}

	#FROM is state the nuke got dropped on
	on_nuke_drop = {
		effect = {
			FROM = {
				decrease_population_on_nuke = yes
			}
			if = {
				limit = {
					original_tag = EQS
					FROM = { state = 251 }
					NOT = { has_country_flag = nuked_the_hive }
				}
				save_event_target_as = hive_nuker
				set_country_flag = nuked_the_hive
				news_event = { id = news.50 days = 1}
			}
		}
	}

	#used when puppeting in a peace conference
	#ROOT = nation being puppeted, FROM = overlord
	on_puppet = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_puppet"
			FROM = { remove_opinion_modifier = { target = ROOT modifier = cry_betrayal } }
			LUS_load_commie_focus = yes
			BRF_load_mason_focus = yes
			GRU_load_commie_tree = yes
			FLO_load_ideology_focus = yes
			if = {
				limit = {
					ROOT = {
						is_river_fed_member = yes
					}
					FROM = {
						is_river_fed_member = no
					}
				}
				RIV_leave_fed_no_ally = yes
			}
			if = {#If RCT has done Friendship Without Borders, this will apply it to any future vassals they make
				limit = {
					FROM = {
						original_tag = RCT
						has_completed_focus = RCT_friendship_without_borders
					}
					ROOT = {
						NOT = {
							has_idea = RCT_friendship_without_borders_idea
						}
					}
				}
				add_ideas = RCT_friendship_without_borders_idea
			}

			if = {
				limit = {
					ROOT = {
						original_tag = GRY
						has_focus_tree = GRY_focus_neutral_rebellion
						NOT = {
							has_government = neutrality
						}
					}
				}
				GRY_load_focus_tree_on_puppet = yes
			}

			if = {
				limit = {
					tag = NIM
				}
				NIM_load_focus_tree_on_puppet = yes
			}

			FAT_add_puppet_ideas = yes

			#JUN_handle_puppet = yes

			CRY_check_for_Sombra_when_released = yes

			handle_twilight_escaping = yes

			if = {
				limit = { original_tag = CHN }
				if = {
					limit = {
						FROM = {
							OR = {
								original_tag = EQS
								original_tag = CRY
							}
							has_government = democratic
						}
					}
					FROM = {
						country_event = { id = changelings.39 days = 1 }
						country_event = { id = news.2101 days = 1 }
					}
					CHN = {
						drop_cosmetic_tag = yes
						set_cosmetic_tag = CHN_thorax
					}
					EQS_force_OLE_release_when_puppeting_CHN = yes
				}
				CHN_handle_fascist_communist_overlord = yes
			}

			if = {
				limit = {
					original_tag = EQS
					#NOT = { has_focus_tree = equestria_focus }
				}
				load_focus_tree = equestria_sol_focus #workaround
				country_event = { id = solarempire.1018 hours = 1 }
			}

			if = {
				limit = {
					FROM = {
						original_tag = EQS
					}
				}
				CRY_process_when_puppeted_by_EQS = yes
				CHN_remove_pony_opinion_maluses = yes
			}

			if = {
				limit = {
					FROM = {
						OR = {
                            original_tag = CRY
                            original_tag = EQC
                        }
					}
				}
                remove_opinion_modifier = { target = FROM modifier = CHN_embargo }
                FROM = { remove_opinion_modifier = { target = ROOT modifier = CHN_embargo } }
                remove_opinion_modifier = { target = FROM modifier = mortal_enemies }
                FROM = { remove_opinion_modifier = { target = ROOT modifier = mortal_enemies } }
			}

			if = {
				limit = {
					original_tag = EQC
				}
				if = {
					limit = {
						FROM = {
							OR = {
								original_tag = EQS
								original_tag = NLR
							}
						}
					}
					country_event = equestriancolony.1
				}
				else_if = {
					limit = {
						has_country_flag = equalist_eqc
						NOT = { has_government = communism }
					}
					country_event = equestriancolony.4
				}
				else_if = {
					limit = {
						has_country_flag = is_maresoc
					}
					country_event = equestriancolony.3
				}
				else_if = {
					limit = { NOT = { has_focus_tree = new_mareland_focus } }
					load_focus_tree = new_mareland_focus
					country_event = equestriancolony.2
				}
			}

			set_have_regular_puppets = yes

			JER_complete_focuses_based_on_overlord = yes

			GRI_remove_RIV_opinion_modifiers = yes

			if = {
				limit = {
					original_tag = FEA
					OR = {
						has_cosmetic_tag = FEA_PvdA_old_flag
						has_cosmetic_tag = FEA_PvdA_old_flag_GRI_Puppet
					}
					FROM = { has_government = communism }
				}
				drop_cosmetic_tag = yes
			}

			AI_puppet_to_annex = yes

			if = {
				limit = {
					original_tag = BRF
					FROM = { has_government = communism }
				}
				country_event = prywhen.34
			}

			if = {
				limit = {
					original_tag = GRW
					FROM = { NOT = { has_government = communism } }
				}
				country_event = prywhen.34
			}

			if = {
				limit = {
					tag = NLR
					FROM = { NOT = { has_government = fascism } }
				}
				country_event = lunas.940
			}

			if = {
				limit = {
					FROM = {
						original_tag = EQS
						has_government = democratic
					}
				}
				if = {
					limit = { original_tag = BUF }
					country_event = bufstate.36
					break = yes
				}
			}
			
			if = {
				limit = { tag = NTR }
				NTR_load_focus_tree_on_puppet = yes
			}
			
			FROM = { ROOT = { apply_cosmetic_tags_on_puppet_PREV_is_overlord = yes } }
		}
	}

	#used when puppeting through the occupied territories menu during peace time (or when releasing from non-core but owned territory, f.e. Britain releasing Egypt)
	#ROOT = nation being released, FROM = overlord
	on_release_as_puppet = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_release_as_puppet"

			#if = {
			#	limit = {
			#		FROM = { has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier } }
			#		any_of_scopes = {
			#			array = controlled_states
			#			has_variable = EaW_state_winter_debuffer_var
			#		}
			#	}
			#	adjust_EaW_winter_and_frozen_seas_dynamic_modifier_on_release = yes
			#}
			#else_if = {
			#	limit = {
			#		check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0 }
			#		OR = {
			#			check_variable = { global.month < 5 }
			#			check_variable = { global.month > 10 }
			#		}
			#		any_of_scopes = {
			#			array = controlled_states
			#			has_variable = EaW_state_winter_debuffer_var
			#		}
			#	}
			#	add_EaW_frozen_seas_dynamic_effects_on_release = yes
			#}

			GRU_load_commie_tree = yes

			if = {
				limit = {
					AND = {
						original_tag = FAT
						is_subject_of = GRI
					}
				}
				set_cosmetic_tag = FAT_GRI_puppet
				load_focus_tree = generic_griffon_focus
			}
			else_if = {
				limit = {
					AND = {
						original_tag = SRS
						is_subject_of = GRI
					}
				}
				set_cosmetic_tag = SRS_GRI_puppet
				load_focus_tree = generic_griffon_focus
			}
			else_if = {
				limit = {
					AND = {
						original_tag = MIT
						is_subject_of = GRI
					}
				}
				set_cosmetic_tag = MIT_GRI_puppet
				load_focus_tree = generic_griffon_focus
			}
			else_if = {
				limit = {
					AND = {
						original_tag = KAT
						is_subject_of = GRI
					}
				}
				set_cosmetic_tag = KAT_GRI_puppet
				load_focus_tree = generic_griffon_focus
			}
			else_if = {
				limit = {
					AND = {
						original_tag = STW
						is_subject_of = GRI
					}
				}
				set_cosmetic_tag = STW_GRI_puppet
				load_focus_tree = generic_griffon_focus
			}
			else_if = {
				limit = {
					AND = {
						original_tag = MNC
						is_subject_of = GRI
					}
				}
				set_cosmetic_tag = MNC_GRI_puppet
				load_focus_tree = generic_griffon_focus
			}
			else_if = {
				limit = {
					AND = {
						original_tag = YAL
						is_subject_of = GRI
					}
				}
				set_cosmetic_tag = YAL_GRI_puppet
				load_focus_tree = generic_griffon_focus
			}
			if = {
				limit = {
					AND = {
						original_tag = PYT
						is_subject_of = GRI
					}
				}
				set_cosmetic_tag = PYT_GRI_puppet
				load_focus_tree = generic_griffon_focus
			}
			if = {
				limit = {
					AND = {
						original_tag = HAU
						is_subject_of = GRI
					}
				}
				set_cosmetic_tag = HAU_GRI_puppet
				load_focus_tree = generic_griffon_focus
			}
			else_if = {
				limit = {
					AND = {
						original_tag = TRD
						is_subject_of = GRI
					}
				}
				set_cosmetic_tag = TRD_GRI_conquered_puppet ## Justification: Unlikely that GRI will reinstate the Free City of Skyfall after what they did; better to marginalise the city and reduce its power ##
				set_capital = 380
				load_focus_tree = generic_griffon_focus
			}
			if = {
				limit = { tag = DED }
				FROM = {
					annex_country = { target = ROOT  }
					country_event = { id = deadempire.29 days = 1 }
				}
			}
			if = {
				limit = { FROM = { tag = DED } }
				annex_country = { target = FROM  }
			}
			if = {
				limit = {
					FROM = {
						tag = GRU
						has_country_flag = GRU_company_intervention
					}
					ROOT = { tag = ZES }
				}
				ROOT = { set_cosmetic_tag = ZES_GRU_company  }
			}
			if = {
				limit = {
					FROM = {
						tag = GRU
						has_country_flag = GRU_company_intervention
					}
					ROOT = { tag = OLV }
				}
				ROOT = { set_cosmetic_tag = OLV_GRU_company  }
			}
			if = {
				limit = {
					FROM = {
						tag = GRU
						has_country_flag = GRU_company_intervention
					}
					ROOT = { tag = BAR }
				}
				ROOT = { set_cosmetic_tag = BAR_GRU_company  }
			}
			if = {
				limit = {
					FROM = {
						tag = GRU
						has_country_flag = GRU_company_intervention
					}
					ROOT = { tag = BRF }
				}
				ROOT = { set_cosmetic_tag = BRF_GRU_company  }
			}
			if = {
				limit = {
					FROM = {
						tag = GRU
						has_country_flag = GRU_company_intervention
					}
					ROOT = { tag = GRW }
				}
				ROOT = { set_cosmetic_tag = GRW_GRU_company  }
			}
			if = {
				limit = {
					FROM = {
						tag = GRU
						has_country_flag = GRU_company_intervention
					}
					ROOT = { tag = GRY }
				}
				ROOT = { set_cosmetic_tag = GRY_GRU_company  }
			}
			if = {
				limit = {
					FROM = {
						tag = GRU
						has_country_flag = GRU_company_intervention
					}
					ROOT = { tag = WIT }
				}
				ROOT = { set_cosmetic_tag = WIT_GRU_company  }
			}
			if = {
				limit = {
					FROM = {
						tag = GRU
						has_country_flag = GRU_company_intervention
					}
					ROOT = { tag = FRE }
				}
				ROOT = { set_cosmetic_tag = FRE_GRU_company  }
			}
			country_event = deadempire.36
			if = {#If RCT has done Friendship Without Borders, this will apply it to any future vassals they make
				limit = {
					FROM = {
						original_tag = RCT
						has_completed_focus = RCT_friendship_without_borders
					}
					ROOT = {
						NOT = {
							has_idea = RCT_friendship_without_borders_idea
						}
					}
				}
				add_ideas = RCT_friendship_without_borders_idea
			}
			if = {
				limit = {
					ROOT = {
						OR = {
							original_tag = WIT
							original_tag = RCT
							original_tag = LCT
							original_tag = FRE
							original_tag = DEP
							original_tag = DMT
							original_tag = BAK
							original_tag = NIM
						}
						has_cosmetic_tag = RIV_federation_mem
						is_river_fed_member = no
					}
				}
				RIV_drop_cosmetic_tag = yes
			}

			LUS_load_commie_focus = yes

			BRF_load_mason_focus = yes

			FLO_load_ideology_focus = yes
      
			if = {
				limit = { original_tag = BRF }
				BRF = {	country_event = brodfeld.27 }
			}

			if = {
				limit = { original_tag = CHN }
				CHN_handle_fascist_communist_overlord = yes
				CHN_demilitarise = yes
			}

			CRY_check_for_Sombra_when_released = yes

			if = {
				limit = { FROM = { original_tag = NLR } original_tag = EQS }
				FROM = { annex_country = { target = ROOT } }
			}

			if = {
				limit = {
					original_tag = EQS
					#NOT = { has_focus_tree = equestria_focus }
				}
				load_focus_tree = equestria_sol_focus #workaround
				country_event = { id = solarempire.1018 hours = 1 }
			}

			if = {
				limit = {
					FROM = {
						original_tag = EQS
					}
				}
				if = {
					limit = { original_tag = NLR }
					FROM = { annex_country = { target = ROOT } }
				}
				CRY_process_when_puppeted_by_EQS = yes
				CHN_remove_pony_opinion_maluses = yes
			}

			if = {
				limit = {
					original_tag = EQC
				}
				if = {
					limit = {
						FROM = {
							OR = {
								original_tag = EQS
								original_tag = NLR
							}
						}
					}
					country_event = equestriancolony.1
				}
				else_if = {
					limit = {
						has_country_flag = equalist_eqc
						NOT = { has_government = communism }
					}
					country_event = equestriancolony.4
				}
				else_if = {
					limit = {
						has_country_flag = is_maresoc
					}
					country_event = equestriancolony.3
				}
				else_if = {
					limit = { NOT = { has_focus_tree = new_mareland_focus } }
					load_focus_tree = new_mareland_focus
					country_event = equestriancolony.2
				}
			}

			if = {
				limit = {
					original_tag = BRF
					FROM = { has_government = communism }
				}
				country_event = prywhen.34
			}

			if = {
				limit = {
					original_tag = GRW
					FROM = { NOT = { has_government = communism } }
				}
				country_event = prywhen.34
			}

			if = {
				limit = {
					tag = NLR
					FROM = { NOT = { has_government = fascism } }
				}
				country_event = lunas.940
			}

			if = {
				limit = {
					ROOT = {
						original_tag = GRY
						has_focus_tree = GRY_focus_neutral_rebellion
						NOT = {
							has_government = neutrality
						}
					}
				}
				GRY_load_focus_tree_on_puppet = yes
			}

			if = {
				limit = {
					tag = NIM
				}
				NIM_load_focus_tree_on_puppet = yes
			}

			JER_complete_focuses_based_on_overlord = yes

			transfer_society_and_science_ideas_when_released = yes

			if = {
				limit = {
					FROM = {
						has_country_flag = FEA_STW_union
					}
					OR = {
						tag = STW
						tag = FEA
					}
				}
				FROM = {
					set_autonomy = {
						target = ROOT
						autonomy_state = autonomy_personal_union
					}
					clr_country_flag = FEA_STW_union
					drop_cosmetic_tag = yes
				}
				break = yes
			}
			
			if = {
				limit = {
					FROM = {
						original_tag = EQS
						has_government = democratic
					}
				}
				if = {
					limit = { original_tag = BUF }
					country_event = bufstate.36
					break = yes
				}
			}
			
			if = {
				limit = { tag = NTR }
				country_event = Ntribes.999
			}

			FROM = { ROOT = { apply_cosmetic_tags_on_puppet_PREV_is_overlord = yes } }

			actually_fix_weapon_techs = yes
			FROM = { actually_fix_weapon_techs = yes }
		}
	}

	#ROOT is subject FROM is overlord
	on_subject_annexed = {
		effect = {
			if = {
				limit = {
					OR = {
						tag = STW
						tag = FEA
					}
					OR = {
						has_country_flag = FEA_STW_marriage
						FROM = { has_country_flag = FEA_STW_marriage }
					}
					FROM = {
						OR = {
							tag = STW
							tag = FEA
						}
						OR = {
							has_country_leader = { ruling_only = yes name = "Duchess Gabriela Eagleclaw" }
							has_idea = FEA_beloved_monarch
							has_idea = FEA_beloved_monarch_2
							has_idea = FEA_beloved_monarch_3
						}
					}
					OR = {
						has_country_leader = { ruling_only = yes name = "Duchess Gabriela Eagleclaw" }
						has_idea = FEA_beloved_monarch
						has_idea = FEA_beloved_monarch_2
						has_idea = FEA_beloved_monarch_3
					}
				}
				FROM = {
					set_country_flag = FEA_STW_union
					set_cosmetic_tag = FEA_STW_union
				}
			}
		}
	}

	#ROOT is winner #FROM gets annexed - For civil wars on_civil_war_end is also fired
	on_annex = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_annex"
			FROM = { remove_from_global_arrays_on_annex = yes }
			if = {
				limit = {
					has_war = no
					NOT = {
						has_country_flag = recovery_idea_bypass
						has_country_flag = FAT_bypass_recovery
						FROM = { has_country_flag = FAT_bypass_recovery }
					}
					OR = {
						original_tag = FROM
						AND = {
							original_tag = EQS
							FROM = { original_tag = NLR }
						}
						AND = {
							FROM = { original_tag = EQS }
							original_tag = NLR
						}
						AND = {
							original_tag = FAW
							FROM = { original_tag = FAT }
						}
						AND = {
							FROM = { original_tag = FAW }
							original_tag = FAT
						}
					}
				}
				add_timed_idea = {
					idea = civil_war_recovery
					days = 210
				}
				clr_country_flag = FAT_bypass_recovery
				FROM = { clr_country_flag = FAT_bypass_recovery }
			}

			if = {
				limit = {
					FROM = { tag = event_target:griffonian_empire }
				}
				GRI = {
					save_global_event_target_as = griffonian_empire
					set_variable = { global.griffonian_empire_var = THIS }
				}
			}

			if = {
				limit = {
					OR = {
						tag = FAW
						original_tag = FAT
					}
					FROM = { tag = FAT }
				}
				set_global_flag = keremeskai_dead
				hidden_effect = {
					FAT = { kill_country_leader = yes }
				}
			}

			if = {
				limit = {
					FROM = {
						OR = {
							tag = LNS
							tag = LSM
							tag = LSC
						}
					}
					OR = {
						tag = LNS
						tag = LSM
						tag = LSC
					}
				}
				save_global_event_target_as = longsword
			}

			if = {
				limit = {
					tag = CHN
					FROM = { original_tag = OLE }
				}
				FROM = { set_country_flag = OLE_was_annexed }
			}

			handle_twilight_escaping = yes

			if = {
				limit = {
					FROM = {
						tag = JER
						has_idea = JER_revolutionary
					}
					FAT = {
						exists = yes
						is_subject = no
					}
				}
				FAT = { country_event = { id = griffonRepublic.83 days = 15 } }
			}

			if = {
				limit = {
					OR = {
						tag = JEB
						tag = JES
						tag = VIN
						tag = JFT
						tag = JRR
					}
					NOT = {
						has_government = democratic
						has_government = communism
						AND = {
							tag = JRR
							has_country_flag = JER_JRR_revolutionary
						}
					}
					FROM = {
						tag = JER
						has_completed_focus = JER_fight_for_freedom
					}
				}
				country_event = aquileia_news.4
			}

			if = {
				limit = {
					OR = {
						AND = {
							tag = JER
							has_completed_focus = JER_fight_for_freedom
							FROM = {
								OR = {
									tag = JEB
									tag = JES
									tag = VIN
									tag = JFT
									tag = JRR
								}
							}
							OR = {
								has_government = democratic
								has_government = communism
							}
							JEB = { OR = { exists = no is_subject_of = ROOT } }
							JRR = { OR = { exists = no is_subject_of = ROOT } }
							VIN = { OR = { exists = no is_subject_of = ROOT } }
							JFT = { OR = { exists = no is_subject_of = ROOT } }
							JES = { OR = { exists = no is_subject_of = ROOT } }
						}
						AND = {
							OR = {
								tag = JEB
								tag = JES
								tag = VIN
								tag = JFT
								tag = JRR
							}
							FROM = {
								tag = JER
								NOT = { has_completed_focus = JER_fight_for_freedom }
							}
							OR = {
								has_government = democratic
								has_government = communism
								AND = {
									tag = JRR
									has_country_flag = JER_JRR_revolutionary
								}
							}
						}
					}
				}
				FEZ = {
					country_event = {
						id = fezera.126
						days = 5
					}
					country_event = {
						id = fezera.127
						days = 30
					}
				}
				country_event = aquileia_news.2
				country_event = fezera.131
			}

			if = {
				limit = {
					tag = event_target:solar_empire
					FROM = { original_tag = EQC }
				}
				set_province_name = { id = 10005 name = "Sunset"}
			}

			if = {
				limit = {
					FROM = { tag = NCH }
				}
				set_variable = {
					NCH_trade_partners_iter = 0
				}
				NCH_get_trading_idea = yes
			}

			if = {
				limit = {
					FROM = { tag = VED }
				}
				if = {
					limit = {
						VED = { has_country_flag = NTR_agreed_to_cooperate_flag }
						NTR = {
							has_government = democratic
							exists = yes
							NOT = { has_completed_focus = NTR_open_our_doors_to_all }
						}
					}
					NTR = {
						complete_national_focus = NTR_open_our_doors_to_all
						if = {
							limit = {
								has_completed_focus = NTR_vedinas_tutelage
							}
							complete_national_focus = NTR_our_own_future
							if = {
								limit = {
									has_completed_focus = NTR_joint_development
								}
								complete_national_focus = NTR_foreign_standarts
								if = {
									limit = {
										has_completed_focus = NTR_civil_investments
									}
									unlock_national_focus = NTR_domestic_development
									if = {
										limit = {
											has_completed_focus = NTR_establish_vedinian_guild
										}
										unlock_national_focus = NTR_expand_guilds_rights
										set_variable = { SM_trigger_cost_var = 19 }
										set_variable = { SM_effect_cost_var = -20 }
										if = {
											limit = {
												has_completed_focus = NTR_scientific_training
											}
											complete_national_focus = NTR_foreign_research_labs
											if = {
												limit = {
													has_completed_focus = NTR_prepare_for_the_worst
												}
												complete_national_focus = NTR_refined_production_methods
												if = {
													limit = {
														has_completed_focus = NTR_the_brother_kingdoms
													}
													unlock_national_focus = NTR_a_free_and_proud_north
												}
											}
										}
										if = {
											limit = {
												has_completed_focus = NTR_prepare_for_the_worst
											}
											complete_national_focus = NTR_refined_production_methods
										}
									}
								}
							}
							else_if = {
								limit = {
									has_completed_focus = NTR_civil_investments
								}
								complete_national_focus = NTR_domestic_development
							}
						}
					}
				}
			}
		}
	}

	#ROOT is winner #FROM gets annexed - This fires just before FROM gets annexed, meaning the country and everything it owns still exists. It will also fire on_annex and on_civil_war_end
	on_civil_war_end_before_annexation = {
		effect = {
			#End of Wingbardian Civil War - moving the fleet back to the Fascists because they won
			if = {
				limit = {
					OR = {
						original_tag = WNG
						original_tag = OLE
					}
				}
				FROM = {
					transfer_navy = { target = ROOT }
				}
			}
		}
	}

	#ROOT is winner FROM gets annexed
	on_civil_war_end = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_civil_war_end"
			if = {
				limit = {
					original_tag = EQS
				}
				if = {
					limit = {
						FROM = { has_government = communism }
					}
					country_event = { id = equestriadem.8 days = 60 }
					country_event = { id = equestria.44 days = 1 }
				}
				else_if = {
					limit = {
						FROM = { tag = event_target:solar_empire }
						tag = event_target:equestria
					}
					set_capital = 3
					SOL = { save_global_event_target_as = solar_empire }
				}
				else_if = {
					limit = {
						tag = event_target:solar_empire
						FROM = { tag = event_target:equestria }
					}
					SOL = {
						set_politics = { ruling_party = democratic }
						save_global_event_target_as = equestria
					}
					set_country_flag = { flag = SOL_next_civ_war_delay value = 1 days = 180 }
				}
			}
			else_if = {
				limit = {
					original_tag = FBK
				}
				if = {
					limit = {
						NCH = { has_country_flag = NCH_Farbrook_Civil_War_Flag }
					}
					if = {
						limit = {
							NOT = { has_government = fascism }
						}
						NCH = { country_event = { id = greneclyf.43 days = 2 } }
					}
					else = {
						NCH = { country_event = { id = greneclyf.37 days = 1 } }
					}
				}
				else_if = {
					limit = {
						NCH = { has_country_flag = NCH_Farbrook_Commie_Civil_War_Flag }
					}
					if = {
						limit = {
							NOT = { has_government = communism }
						}
						NCH = { country_event = { id = greneclyf.55 days = 2 } }
					}
					else = {
						NCH = { country_event = { id = greneclyf.49 days = 1 } }
					}
				}
			}
			else_if = {
				limit = {
					original_tag = CRY
				}
				if = {
					limit = {
						has_government = fascism
						has_country_leader = { ruling_only = yes name = "King Sombra" }
					}
					country_event = { id = crysom.16 hours = 12 }
					if = {
						limit = { event_target:equestria = { exists = yes } }
						random_list = {
							30 = {
								event_target:equestria = {
									country_event = { id = crysom.49 hours = 2 }
								}
								country_event = { id = crysom.50 hours = 1 }
							}
							70 = { country_event = { id = crysom.41 hours = 1 } }
						}
						else = { country_event = { id = crysom.41 hours = 1 } }
					}
				}
				else_if = {
					limit = {
						has_government = communism
						FROM = { has_government = democratic }
					}
					news_event = { id = news.cry.1 days = 1 }
				}
				set_capital = 344
			}
			else_if = {
				limit = {
					original_tag = OLE
				}
				set_capital = 76
				drop_cosmetic_tag = yes
			}
			else_if = { # End of ideology Civil War
				limit = {
					original_tag = WNG
				}
				set_capital = 371
				if = {
					limit = {
						is_in_faction = no
						is_subject = no
					}
					create_faction = Southern_Kingdoms
				}
				if = { # Give back WNG focus tree to Beakolini if he wins the civil war
					limit = {
						has_government = fascism
						FROM = { NOT = { has_government = fascism } }
					}
					unlock_national_focus = WNG_march_on_karthin
					unlock_national_focus = WNG_meet_with_beakolini
					unlock_national_focus = WNG_a_fascist_prime_minister
					news_event = { id = news_wingbardy.9 days = 1 }
				}
				else_if = { # End WNG Civil War Event
					limit = {
						has_government = communism
						FROM = { has_government = fascism }
					}
					country_event = { id = wingbardy.51 days = 1 }
					news_event = { id = news_wingbardy.8 days = 1 }
				}
			}
			else_if = { # End of EQC MARESOC Civil War
				limit = {
					original_tag = EQC
				}
				if = {
					limit = {
						FROM = { has_country_flag = is_maresoc }
					}
					country_event = { id = mareland.26 days = 1 }
				}
				else = {
					country_event = { id = mareland.27 days = 1 }
				}
			}
			else_if = {
				limit = {
					original_tag = LUS
					FROM = { has_government = neutrality }
				}
				country_event = { id = lushi_peasants.1 days = 50 random = 480 }#days to hours applied
			}
			else_if = {
				limit = {
					original_tag = FIR
				}
				country_event = { id = FIR.29 days = 1 }
			}
			else_if = {
				limit = {
					original_tag = NTR
				}
				if = {
					limit = {
						has_government = communism
					}
					if = {
						limit = {
							NOT = { has_country_flag = NTR_the_unification_process_is_half_completed_flag }
						}
						set_country_flag = NTR_the_unification_process_is_half_completed_flag
					}
					if = {
						limit = {
							NOT = { has_country_flag = NTR_the_unification_process_is_completed_flag }
						}
						set_country_flag = NTR_the_unification_process_is_completed_flag
					}
				}
				else_if = {
					limit = {
						has_country_flag = NTR_united_northern_front_flag
						has_war = no
					}
					country_event = { id = Ntribes.533 days = 3 random = 24 }
				}
			}
			else_if = {
				limit = {
					original_tag = SRS
				}
				if = {
					limit = {
						NOT = {
							has_government = communism
							NTR = {
								has_government = communism
								exists = yes
							}
						}
					}
					if = {
						limit = {
							NTR = { has_completed_focus = NTR_too_much_blood_already }
						}
						add_ideas = SRS_northern_clashes
						NTR = { add_ideas = NTR_northern_clashes }
					}
					else = {
						add_ideas = SRS_northern_war
						NTR = { add_ideas = NTR_northern_war }
					}
				}
			}
			else_if = {
				limit = {
					original_tag = VED
				}
				if = {
					limit = {
						has_idea = VED_NTR_democratic_check_hidden_idea
						NTR = { has_completed_focus = NTR_vedinas_tutelage }
					}
					add_ideas = VED_NTR_partnership_idea_full_idea
					NTR = {
						add_ideas = NTR_VED_partnership_idea_full_idea
						if = {
							limit = {
								has_completed_focus = NTR_joint_development
							}
							ROOT = { add_ideas = VED_NTR_joint_development_idea_full_idea }
							add_ideas = NTR_VED_joint_development_idea_full_idea
							if = {
								limit = {
									has_completed_focus = NTR_scientific_training
								}
								if = {
									limit = {
										ROOT = { is_in_tech_sharing_group = Northern_griffonia_science_organisation_democratic }
									}
									remove_from_tech_sharing_group = Northern_griffonia_science_organisation_democratic
									NTR = { remove_from_tech_sharing_group = Northern_griffonia_science_organisation_democratic }
								}
								ROOT = {
									add_to_tech_sharing_group = Northern_griffonia_science_organisation_democratic_full
									add_ideas = VED_NTR_maintaining_relations_high_hidden_idea
								}
								add_to_tech_sharing_group = Northern_griffonia_science_organisation_democratic_full
								add_ideas = NTR_VED_maintaining_relations_high_hidden_idea
							}
							else = {
								ROOT = { add_ideas = VED_NTR_maintaining_relations_medium_hidden_idea }
								add_ideas = NTR_VED_maintaining_relations_medium_hidden_idea
							}
						}
						else = {
							ROOT = { add_ideas = VED_NTR_maintaining_relations_low_hidden_idea }
							add_ideas = NTR_VED_maintaining_relations_low_hidden_idea
						}
					}
				}
			}
		}
	}
	# ROOT is capitulated country, FROM is winner
	on_capitulation = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_capitulation"
			if = {
				limit = {
					tag = EQP
				}
				EQS = { annex_country = { target = EQP } }
			}
			if = {
				limit = {
					tag = NLR
					FROM = { tag = EQS }
				}
				transfer_navy = { target = FROM }
			}
			if = {
				limit = {
					tag = EQS
					FROM = { tag = NLR }
				}
				transfer_navy = { target = FROM }
			}
			if = {
				limit = {
					original_tag = EQS
					has_government = democratic
					is_in_faction_with = EQC
					FROM = { 
						OR = {
							tag = CHN 
							tag = NLR
						}
					}
					EQC = {
						exists = yes
						has_capitulated = no
						NOT = {
							any_owned_state = {
								is_controlled_by = FROM
							}
						}
						#all_owned_state = {
						#	is_fully_controlled_by = EQC
						#}
					}
					#EQC = { has_completed_focus = EQC_strengthen_equestrian_ties }
				}
				EQC = {
					if = {
						limit = { FROM = { tag = CHN } }
						ROOT = {
							transfer_navy = { target = EQC }
							every_navy_leader = {
								set_unit_leader_flag = used_to_be_EQS
								set_nationality = EQC
							}
						}
					}
					if = {
						limit = { is_subject = yes }
						end_puppet_this = yes
					}
					if = {
						limit = { is_in_faction = yes }
						leave_faction = yes
					}
					if = {
						limit = { has_war_with = FROM }
						set_country_flag = { flag = bypass_on_peaceconference_ended days = 1 value = 1 }
						white_peace = FROM
					}
					if = {
						limit = { FROM = { tag = CHN } }
						set_country_flag = EQC_govt_in_exile
					}
					else_if = {
						limit = { FROM = { is_ai = no } }
						FROM = {
							create_wargoal = { target = ROOT type = puppet_wargoal_focus }
						}
					}
				}
			}
			if = {
				limit = {
					tag = BAL
				}
				if = {
					limit = {
						country_exists = SIC
					}
					SIC = {
						country_event = {
							id = baltimare.28
							days = 7
						}
					}
				}
			}
			if = {
				limit = {
					tag = CHN
					FROM = { tag = CCN }
				}
				transfer_navy = { target = FROM }
			}
			if = {
				limit = {
					tag = TRD
					FROM = { tag = event_target:griffonian_empire }
				}
				transfer_navy = { target = FROM }
			}
			if = {
				limit = {
					SIC = { has_country_flag = don_is_in_blackrock }
					tag = BAN
				}
				SIC = { country_event = sicameon.96 }
			}
			if = {
				limit = {
					SIC = { has_country_flag = don_is_in_stripes }
					tag = ZES
				}
				SIC = { country_event = sicameon.97 }
			}
			if = {
				limit = {
					FROM = {
						tag = DED
						NOT = { has_country_flag = DED_capitulated@ROOT}
					}
				}
				FROM = { set_country_flag = DED_capitulated@ROOT }
				if = {
					limit = { is_major = yes }
					FROM = { modify_country_flag = { flag = DED_killed_nations value = 5 } }
					else = {
						FROM = { modify_country_flag = { flag = DED_killed_nations value = 1 } }
					}
				}
			}
			if = {
				limit = {
					tag = SRS
					FROM = {
						tag = NTR
						is_subject = no
					}
				}
				NTR = { annex_country = { target = SRS } }
			}
			if = {
				limit = {
					tag = NTR
					has_war = no
				}
				if = {
					limit = { has_decision = NTR_call_up_commune_militias }
					remove_decision = NTR_call_up_commune_militias
					delete_unit_template_and_units = { division_template = "Commune Militia" }
				}
				else_if = {
					limit = { has_decision = NTR_call_up_commune_militias_full }
					remove_decision = NTR_call_up_commune_militias_full
					delete_unit_template_and_units = { division_template = "Commune Militia" }
				}
			}
			else_if = {
				limit = {
					FROM = {
						tag = NTR
						has_war = no
					}
				}
				FROM = {
					if = {
						limit = { has_decision = NTR_call_up_commune_militias }
						remove_decision = NTR_call_up_commune_militias
						delete_unit_template_and_units = { division_template = "Commune Militia" }
					}
					else_if = {
						limit = { has_decision = NTR_call_up_commune_militias_full }
						remove_decision = NTR_call_up_commune_militias_full
						delete_unit_template_and_units = { division_template = "Commune Militia" }
					}
				}
			}
			handle_twilight_escaping = yes
		}
	}

	#ROOT is free nation FROM is releaser
	on_release_as_free = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_release_as_free"

			#if = {
			#	limit = {
			#		FROM = { has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier } }
			#		any_of_scopes = {
			#			array = controlled_states
			#			has_variable = EaW_state_winter_debuffer_var
			#		}
			#	}
			#	adjust_EaW_winter_and_frozen_seas_dynamic_modifier_on_release = yes
			#}
			#else_if = {
			#	limit = {
			#		check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0 }
			#		OR = {
			#			check_variable = { global.month < 6 }
			#			check_variable = { global.month > 10 }
			#		}
			#		any_of_scopes = {
			#			array = controlled_states
			#			has_variable = EaW_state_winter_debuffer_var
			#		}
			#	}
			#	add_EaW_frozen_seas_dynamic_effects_on_release = yes
			#}

			GRU_load_commie_tree = yes
			FLO_load_ideology_focus = yes

			if = {
				limit = { tag = DED }
				FROM = {
					annex_country = { target = ROOT  }
					country_event = { id = deadempire.29 days = 1 }
				}
			}
			country_event = deadempire.36
			if = {
				limit = {
					original_tag = CRY
				}
				country_event = crysom.48
			}
			if = {
				limit = {
					original_tag = BRF
					has_government = communism
				}
				country_event = prywhen.34
			}

			if = {
				limit = { original_tag = BRF }
				BRF = {	country_event = brodfeld.27 }
			}

			if = {
				limit = {
					original_tag = GRW
					NOT = { has_government = communism }
				}
				country_event = prywhen.34
			}

			if = {
				limit = {
					original_tag = EQS
					#NOT = { has_focus_tree = equestria_focus }
				}
				load_focus_tree = equestria_sol_focus #workaround
				country_event = { id = solarempire.1018 hours = 1 }
			}

			if = {
				limit = {
					tag = NLR
					NOT = { has_government = fascism }
				}
				country_event = lunas.940
			}

			if = {
				limit = {
					FROM = {
						has_country_flag = FEA_STW_union
					}
					OR = {
						tag = STW
						tag = FEA
					}
				}
				FROM = {
					clr_country_flag = FEA_STW_union
					drop_cosmetic_tag = yes
				}
			}
			
			if = {
				limit = {
					OR = {
						has_idea = dummy_idea_society
						NOT = { has_idea_with_trait = society_idea }
					}
				}
				if = {
					limit = { FROM = { NOT = { has_idea = modern_society } } }
					FROM = { ROOT = { transfer_society_ideas = yes } }
				}
				else = {
					add_ideas = modern_society
					if = {
						limit = { has_variable = NTR_VED_HLR_guilds_power_var }
						if = {
							limit = { has_completed_focus = NTR_the_dawn_of_a_new_millenium }
							set_variable = { NTR_VED_HLR_guilds_power_var = 4 }
						}
						else = {
							set_variable = { NTR_VED_HLR_guilds_power_var = 3 }
						}
					}
				}
			}
			
			if = {
				limit = {
					OR = {
						has_idea = dummy_idea_science
						NOT = { has_idea_with_trait = science_idea }
					}
				}
				if = {
					limit = { FROM = { NOT = { has_idea = proper_science_base } } }
					FROM = { ROOT = { transfer_science_ideas = yes } }
				}
				else = { add_ideas = proper_science_base }
			}
			
			if = {
				limit = {
					ROOT = {
						original_tag = GRY
						has_focus_tree = GRY_focus_neutral_rebellion
						NOT = {
							has_government = neutrality
						}
					}
				}
				GRY_load_focus_tree_on_puppet = yes
			}
			
			if = {
				limit = { tag = NTR }
				country_event = Ntribes.999
			}

			JER_complete_focuses_based_on_overlord = yes
			BRF_load_mason_focus = yes

			actually_fix_weapon_techs = yes
			FROM = { actually_fix_weapon_techs = yes }
		}
	}

	on_subject_free = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_subject_free"
			GRU_load_commie_tree = yes
			if = {
				limit = {
					has_cosmetic_tag = GRI_SUBJECT
				}
				country_event = griffonian.2
				break = yes
			}
			if = {
				limit = {
					has_country_flag = is_changeling_puppet
					NOT = { tag = EQS }
				}
				country_event = changelings.910
				break = yes
			}
			if = {
				limit = {
					has_country_flag = is_changeling_puppet
					original_tag = EQS
					num_of_controlled_states > 15
					controls_fillydelphia = yes
					controls_manehattan = yes
					controls_los_pegasus = yes
					controls_baltimare = yes
					controls_canterlot = yes
				}
				country_event = changelings.911
				break = yes
			}
			if = {
				limit = {
					original_tag = EQC
					OR = {
						has_cosmetic_tag = EQC_EQS
						has_cosmetic_tag = EQC_SOL
						has_cosmetic_tag = EQC_NLR
					}
				}
				country_event = equestriancolony.2
				break = yes
			}
			if = {
				limit = {
					NOT = { original_tag = EQS }
					has_country_flag = is_luna_puppet
				}
				country_event = lunas.910
				break = yes
			}
			if = {
				limit = {
					original_tag = CRY
					NOT = {
						is_subject_of = event_target:solar_empire
						is_in_faction_with = event_target:solar_empire
					}
					has_country_flag = is_sol_puppet
				}
				country_event = solarempiresparkles.104
				break = yes
			}
			if = {
				limit = {
					has_country_flag = is_solar_puppet
				}
				country_event = solarempire.1007
				break = yes
			}
			if = {
				limit = {
					has_country_flag = is_FAT_puppet
				}
				country_event = griffonRepublic.101
				break = yes
			}
		}
	}

	on_government_change = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] on_government_change"
			if = {
				limit = { original_tag = CRY }
				CRY_restore_establishment = yes
				country_event = { id = crysom.48 hours = 1 }
				if = {
					limit = {
						has_country_leader = { ruling_only = yes name = "Radiant Hope" }
						has_global_flag = sombra_returned
					}
					kill_country_leader = yes
				}
			}

			if = {
				limit = {
					original_tag = EQC
					has_country_flag = has_supported_equalists
					has_government = communism
				}
				country_event = { id = mareland.30 hours = 1 }
			}

			FIR_FBK_on_govt_change = yes

			if = {
				limit = {
					original_tag = FIR
					has_country_flag = FIR_is_necromancer
					NOT = { has_country_leader = { ruling_only = yes name = "Shinespark" } }
				}
				add_opinion_modifier = {
					target = DED
					modifier = mortal_enemies
				}
				add_opinion_modifier = {
					target = DED
					modifier = CHN_embargo
				}
				reverse_add_opinion_modifier = {
					target = DED
					modifier = mortal_enemies
				}
				reverse_add_opinion_modifier = {
					target = DED
					modifier = CHN_embargo
				}
			}
			if = {
				limit = {
					original_tag = BAN
					has_government = neutrality
				}
				clr_country_flag = have_regular_puppets
			}
			if = {
				limit = {
					original_tag = GRU
				}
				if = {
					limit = { has_government = communism }
					load_focus_tree = gryphus_commie_tree
					else = {
						load_focus_tree = gryphus
					}
				}
			}
			if = {
				limit = {
					original_tag = STG
					is_subject = no
				}
				if = {
					limit = {
						has_government = democratic
					}
					drop_cosmetic_tag = yes
					set_cosmetic_tag = STG_DEM
					break = yes
				}
				if = {
					limit = {
						has_government = fascism
					}
					drop_cosmetic_tag = yes
					set_cosmetic_tag = STG_PAGAN
					break = yes
				}
				if = {
					limit = {
						has_government = neutrality
					}
					drop_cosmetic_tag = yes
					set_cosmetic_tag = STG_MONARCHY
					break = yes
				}
				drop_cosmetic_tag = yes
			}
			handle_generic_griffon_ideas_on_govt_change = yes
			if = {
				limit = {
					original_tag = FEA
					OR = {
						has_cosmetic_tag = FEA_PvdA_old_flag
						has_cosmetic_tag = FEA_PvdA_old_flag_GRI_Puppet
					}
					OR = {
						NOT = { has_government = communism }
						AND = {
							is_subject = yes
							overlord = { has_government = communism }
						}
					}
				}
				drop_cosmetic_tag = yes
			}
			if = {
				limit = {
					original_tag = GRI
					has_government = democratic
				}
				every_country = {
					limit = {
						has_opinion_modifier = RIV_hates_the_empire
						has_government = democratic
					}
					remove_opinion_modifier = { target = ROOT modifier = RIV_hates_the_empire }
				}
			}
			if = {
				limit = {
					original_tag = EQS
					tag = event_target:solar_empire
					NOT = { has_government = fascism }
				}
				if = {
					limit = { event_target:equestria = { exists = no } }
					save_global_event_target_as = equestria
				}
				SOL = { save_global_event_target_as = solar_empire }
				load_focus_tree = equestria_sol_focus #workaround
				country_event = { id = solarempire.1018 hours = 1 }
			}
			if = {
				limit = {
					original_tag = DMT
					has_unit_leader = 708
					NOT = {	has_government = fascism }
				}
				remove_unit_leader = 708
			}
			if = {
				limit = {
					original_tag = LUS
				}
				country_event = { id = lushi.155 hours = 1 }
			}
		}
	}

	#ROOT is winner #FROM is loser
	on_peaceconference_ended = {
		effect = {
			# PUT EVERYTHING IN THE IF BELOW
			# THE bypass_on_peaceconference_ended FLAG **HAS** TO BE SET BEFORE CALLING THE white_peace COMMAND AND CLEARED AFTERWARDS
			if = {
				limit = {
					NOT = {
						has_country_flag = bypass_on_peaceconference_ended
						FROM = { has_country_flag = bypass_on_peaceconference_ended }
					}
				}
				log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] on_peaceconference_ended"

				country_event = deadempire.36
				FROM = { country_event = deadempire.36 }
				FROM = { clr_country_flag = already_capitulated }

				handle_op_paperclip = yes
				if = {
					limit = {
						original_tag = SCS 
						FROM = {
							owns_state = 3
						}
						
					}
					SCS = {
						country_event = { id = scs.776 days = 4 }
					}
				}
				if = {
					limit = {
						FROM = {
							original_tag = GFF
							is_subject_of = ROOT
						}
						GRF = { is_subject_of = ROOT }
					}
					GRF = {
						annex_country = { target = FROM }
					}
				}

				if = {
					limit = {
						tag = CHN
						FROM = {
							tag = CCN
						}
					}
					annex_country = { target = FROM }
				}

				if = {
					limit = {
						tag = CCN
						FROM = {
							tag = CHN
						}
					}
					annex_country = { target = FROM }
				}

				if = {
					limit = {
						is_eqs_civil_war_tag = yes
						NOT = {
							original_tag = EQS
							original_tag = NLR
						}
						FROM = {
							is_eqs_civil_war_tag = yes
						}
					}
					annex_country = { target = FROM }
				}

				if = {
					limit = {
						is_ai = yes
						original_tag = HLQ
						FROM = {
							OR = {
								original_tag = LNS
								original_tag = LSC
								original_tag = LSM
							}
							is_subject_of = ROOT
						}
					}
					annex_country = { target = FROM }
				}

				if = {
					limit = {
						is_ai = yes
						OR = {
							original_tag = LNS
							original_tag = LSC
							original_tag = LSM
						}
						FROM = {
							OR = {
								original_tag = LNS
								original_tag = LSC
								original_tag = LSM
								original_tag = HLQ
							}
							is_subject_of = ROOT
						}
					}
					annex_country = { target = FROM }
				}

				if = {
					limit = {
						NOT = { has_global_flag = river_federation_founded }
						OR = {
							AND = {
								is_river_fed_member = yes
								any_allied_country = {
									is_river_fed_member = yes
									is_faction_leader = yes
								}
							}
							FROM = {
								AND = {
									is_river_fed_member = yes
									any_allied_country = {
										is_river_fed_member = yes
										is_faction_leader = yes
									}
								}
							}
						}
					}
					RIV_find_new_leader = yes
				}

				if = {
					limit = {
						tag = CHN
						has_country_leader = { ruling_only = yes name = "Queen Chrysalis" }
						FROM = { original_tag = EQS }
					}
					if = {
						limit = { FROM = { is_subject_of = ROOT } }
						country_event = news.1111
						else = {
							country_event = news.1121
						}
					}
				}

				if = {
					limit = { FROM = { tag = CHN } }
					if = {
						limit = {
							OR = {
								has_government = democratic
								has_government = communism
							}
							FROM = {
								OR = {
									has_unit_leader = 600
									has_unit_leader = 602
									has_unit_leader = 606
									has_unit_leader = 607
								}
							}
						}
						hidden_effect = {
							# SOL is used as limbo
							event_target:CHN_Trimmel = { set_nationality = SOL }
							event_target:CHN_Vect = { set_nationality = SOL }
							event_target:CHN_Opertis = { set_nationality = SOL }
							event_target:CHN_Ersatz = { set_nationality = SOL }
						}
						if = {
							limit = { original_tag = STG }
							country_event = { id = news.2201 days = 1 }
						}
					}
				}

				if = {
					limit = { original_tag = EQS }
					if = {
						limit = {
							FROM = {
								is_major = yes
								NOT = {
									tag = CHN
									original_tag = OLE
								}
							}
						}
						set_country_flag = EQS_had_big_war
						country_event = { id = equestriadem.8 days = 60 }
					}
					if = {
						limit = {
							is_ai = yes
							has_government = democratic
							any_owned_state = {
								is_core_of = OLE
							}
						}
						if = {
							limit = { NOT = { country_exists = OLE } }
							release_puppet = OLE
						}
						if = {
							limit = { OLE = { OR = { is_in_faction_with = ROOT is_subject_of = ROOT } } }
							every_owned_state = {
								limit = { is_core_of = OLE }
								OLE = { transfer_state = PREV }
							}
						}
					}
					if = {
						limit = {
							FROM = { tag = CHN }
						}
						country_event = { id = news.2101 days = 1 }
						country_event = { id = equestriadem.8 days = 60 }
					}

					if = {
						limit = {
							has_global_flag = equestrian_civil_war
							FROM = { tag = NLR }
						}
						country_event = { id = news.2031 days = 1 }
						country_event = { id = equestriadem.8 days = 60 }
						if = {
							limit = { country_exists = FROM }
							annex_country = { target = FROM }
						}
					}
					if = {
						limit = {
							has_global_flag = the_crystal_war
							FROM = { original_tag = CRY }

						}
						news_event = { id = news.42 days = 1}
						clr_global_flag = the_crystal_war
						remove_opinion_modifier = { target = FROM modifier = mortal_enemies }
						FROM = { remove_opinion_modifier = { target = ROOT modifier = mortal_enemies } }
					}
				}

				if = {
					limit = {
						original_tag = CRY
						FROM = { tag = NLR }
						has_government = democratic
						has_global_flag = SOL_wartime_change
						has_country_flag = Supported_SOL
						event_target:solar_empire = { has_war = no }
						is_subject_of = event_target:solar_empire
						NOT = {
							event_target:solar_empire = { has_completed_focus = Crystal_Fair }
							has_country_flag = supported_SOL
							has_country_flag = CRY_solar_governorship
							has_country_flag = CRY_dont_give_SOL_cosmetic
						}
					}
					set_country_flag = CRY_thinking_about_staying_a_SOL_puppet
					country_event = { id = solarempire.15 days = 1 }
				}
				if = {
					limit = {
						has_global_flag = the_crystal_war
						FROM = { original_tag = EQS  }
						original_tag = CRY
					}
					news_event = { id = news.43 days = 1}
					clr_global_flag = the_crystal_war
					remove_opinion_modifier = { target = FROM modifier = mortal_enemies }
					FROM = { remove_opinion_modifier = { target = ROOT modifier = mortal_enemies } }
				}

				if = {
					limit = {
						FROM = { original_tag = EQS }
						tag = NLR
					}
					FROM = {
						kill_country_leader = yes
					}
					if = {
						limit = { country_exists = FROM }
						annex_country = { target = FROM }
					}
					country_event = { id = news.2041 days = 1 }
					country_event = { id = lunas.35 days = 1 random = 4800 }#days to hours applied
				}

				if = {
					limit = {
						is_EQS_SOL = yes
						FROM = {
							original_tag = EQS
							is_EQS_SOL = no
						}
						NOT = { has_global_flag = equestrian_civil_war_daybreaker_ended }
					}
					country_event = { id =  news.sol.31 days = 1 }
				}
				if = {
					limit = {
						FROM = {
							is_EQS_SOL = yes
						}
						original_tag = EQS
						has_government = democratic
						NOT = { has_global_flag = equestrian_civil_war_daybreaker_ended }
					}
					country_event = { id = news.sol.21 days = 1 }
				}
				
				if = {
					limit = {
						tag = HLR
						FROM = { tag = EWI }
					}
					country_event = { id = arcturian.50 days = 1 }
				}
				else_if = {
					limit = {
						FROM = { tag = HLR }
						tag = DED
						563 = { is_owned_by = NTR }
						573 = { is_owned_by = NTR }
					}
					NTR = { country_event = { id = Ntribes.906 days = 3 hours = 24 } }
				}
				else_if = {
					limit = { FROM = { tag = DED } }
					annex_country = { target = FROM }
					country_event = { id = deadempire.29 days = 1 }
				}

				if = {
					limit = {
						tag = BRF
						FROM = { tag = GRW }
					}
					country_event = { id = brodfeld.21 days = 1 }
				}
				if = {
					limit = {
						tag = GRW
						FROM = { tag = BRF }
					}
					country_event = { id = prywhen.1 days = 1 }
				}

				if = {
					limit = {
						tag = WIT
						FROM = { tag = WIT }
						owns_state = 682
						NOT = {
							has_country_flag = WIT_Capital_Change_Already_Happened
						}
					}
					country_event = { id = wittenland.33 days = 1 }
				}
				if = {
					limit = {
						tag = LSC
						OR = {
							AND = {
								NOT = { country_exists = LNS }
								FROM = { tag = LSM }
							}
							AND = {
								NOT = { country_exists = LSM }
								FROM = { tag = LNS }
							}
						}
					}
					country_event = { id = longsword.31 days = 1 }
				}
				if = {
					limit = {
						tag = LSM
						OR = {
							AND = {
								NOT = { country_exists = LNS }
								FROM = { tag = LSC }
							}
							AND = {
								NOT = { country_exists = LSC }
								FROM = { tag = LNS }
							}
						}
					}
					country_event = { id = longsword.57 days = 1 }
				}
				if = {
					limit = {
						tag = LNS
						OR = {
							AND = {
								NOT = { country_exists = LSM }
								FROM = { tag = LSC }
							}
							AND = {
								NOT = { country_exists = LSC }
								FROM = { tag = LSM }
							}
						}
					}
					country_event = { id = longsword.78 days = 1 }
				}
				if = {
					limit = {
						tag = JER
						has_completed_focus = JER_state_of_aquileia
						OR = {
							AND = {
                                OR = {
								    NOT = {country_exists = JRR }
									JRR = { is_subject_of = JER }
                                }
                                OR = {
								    NOT = { country_exists = VIN }
									VIN = { is_subject_of = JER }
                                }
                                OR = {
								    NOT = { country_exists = JFT }
									JFT = { is_subject_of = JER }
                                }
								FROM = { tag = JEB }
							}
							AND = {
                                OR = {
								    NOT = {country_exists = JEB }
									JEB = { is_subject_of = JER }
                                }
                                OR = {
								    NOT = { country_exists = VIN }
									VIN = { is_subject_of = JER }
                                }
                                OR = {
								    NOT = { country_exists = JFT }
									JFT = { is_subject_of = JER }
                                }
								FROM = { tag = JRR }
							}
							AND = {
                                OR = {
								    NOT = {country_exists = JEB }
									JEB = { is_subject_of = JER }
                                }
                                OR = {
								    NOT = { country_exists = JRR }
									JRR = { is_subject_of = JER }
                                }
                                OR = {
								    NOT = { country_exists = JFT }
									JFT = { is_subject_of = JER }
                                }
								FROM = { tag = VIN }
							}
							AND = {
                                OR = {
								    NOT = { country_exists = JEB }
									JEB = { is_subject_of = JER }
                                }
                                OR = {
								    NOT = { country_exists = JRR }
									JRR = { is_subject_of = JER }
                                }
                                OR = {
								    NOT = { country_exists = VIN }
									VIN = { is_subject_of = JER }
                                }
								FROM = { tag = JFT }
							}
						}
					}
					country_event = { id = aquileia.48 days = 1 }
				}

				if = {
					limit = {
						has_opinion_modifier = NIM_atrocities
						FROM = { tag = NIM }
					}
					FROM = {
						every_other_country = {
							remove_opinion_modifier = { target = FROM modifier = NIM_atrocities }
						}
					}
				}

				if = {
					limit = {
						OR = {
							AND = {
								tag = SRS
								FROM = { tag = NTR }
							}
							AND = {
								has_global_flag = SRS_has_triggered_civilwar_in_NTR
								original_tag = NTR
								FROM = { tag = NTR }
							}
						}
					}
					SRS = { country_event = { id = socrep_grif.83 hours = 12 } }
				}
				if = {
					limit = {
						has_country_flag = SRS_has_triggered_civilwar_in_themselves
						tag = SRS
						FROM = { original_tag = SRS }
					}
					SRS = { country_event = { id = socrep_grif.91 hours = 2 } }
				}

				# Delete tribal templates
				if = {
					limit = {
						OR = {
							tag = CES
							tag = JUN
							tag = NMS
						}
						FROM = {
							OR = {
								tag = CES
								tag = JUN
								tag = NMS
							}
						}
					}
					# more triggers in event
					country_event = { id = civwar.24 days = 1 random = 48 }
				}
				if = {
					limit = {
						tag = NTR
					}
					country_event = Ntribes.999
					if = {
						limit = {
							has_war = no
						}
						if = {
							limit = {
								has_decision = NTR_call_up_commune_militias
							}
							remove_decision = NTR_call_up_commune_militias
							delete_unit_template_and_units = { division_template = "Commune Militia" }
						}
						else_if = {
							limit = {
								has_decision = NTR_call_up_commune_militias_full
							}
							remove_decision = NTR_call_up_commune_militias_full
							delete_unit_template_and_units = { division_template = "Commune Militia" }
						}
						if = {
							limit = {
								all_of_scopes = {
									array = SRS.core_states
									is_owned_by = ROOT
								}
							}
							if = {
								limit = {
									has_country_flag = NTR_SRS_reclaiming_the_west_beginning_idea_not_completed
								}
								country_event = { id = Ntribes.198 days = 80 random = 300 }
							}
							else_if = {
								limit = {
									NOT = {
										any_of_scopes = {
											array = SRS.core_states
											is_core_of = ROOT
										}
									}
								}
								add_ideas = NTR_SRS_reclaiming_the_west_beginning_idea
							}
						}
						if = {
							limit = {
								has_country_flag = NTR_up_to_pre_industrial_not_completed_flag
								check_variable = { EaW_society_development_var < 4 }
								check_variable = {
									var = EaW_society_development_var
									compare = greater_than_or_equals
									value = 3
								}
							}
							if = {
								limit = { has_government = democratic }
								if = {
									limit = {
										has_country_flag = NTR_VED_up_to_pre_industrial_helper
										VED = {
											exists = yes
											is_subject = no
											has_government = democratic
											NOT = {
												has_or_is_justifying_wargoal_against_ROOT = yes
												ROOT = {
													OR = {
														has_wargoal_against = PREV
														is_justifying_wargoal_against = PREV
													}
												}
											}
										}
									}
									country_event = { id = Ntribes.99 days = 70 random = 336 }
								}
								else = {
									country_event = { id = Ntribes.98 days = 77 random = 336 }
								}
							}
							else_if = {
								limit = { has_government = communism }
								if = {
									limit = {
										is_subject = no
										SRS = {
											exists = yes
											is_subject = no
											has_government = communism
											NOT = {
												has_or_is_justifying_wargoal_against_ROOT = yes
												ROOT = {
													OR = {
														has_wargoal_against = PREV
														is_justifying_wargoal_against = PREV
													}
												}
											}
										}
									}
									country_event = { id = Ntribes.97 days = 30 random = 120 }
								}
								else = {
									country_event = { id = Ntribes.96 days = 40 random = 160 }
								}
							}
							else = {
								# stagnation - quite normal for tribes
							}
						}
						if = {
							limit = {
								has_country_flag = NTR_united_northern_front_flag
								has_civil_war = no
							}
							country_event = { id = Ntribes.533 days = 3 random = 24 }
						}
					}
					if = {
						limit = {
							FROM = {
								tag = FAT
								is_subject_of = ROOT
							}
						}
						# load future commie subject FAT tree #???
					}
					else_if = {
						limit = {
							FROM = { tag = VED }
							has_country_leader = { name = "Libor White" ruling_only = yes }
						}
						add_stability = -0.2
					}
					if = {
						limit = {
							FROM = { has_idea = Griffons_war_with_the_northern_menace_idea_idea }
						}
						FROM = { remove_ideas = Griffons_war_with_the_northern_menace_idea_idea }
					}
				}
				else_if = {
					limit = {
						FROM = { tag = NTR }
					}
					FROM = {
						country_event = Ntribes.999
						if = {
							limit = {
								is_subject_of = SRS
								SRS = { has_government = communism }
							}
							# nothing right now #???
						}
						if = {
							limit = {
								has_country_flag = NTR_neutrality_rules
								OR = {
									is_subject = yes
									is_in_faction = yes
									NOT = { has_government = neutrality }
								}
							}
							if = {
								limit = {
									OR = {
										has_game_rule = {
											rule = allow_guarantees
											option = ALWAYS_FREE
										}
										has_game_rule = {
											rule = allow_guarantees
											option = LIMITED
										}
									}
								}
								set_rule = { can_guarantee_other_ideologies = yes }
							}
							if = {
								limit = {
									NOT = {
										has_game_rule = {
											rule = allow_party_boosting
											option = BLOCKED
										}
									}
								}
								set_rule = { can_boost_other_ideologies = yes }
							}
							if = {
								limit = {
									NOT = {
										has_game_rule = {
											rule = allow_volunteers
											option = BLOCKED
										}
									}
								}
								set_rule = { can_send_volunteers = yes }
							}
							if = {
								limit = {
									NOT = { has_rule = can_create_factions }
								}
								set_rule = { can_create_factions = yes }
							}
							clr_country_flag = NTR_neutrality_rules
						}
						if = {
							limit = {
								has_country_flag = NTR_traditionalism_rules
								OR = {
									is_subject = yes
									is_in_faction = yes
									NOT = { has_government = neutrality }
								}
							}
							set_rule = {
								can_not_declare_war = no
								can_force_government = yes
								can_puppet = yes
							}
							if = {
								limit = {
									NOT = {
										has_game_rule = {
											rule = allow_party_boosting
											option = ALWAYS_FREE
										}
									}
								}
								set_rule = { can_boost_other_ideologies = yes }
							}
							clr_country_flag = NTR_traditionalism_rules
						}
						if = {
							limit = {
								OR = {
									is_subject = yes
									is_in_faction = yes
									NOT = { has_country_leader = { name = "Libor White" ruling_only = yes } }
								}
							}
							every_other_country = {
								limit = { has_tech = griffon_race }
								remove_opinion_modifier = {
									target = FROM
									modifier = NTR_enemy_of_griffonkind
								}
								remove_opinion_modifier = {
									target = FROM
									modifier = CHN_Embargo
								}
								FROM = {
									remove_opinion_modifier = {
										target = PREV
										modifier = NTR_enemy_of_griffonkind
									}
									remove_opinion_modifier = {
										target = PREV
										modifier = CHN_Embargo
									}
								}
							}
							every_other_country = {
								limit = {
									NOT = { has_tech = griffon_race }
								}
								remove_opinion_modifier = {
									target = FROM
									modifier = distrustful_relations
								}
								FROM = {
									remove_opinion_modifier = {
										target = PREV
										modifier = distrustful_relations
									}
								}
							}
						}
					}
					if = {
						limit = {
							has_idea = Griffons_war_with_the_northern_menace_idea_idea
						}
						remove_ideas = Griffons_war_with_the_northern_menace_idea_idea
					}
				}

				if = {
					limit = {
						has_global_flag = equestrian_civil_war
						NOT = { has_global_flag = equestrian_civil_war_ended }
						FROM = {
							OR = {
								original_tag = EQS
								tag = NLR
							}
						}
					}
					set_global_flag = equestrian_civil_war_ended
				}

				if = {
					limit = {
						NOT = { has_global_flag = prywhen_civil_war_is_over }
						FROM = {
							OR = {
								tag = GRW
								tag = BRF
							}
						}
					}
					set_global_flag = prywhen_civil_war_is_over
				}

				if = {
					limit = {
						has_global_flag = the_war
						NOT = { has_global_flag = the_war_ended }
						FROM = { tag = CHN }
					}
					set_global_flag = the_war_ended
				}

				# if a country is an AI puppet with only one state and surrounded by another country, annex them to reduce bordergore
				FROM = { country_event = { id = utility.10 hours = 1 } }
			}
		}
	}

	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_state_control_changed = {
		effect = {
			log = "[GetDateText]: ROOT: [Root.GetName] FROM: [From.GetName] FROM.FROM: [From.From.GetName] on_state_control_changed"

			if = {
				limit = {
					FROM = { has_country_flag = SM_GUI_unlocked_flag }
				}

				if = {
					limit = {
						FROM = { has_country_flag = RS_GUI_unlocked_flag }
					}

					if = {
						limit = {
							FROM.FROM = { check_variable = { SM_state_amount_of_complexes > 0 } }
						}

						FROM.FROM = {
							remove_dynamic_modifier = { modifier = SM_state_complexes_modifier }

							if = {
								limit = {
									check_variable = { SM_state_monthly_population_var = SM_dynamic_state_monthly_population_var }
								}

								clear_variable = SM_state_monthly_population_var
							}
							else = {
								subtract_from_variable = { SM_state_monthly_population_var = SM_dynamic_state_monthly_population_var }
							}

							clear_variable = SM_dynamic_state_monthly_population_var
							clear_variable = SM_local_resources_var
						}

						if = {
							limit = {
								check_variable = { FROM.FROM.SM_state_amount_of_complexes = FROM.SM_country_amount_of_complexes }
							}

							FROM = {
								remove_dynamic_modifier = { modifier = SM_country_complexes_modifier }
								clear_variable = SM_negative_industrial_factory_donations_var
								set_variable = { SM_country_amount_of_complexes = 0 }
								set_variable = { RS_daily_industrial_savings_var = 0 }
							}
						}
						else = {
							add_to_variable = { FROM.SM_negative_industrial_factory_donations_var = FROM.FROM.SM_state_amount_of_complexes }

							divide_variable = { FROM.RS_daily_industrial_savings_var = FROM.SM_country_amount_of_complexes }
							subtract_from_variable = { FROM.SM_country_amount_of_complexes = FROM.FROM.SM_state_amount_of_complexes }
							multiply_variable = { FROM.RS_daily_industrial_savings_var = FROM.SM_country_amount_of_complexes }
						}

						clear_variable = FROM.FROM.SM_state_amount_of_complexes
					}

					if = {
						limit = {
							FROM.FROM = { check_variable = { SM_state_amount_of_factories > 0 } }
						}

						if = {
							limit = {
								check_variable = { FROM.FROM.SM_state_amount_of_factories = FROM.SM_country_amount_of_factories }
							}

							FROM = {
								remove_dynamic_modifier = { modifier = SM_country_factories_modifier }
								clear_variable = SM_negative_military_factory_donations_var
								clear_variable = SM_experience_gain_army_var

								if = {
									limit = { has_variable = SM_experience_gain_air_var }
									clear_variable = SM_experience_gain_air_var
									clear_variable = RS_daily_air_savings_var
								}
								if = {
									limit = { has_variable = SM_weekly_manpower_var }
									clear_variable = SM_weekly_manpower_var
								}

								set_variable = { SM_country_amount_of_factories = 0 }
								set_variable = { RS_daily_army_savings_var = 0 }
							}
						}
						else = {
							add_to_variable = { FROM.SM_negative_military_factory_donations_var = FROM.FROM.SM_state_amount_of_factories }

							if = {
								limit = {
									FROM = { has_variable = SM_experience_gain_air_var }
								}

								if = {
									limit = {
										FROM = { has_variable = SM_weekly_manpower_var }
									}

									divide_variable = { FROM.SM_weekly_manpower_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.SM_experience_gain_air_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.RS_daily_army_savings_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.RS_daily_air_savings_var = FROM.SM_country_amount_of_factories }
									subtract_from_variable = { FROM.SM_country_amount_of_factories = FROM.FROM.SM_state_amount_of_factories }
									multiply_variable = { FROM.SM_weekly_manpower_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.SM_experience_gain_air_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.RS_daily_army_savings_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.RS_daily_air_savings_var = FROM.SM_country_amount_of_factories }
								}
								else = {
									divide_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.SM_experience_gain_air_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.RS_daily_army_savings_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.RS_daily_air_savings_var = FROM.SM_country_amount_of_factories }
									subtract_from_variable = { FROM.SM_country_amount_of_factories = FROM.FROM.SM_state_amount_of_factories }
									multiply_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.SM_experience_gain_air_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.RS_daily_army_savings_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.RS_daily_air_savings_var = FROM.SM_country_amount_of_factories }
								}
							}
							else = {
								if = {
									limit = {
										FROM = { has_variable = SM_weekly_manpower_var }
									}

									divide_variable = { FROM.SM_weekly_manpower_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.RS_daily_army_savings_var = FROM.SM_country_amount_of_factories }
									subtract_from_variable = { FROM.SM_country_amount_of_factories = FROM.FROM.SM_state_amount_of_factories }
									multiply_variable = { FROM.SM_weekly_manpower_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.RS_daily_army_savings_var = FROM.SM_country_amount_of_factories }
								}
								else = {
									divide_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.RS_daily_army_savings_var = FROM.SM_country_amount_of_factories }
									subtract_from_variable = { FROM.SM_country_amount_of_factories = FROM.FROM.SM_state_amount_of_factories }
									multiply_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.RS_daily_army_savings_var = FROM.SM_country_amount_of_factories }
								}
							}
						}

						clear_variable = FROM.FROM.SM_state_amount_of_factories
					}

					if = {
						limit = {
							FROM.FROM = { check_variable = { SM_state_amount_of_dockyards > 0 } }
						}

						if = {
							limit = {
								FROM = { has_completed_focus = NTR_northern_free_trade_area }
							}

							FROM = { SM_calculate_resources_objects_if_needed = yes }

							if = {
								limit = {
									check_variable = {
										var = FROM.FROM.modifier@local_resources
										compare = not_equals
										value = 0
									}
								}

								FROM.FROM = {
									SM_calculate_resources_updater_with_local_modifier = yes

									for_each_loop = {
										array = SM_state_bonus_resources

										if = {
											limit = { check_variable = { v = 0 } }
											add_resource = { type = crystals amount = -2 }
											add_to_variable = { FROM.SM_needed_resources^0 = SM_needed_resources_local_updater_temp_var }
										}
										else_if = {
											limit = { check_variable = { v = 1 } }
											add_resource = { type = chromium amount = -2 }
											add_to_variable = { FROM.SM_needed_resources^1 = SM_needed_resources_local_updater_temp_var }
										}
										else_if = {
											limit = { check_variable = { v = 2 } }
											add_resource = { type = rubber amount = -2 }
											add_to_variable = { FROM.SM_needed_resources^2 = SM_needed_resources_local_updater_temp_var }
										}
										else_if = {
											limit = { check_variable = { v = 3 } }
											add_resource = { type = aluminium amount = -2 }
											add_to_variable = { FROM.SM_needed_resources^3 = SM_needed_resources_local_updater_temp_var }
										}
										else_if = {
											limit = { check_variable = { v = 4 } }
											add_resource = { type = tungsten amount = -2 }
											add_to_variable = { FROM.SM_needed_resources^4 = SM_needed_resources_local_updater_temp_var }
										}
										else = {
											add_resource = { type = steel amount = -2 }
											add_to_variable = { FROM.SM_needed_resources^5 = SM_needed_resources_local_updater_temp_var }
										}
									}
								}
							}
							else = {
								for_each_loop = {
									array = FROM.FROM.SM_state_bonus_resources

									if = {
										limit = { check_variable = { v = 0 } }
										add_resource = { type = crystals amount = -2 }
										add_to_variable = { FROM.SM_needed_resources^0 = FROM.SM_needed_resources_updater_var }
									}
									else_if = {
										limit = { check_variable = { v = 1 } }
										add_resource = { type = chromium amount = -2 }
										add_to_variable = { FROM.SM_needed_resources^1 = FROM.SM_needed_resources_updater_var }
									}
									else_if = {
										limit = { check_variable = { v = 2 } }
										add_resource = { type = rubber amount = -2 }
										add_to_variable = { FROM.SM_needed_resources^2 = FROM.SM_needed_resources_updater_var }
									}
									else_if = {
										limit = { check_variable = { v = 3 } }
										add_resource = { type = aluminium amount = -2 }
										add_to_variable = { FROM.SM_needed_resources^3 = FROM.SM_needed_resources_updater_var }
									}
									else_if = {
										limit = { check_variable = { v = 4 } }
										add_resource = { type = tungsten amount = -2 }
										add_to_variable = { FROM.SM_needed_resources^4 = FROM.SM_needed_resources_updater_var }
									}
									else = {
										add_resource = { type = steel amount = -2 }
										add_to_variable = { FROM.SM_needed_resources^5 = FROM.SM_needed_resources_updater_var }
									}
								}
							}

							clear_array = FROM.FROM.SM_state_bonus_resources
						}

						if = {
							limit = {
								check_variable = { FROM.FROM.SM_state_amount_of_dockyards = FROM.SM_country_amount_of_dockyards }
							}

							FROM = {
								remove_dynamic_modifier = { modifier = SM_country_dockyards_modifier }
								clear_variable = SM_negative_dockyard_donations_var
								clear_variable = SM_experience_gain_navy_var
								set_variable = { RS_daily_naval_savings_var = 0 }
								set_variable = { SM_country_amount_of_dockyards = 0 }
							}
						}
						else = {
							add_to_variable = { FROM.SM_negative_dockyard_donations_var = FROM.FROM.SM_state_amount_of_dockyards }

							divide_variable = { FROM.SM_experience_gain_navy_var = FROM.SM_country_amount_of_dockyards }
							divide_variable = { FROM.RS_daily_naval_savings_var = FROM.SM_country_amount_of_dockyards }
							subtract_from_variable = { FROM.SM_country_amount_of_dockyards = FROM.FROM.SM_state_amount_of_dockyards }
							multiply_variable = { FROM.SM_experience_gain_navy_var = FROM.SM_country_amount_of_dockyards }
							multiply_variable = { FROM.RS_daily_naval_savings_var = FROM.SM_country_amount_of_dockyards }
						}

						clear_variable = FROM.FROM.SM_state_amount_of_dockyards
					}
				}
				else = {
					if = {
						limit = {
							FROM.FROM = { check_variable = { SM_state_amount_of_complexes > 0 } }
						}

						FROM.FROM = {
							remove_dynamic_modifier = { modifier = SM_state_complexes_modifier }

							if = {
								limit = {
									check_variable = { SM_state_monthly_population_var = SM_dynamic_state_monthly_population_var }
								}

								clear_variable = SM_state_monthly_population_var
							}
							else = {
								subtract_from_variable = { SM_state_monthly_population_var = SM_dynamic_state_monthly_population_var }
							}

							clear_variable = SM_dynamic_state_monthly_population_var
							clear_variable = SM_local_resources_var
						}

						if = {
							limit = {
								check_variable = { FROM.FROM.SM_state_amount_of_complexes = FROM.SM_country_amount_of_complexes }
							}

							FROM = {
								remove_dynamic_modifier = { modifier = SM_country_complexes_modifier }
								clear_variable = SM_negative_industrial_factory_donations_var
								set_variable = { SM_country_amount_of_complexes = 0 }
							}
						}
						else = {
							add_to_variable = { FROM.SM_negative_industrial_factory_donations_var = FROM.FROM.SM_state_amount_of_complexes }
							subtract_from_variable = { FROM.SM_country_amount_of_complexes = FROM.FROM.SM_state_amount_of_complexes }
						}

						clear_variable = FROM.FROM.SM_state_amount_of_complexes
					}

					if = {
						limit = {
							FROM.FROM = { check_variable = { SM_state_amount_of_factories > 0 } }
						}

						if = {
							limit = {
								check_variable = { FROM.FROM.SM_state_amount_of_factories = FROM.SM_country_amount_of_factories }
							}

							FROM = {
								remove_dynamic_modifier = { modifier = SM_country_factories_modifier }
								clear_variable = SM_negative_military_factory_donations_var
								clear_variable = SM_experience_gain_army_var

								if = {
									limit = { has_variable = SM_experience_gain_air_var }
									clear_variable = SM_experience_gain_air_var
								}
								if = {
									limit = { has_variable = SM_weekly_manpower_var }
									clear_variable = SM_weekly_manpower_var
								}

								set_variable = { SM_country_amount_of_factories = 0 }
							}
						}
						else = {
							add_to_variable = { FROM.SM_negative_military_factory_donations_var = FROM.FROM.SM_state_amount_of_factories }

							if = {
								limit = {
									FROM = { has_variable = SM_experience_gain_air_var }
								}

								if = {
									limit = {
										FROM = { has_variable = SM_weekly_manpower_var }
									}
									
									divide_variable = { FROM.SM_weekly_manpower_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.SM_experience_gain_air_var = FROM.SM_country_amount_of_factories }
									subtract_from_variable = { FROM.SM_country_amount_of_factories = FROM.FROM.SM_state_amount_of_factories }
									multiply_variable = { FROM.SM_weekly_manpower_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.SM_experience_gain_air_var = FROM.SM_country_amount_of_factories }
								}
								else = {
									divide_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.SM_experience_gain_air_var = FROM.SM_country_amount_of_factories }
									subtract_from_variable = { FROM.SM_country_amount_of_factories = FROM.FROM.SM_state_amount_of_factories }
									multiply_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.SM_experience_gain_air_var = FROM.SM_country_amount_of_factories }
								}
							}
							else = {
								if = {
									limit = {
										FROM = { has_variable = SM_weekly_manpower_var }
									}
									
									divide_variable = { FROM.SM_weekly_manpower_var = FROM.SM_country_amount_of_factories }
									divide_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									subtract_from_variable = { FROM.SM_country_amount_of_factories = FROM.FROM.SM_state_amount_of_factories }
									multiply_variable = { FROM.SM_weekly_manpower_var = FROM.SM_country_amount_of_factories }
									multiply_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
								}
								else = {
									divide_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
									subtract_from_variable = { FROM.SM_country_amount_of_factories = FROM.FROM.SM_state_amount_of_factories }
									multiply_variable = { FROM.SM_experience_gain_army_var = FROM.SM_country_amount_of_factories }
								}
							}
						}

						clear_variable = FROM.FROM.SM_state_amount_of_factories
					}

					if = {
						limit = {
							FROM.FROM = { check_variable = { SM_state_amount_of_dockyards > 0 } }
						}

						if = {
							limit = {
								FROM = { has_completed_focus = NTR_northern_free_trade_area }
							}

							FROM = { SM_calculate_resources_objects_if_needed = yes }

							if = {
								limit = {
									check_variable = {
										var = FROM.FROM.modifier@local_resources
										compare = not_equals
										value = 0
									}
								}

								FROM.FROM = {
									SM_calculate_resources_updater_with_local_modifier = yes

									for_each_loop = {
										array = SM_state_bonus_resources

										if = {
											limit = { check_variable = { v = 0 } }
											add_resource = { type = crystals amount = -2 }
											add_to_variable = { FROM.SM_needed_resources^0 = SM_needed_resources_local_updater_temp_var }
										}
										else_if = {
											limit = { check_variable = { v = 1 } }
											add_resource = { type = chromium amount = -2 }
											add_to_variable = { FROM.SM_needed_resources^1 = SM_needed_resources_local_updater_temp_var }
										}
										else_if = {
											limit = { check_variable = { v = 2 } }
											add_resource = { type = rubber amount = -2 }
											add_to_variable = { FROM.SM_needed_resources^2 = SM_needed_resources_local_updater_temp_var }
										}
										else_if = {
											limit = { check_variable = { v = 3 } }
											add_resource = { type = aluminium amount = -2 }
											add_to_variable = { FROM.SM_needed_resources^3 = SM_needed_resources_local_updater_temp_var }
										}
										else_if = {
											limit = { check_variable = { v = 4 } }
											add_resource = { type = tungsten amount = -2 }
											add_to_variable = { FROM.SM_needed_resources^4 = SM_needed_resources_local_updater_temp_var }
										}
										else = {
											add_resource = { type = steel amount = -2 }
											add_to_variable = { FROM.SM_needed_resources^5 = SM_needed_resources_local_updater_temp_var }
										}
									}
								}
							}
							else = {
								for_each_loop = {
									array = FROM.FROM.SM_state_bonus_resources

									if = {
										limit = { check_variable = { v = 0 } }
										add_resource = { type = crystals amount = -2 }
										add_to_variable = { FROM.SM_needed_resources^0 = FROM.SM_needed_resources_updater_var }
									}
									else_if = {
										limit = { check_variable = { v = 1 } }
										add_resource = { type = chromium amount = -2 }
										add_to_variable = { FROM.SM_needed_resources^1 = FROM.SM_needed_resources_updater_var }
									}
									else_if = {
										limit = { check_variable = { v = 2 } }
										add_resource = { type = rubber amount = -2 }
										add_to_variable = { FROM.SM_needed_resources^2 = FROM.SM_needed_resources_updater_var }
									}
									else_if = {
										limit = { check_variable = { v = 3 } }
										add_resource = { type = aluminium amount = -2 }
										add_to_variable = { FROM.SM_needed_resources^3 = FROM.SM_needed_resources_updater_var }
									}
									else_if = {
										limit = { check_variable = { v = 4 } }
										add_resource = { type = tungsten amount = -2 }
										add_to_variable = { FROM.SM_needed_resources^4 = FROM.SM_needed_resources_updater_var }
									}
									else = {
										add_resource = { type = steel amount = -2 }
										add_to_variable = { FROM.SM_needed_resources^5 = FROM.SM_needed_resources_updater_var }
									}
								}
							}

							clear_array = FROM.FROM.SM_state_bonus_resources
						}

						if = {
							limit = {
								check_variable = { FROM.FROM.SM_state_amount_of_dockyards = FROM.SM_country_amount_of_dockyards }
							}

							FROM = {
								remove_dynamic_modifier = { modifier = SM_country_dockyards_modifier }
								clear_variable = SM_negative_dockyard_donations_var
								set_variable = { SM_country_amount_of_dockyards = 0 }
								set_variable = { SM_experience_gain_navy_var = 0 }
							}
						}
						else = {
							add_to_variable = { FROM.SM_negative_dockyard_donations_var = FROM.FROM.SM_state_amount_of_dockyards }

							divide_variable = { FROM.SM_experience_gain_navy_var = FROM.SM_country_amount_of_dockyards }
							subtract_from_variable = { FROM.SM_country_amount_of_dockyards = FROM.FROM.SM_state_amount_of_dockyards }
							multiply_variable = { FROM.SM_experience_gain_navy_var = FROM.SM_country_amount_of_dockyards }
						}

						clear_variable = FROM.FROM.SM_state_amount_of_dockyards
					}
				}
			}

			if = {
				limit = {
					has_global_flag = EaW_winter_system_on_global_flag
				}

				if = {
					limit = {
						FROM.FROM = { has_variable = EaW_state_winter_debuffer_var }
					}

					if = {
						limit = {
							check_variable = { global.month = 10 }
						}

						if = {
							limit = {
								FROM = { has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier } }
							}

							if = {
								limit = {
									FROM.FROM = { check_variable = { EaW_state_winter_grade_var > 3 } }
								}

								adjust_EaW_controlled_states_with_winter_arrays_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
									}

									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_October = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									FROM.FROM = { calculate_EaW_state_winter_debuffer_in_October = yes }

									EaW_winter_dynamic_modifier_on = yes
								}
							}
							else_if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
								}

								adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes
							}

							FROM = {
								remove_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }

								if = {
									limit = {
										any_of_scopes = {
											array = EaW_controlled_states_with_winter

											check_variable = { EaW_state_winter_grade_var > 3 }
										}
									}

									set_variable = { EaW_country_winter_dynamic_modifier_var = 0 }

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_October = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									clear_EaW_winter_dynamic_modifier_data = yes
								}
							}
						}
						else_if = {
							limit = {
								has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
							}

							adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 11 }
						}

						if = {
							limit = {
								FROM = { has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier } }
							}

							if = {
								limit = {
									FROM.FROM = { check_variable = { EaW_state_winter_grade_var > 2 } }
								}

								adjust_EaW_controlled_states_with_winter_arrays_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
									}

									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_November = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									FROM.FROM = { calculate_EaW_state_winter_debuffer_in_November = yes }

									EaW_winter_dynamic_modifier_on = yes
								}

								if = {
									limit = {
										FROM.FROM = { is_coastal = yes }
									}

									if = {
										limit = {
											has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
										}

										if = {
											limit = {
												FROM.FROM = {
													is_in_home_area = yes

													check_variable = { EaW_state_winter_grade_var = 3 }
												}
											}

											remove_EaW_frozen_seas_effects = yes
										}
									}

									if = {
										limit = {
											FROM = {
												check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.75 }

												NOT = {
													has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

													any_of_scopes = {
														array = controlled_states

														is_coastal = yes
														is_in_home_area = yes

														check_variable = { EaW_state_winter_grade_var < 4 }
													}
												}
											}
										}

										FROM = { add_EaW_frozen_seas_dynamic_effects = yes }
									}
								}
							}
							else_if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
								}

								adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

										FROM.FROM = {
											is_coastal = yes
											is_in_home_area = yes
										}
									}

									remove_EaW_frozen_seas_effects = yes
								}
							}

							FROM = {
								remove_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }

								if = {
									limit = {
										any_of_scopes = {
											array = EaW_controlled_states_with_winter

											check_variable = { EaW_state_winter_grade_var > 2 }
										}
									}

									set_variable = { EaW_country_winter_dynamic_modifier_var = 0 }

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_November = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									clear_EaW_winter_dynamic_modifier_data = yes
								}
							}
						}
						else_if = {
							limit = {
								has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
							}

							adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes

							if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

									FROM.FROM = {
										is_coastal = yes
										is_in_home_area = yes
									}
								}

								remove_EaW_frozen_seas_effects = yes
							}
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 12 }
						}

						if = {
							limit = {
								FROM = { has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier } }
							}

							if = {
								limit = {
									FROM.FROM = { check_variable = { EaW_state_winter_grade_var > 1 } }
								}

								adjust_EaW_controlled_states_with_winter_arrays_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
									}

									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_December = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									FROM.FROM = { calculate_EaW_state_winter_debuffer_in_December = yes }

									EaW_winter_dynamic_modifier_on = yes
								}

								if = {
									limit = {
										FROM.FROM = { is_coastal = yes }
									}

									if = {
										limit = {
											has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

											FROM.FROM = { is_in_home_area = yes }
										}

										if = {
											limit = {
												if = {
													limit = {
														check_variable = { FROM.FROM.EaW_state_winter_grade_var = 3 }
													}

													check_variable = {
														var = NTR_icebreakers_convoys_reversed_ratio_var
														compare = less_than_or_equals
														value = 0.75
													}
												}
												else = {
													check_variable = { FROM.FROM.EaW_state_winter_grade_var = 2 }
												}
											}

											remove_EaW_frozen_seas_effects = yes
										}
									}

									if = {
										limit = {
											FROM = {
												check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.5 }

												NOT = { has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier } }

												if = {
													limit = {
														check_variable = {
															var = NTR_icebreakers_convoys_reversed_ratio_var
															compare = less_than_or_equals
															value = 0.75
														}
													}

													NOT = {
														any_of_scopes = {
															array = controlled_states

															is_coastal = yes
															is_in_home_area = yes

															check_variable = { EaW_state_winter_grade_var < 4 }
														}
													}
												}
											}
										}

										FROM = { add_EaW_frozen_seas_dynamic_effects = yes }
									}
								}
							}
							else_if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
								}

								adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

										FROM.FROM = {
											is_coastal = yes
											is_in_home_area = yes
										}
									}

									remove_EaW_frozen_seas_effects = yes
								}
							}

							FROM = {
								remove_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }

								if = {
									limit = {
										any_of_scopes = {
											array = EaW_controlled_states_with_winter

											check_variable = { EaW_state_winter_grade_var > 2 }
										}
									}

									set_variable = { EaW_country_winter_dynamic_modifier_var = 0 }

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_December = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									clear_EaW_winter_dynamic_modifier_data = yes
								}
							}
						}
						else_if = {
							limit = {
								has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
							}

							adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes

							if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

									FROM.FROM = {
										is_coastal = yes
										is_in_home_area = yes
									}
								}

								remove_EaW_frozen_seas_effects = yes
							}
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 1 }
						}

						if = {
							limit = {
								FROM = { has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier } }
							}

							if = {
								limit = {
									FROM.FROM = { has_variable = EaW_state_winter_grade_var }
								}

								adjust_EaW_controlled_states_with_winter_arrays_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
									}

									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										add_to_variable = { ROOT.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_debuffer_var }
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									add_to_variable = { EaW_country_winter_dynamic_modifier_var = FROM.FROM.EaW_state_winter_debuffer_var }

									EaW_winter_dynamic_modifier_on = yes
								}

								if = {
									limit = {
										FROM.FROM = { is_coastal = yes }
									}

									if = {
										limit = {
											has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
										}

										if = {
											limit = {
												if = {
													limit = {
														check_variable = { FROM.FROM.EaW_state_winter_grade_var = 3 }
													}

													check_variable = {
														var = NTR_icebreakers_convoys_reversed_ratio_var
														compare = less_than_or_equals
														value = 0.5
													}
												}
												else_if = {
													limit = {
														check_variable = { FROM.FROM.EaW_state_winter_grade_var = 2 }
													}

													check_variable = {
														var = NTR_icebreakers_convoys_reversed_ratio_var
														compare = less_than_or_equals
														value = 0.75
													}
												}
												else = {
													check_variable = { FROM.FROM.EaW_state_winter_grade_var = 1 }
												}
											}

											remove_EaW_frozen_seas_effects = yes
										}
									}

									if = {
										limit = {
											FROM = {
												check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.2 }

												NOT = { has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier } }

												if = {
													limit = {
														check_variable = {
															var = NTR_icebreakers_convoys_reversed_ratio_var
															compare = less_than_or_equals
															value = 0.5
														}
													}

													NOT = {
														any_of_scopes = {
															array = controlled_states

															is_coastal = yes
															is_in_home_area = yes

															check_variable = { EaW_state_winter_grade_var < 4 }
														}
													}
												}
												else_if = {
													limit = {
														check_variable = {
															var = NTR_icebreakers_convoys_reversed_ratio_var
															compare = less_than_or_equals
															value = 0.75
														}
													}

													NOT = {
														any_of_scopes = {
															array = controlled_states

															is_coastal = yes
															is_in_home_area = yes

															check_variable = { EaW_state_winter_grade_var < 3 }
														}
													}
												}
											}
										}

										FROM = { add_EaW_frozen_seas_dynamic_effects = yes }
									}
								}
							}
							else_if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
								}

								adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

										FROM.FROM = {
											is_coastal = yes
											is_in_home_area = yes
										}
									}

									remove_EaW_frozen_seas_effects = yes
								}
							}

							FROM = {
								remove_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }

								if = {
									limit = {
										check_variable = { EaW_controlled_states_with_winter^num > 0 }
									}

									set_variable = { EaW_country_winter_dynamic_modifier_var = 0 }

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										add_to_variable = { PREV.EaW_country_winter_dynamic_modifier_var = EaW_state_winter_debuffer_var }
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									clear_EaW_winter_dynamic_modifier_data = yes
								}
							}
						}
						else_if = {
							limit = {
								has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
							}

							adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes

							if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

									FROM.FROM = {
										is_coastal = yes
										is_in_home_area = yes
									}
								}

								remove_EaW_frozen_seas_effects = yes
							}
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 2 }
						}

						if = {
							limit = {
								FROM = { has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier } }
							}

							if = {
								limit = {
									FROM.FROM = { check_variable = { EaW_state_winter_grade_var > 1 } }
								}

								adjust_EaW_controlled_states_with_winter_arrays_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
									}

									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_February = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									FROM.FROM = { calculate_EaW_state_winter_debuffer_in_February = yes }

									EaW_winter_dynamic_modifier_on = yes
								}

								if = {
									limit = {
										FROM.FROM = { is_coastal = yes }
									}

									if = {
										limit = {
											has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

											FROM.FROM = { is_in_home_area = yes }
										}

										if = {
											limit = {
												if = {
													limit = {
														check_variable = { FROM.FROM.EaW_state_winter_grade_var = 3 }
													}

													check_variable = {
														var = NTR_icebreakers_convoys_reversed_ratio_var
														compare = less_than_or_equals
														value = 0.75
													}
												}
												else = {
													check_variable = { FROM.FROM.EaW_state_winter_grade_var = 2 }
												}
											}

											remove_EaW_frozen_seas_effects = yes
										}
									}

									if = {
										limit = {
											FROM = {
												check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.4 }

												NOT = { has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier } }

												if = {
													limit = {
														check_variable = {
															var = NTR_icebreakers_convoys_reversed_ratio_var
															compare = less_than_or_equals
															value = 0.75
														}
													}

													NOT = {
														any_of_scopes = {
															array = controlled_states

															is_coastal = yes
															is_in_home_area = yes

															check_variable = { EaW_state_winter_grade_var < 4 }
														}
													}
												}
											}
										}

										FROM = { add_EaW_frozen_seas_dynamic_effects = yes }
									}
								}
							}
							else_if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
								}

								adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

										FROM.FROM = {
											is_coastal = yes
											is_in_home_area = yes
										}
									}

									remove_EaW_frozen_seas_effects = yes
								}
							}

							FROM = {
								remove_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }

								if = {
									limit = {
										any_of_scopes = {
											array = EaW_controlled_states_with_winter

											check_variable = { EaW_state_winter_grade_var > 2 }
										}
									}

									set_variable = { EaW_country_winter_dynamic_modifier_var = 0 }

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_February = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									clear_EaW_winter_dynamic_modifier_data = yes
								}
							}
						}
						else_if = {
							limit = {
								has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
							}

							adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes

							if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

									FROM.FROM = {
										is_coastal = yes
										is_in_home_area = yes
									}
								}

								remove_EaW_frozen_seas_effects = yes
							}
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 3 }
						}

						if = {
							limit = {
								FROM = { has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier } }
							}

							if = {
								limit = {
									FROM.FROM = { check_variable = { EaW_state_winter_grade_var > 2 } }
								}

								adjust_EaW_controlled_states_with_winter_arrays_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
									}

									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_March = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									FROM.FROM = { calculate_EaW_state_winter_debuffer_in_March = yes }

									EaW_winter_dynamic_modifier_on = yes
								}

								if = {
									limit = {
										FROM.FROM = { is_coastal = yes }
									}

									if = {
										limit = {
											has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
										}

										if = {
											limit = {
												FROM.FROM = {
													is_in_home_area = yes

													check_variable = { EaW_state_winter_grade_var = 3 }
												}
											}

											remove_EaW_frozen_seas_effects = yes
										}
									}

									if = {
										limit = {
											FROM = {
												check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.6 }

												NOT = {
													has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

													any_of_scopes = {
														array = controlled_states

														is_coastal = yes
														is_in_home_area = yes

														check_variable = { EaW_state_winter_grade_var < 4 }
													}
												}
											}
										}

										FROM = { add_EaW_frozen_seas_dynamic_effects = yes }
									}
								}
							}
							else_if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
								}

								adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

										FROM.FROM = {
											is_coastal = yes
											is_in_home_area = yes
										}
									}

									remove_EaW_frozen_seas_effects = yes
								}
							}

							FROM = {
								remove_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }

								if = {
									limit = {
										any_of_scopes = {
											array = EaW_controlled_states_with_winter

											check_variable = { EaW_state_winter_grade_var > 2 }
										}
									}

									set_variable = { EaW_country_winter_dynamic_modifier_var = 0 }

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_March = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									clear_EaW_winter_dynamic_modifier_data = yes
								}
							}
						}
						else_if = {
							limit = {
								has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
							}

							adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes

							if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

									FROM.FROM = {
										is_coastal = yes
										is_in_home_area = yes
									}
								}

								remove_EaW_frozen_seas_effects = yes
							}
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 4 }
						}

						if = {
							limit = {
								FROM = { has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier } }
							}

							if = {
								limit = {
									FROM.FROM = { check_variable = { EaW_state_winter_grade_var > 3 } }
								}

								adjust_EaW_controlled_states_with_winter_arrays_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
									}

									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_April = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									FROM.FROM = { calculate_EaW_state_winter_debuffer_in_April = yes }

									EaW_winter_dynamic_modifier_on = yes
								}

								if = {
									limit = {
										FROM.FROM = { is_coastal = yes }
									}

									if = {
										limit = {
											has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }
										}

										if = {
											limit = {
												FROM.FROM = {
													is_in_home_area = yes

													check_variable = { EaW_state_winter_grade_var = 4 }
												}
											}

											remove_EaW_frozen_seas_effects = yes
										}
									}

									if = {
										limit = {
											FROM = {
												check_variable = { NTR_icebreakers_convoys_reversed_ratio_var > 0.8 }

												NOT = {
													has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

													any_of_scopes = {
														array = controlled_states

														is_coastal = yes
														is_in_home_area = yes

														check_variable = { EaW_state_winter_grade_var < 5 }
													}
												}
											}
										}

										FROM = { add_EaW_frozen_seas_dynamic_effects = yes }
									}
								}
							}
							else_if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
								}

								adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

										FROM.FROM = {
											is_coastal = yes
											is_in_home_area = yes
										}
									}

									remove_EaW_frozen_seas_effects = yes
								}
							}

							FROM = {
								remove_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }

								if = {
									limit = {
										any_of_scopes = {
											array = EaW_controlled_states_with_winter

											check_variable = { EaW_state_winter_grade_var > 3 }
										}
									}

									set_variable = { EaW_country_winter_dynamic_modifier_var = 0 }

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_April = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									clear_EaW_winter_dynamic_modifier_data = yes
								}
							}
						}
						else_if = {
							limit = {
								has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
							}

							adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes

							if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

									FROM.FROM = {
										is_coastal = yes
										is_in_home_area = yes
									}
								}

								remove_EaW_frozen_seas_effects = yes
							}
						}
					}
					else_if = {
						limit = {
							check_variable = { global.month = 5 }
						}
						
						if = {
							limit = {
								FROM = { has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier } }
							}

							if = {
								limit = {
									FROM.FROM = { check_variable = { EaW_state_winter_grade_var > 4 } }
								}

								adjust_EaW_controlled_states_with_winter_arrays_on_state_control_changed = yes

								if = {
									limit = {
										has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
									}

									prepare_EaW_winter_dynamic_modifier_data_for_recalculation = yes

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_May = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									FROM.FROM = { calculate_EaW_state_winter_debuffer_in_May = yes }

									EaW_winter_dynamic_modifier_on = yes
								}
							}
							else_if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
								}

								adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes
							}

							if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

									FROM.FROM = {
										is_coastal = yes
										is_in_home_area = yes
									}
								}

								remove_EaW_frozen_seas_effects = yes
							}

							FROM = {
								remove_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }

								if = {
									limit = {
										any_of_scopes = {
											array = EaW_controlled_states_with_winter

											check_variable = { EaW_state_winter_grade_var > 5 }
										}
									}

									set_variable = { EaW_country_winter_dynamic_modifier_var = 0 }

									for_each_scope_loop = {
										array = EaW_controlled_states_with_winter

										calculate_EaW_state_winter_debuffer_in_May = yes
									}

									calculate_EaW_winter_dynamic_modifier_effects = yes
								}
								else = {
									clear_EaW_winter_dynamic_modifier_data = yes
								}
							}
						}
						else_if = {
							limit = {
								has_dynamic_modifier = { modifier = EaW_winter_dynamic_modifier }
							}

							adjust_EaW_winter_dynamic_modifier_on_state_control_changed = yes

							if = {
								limit = {
									has_dynamic_modifier = { modifier = EaW_frozen_seas_dynamic_modifier }

									FROM.FROM = {
										is_coastal = yes
										is_in_home_area = yes
									}
								}

								remove_EaW_frozen_seas_effects = yes
							}
						}
					}
				}
			}

			if = {
				limit = {
					FROM.FROM = { has_state_flag = NTR_state_control_lost_flag }
				}

				if = {
					limit = {
						FROM.FROM = { is_core_of = ROOT }

						NOT = { has_country_flag = NTR_united_northern_front_flag }
					}

					set_demilitarized_zone = yes
					add_state_modifier = {
						modifier = {
							local_building_slots_factor = -1
							local_factories = -1
							local_resources = -1
						}
					}
				}
				else = {
					set_demilitarized_zone = no
					add_state_modifier = {
						modifier = {
							local_building_slots_factor = 1
							local_factories = 1
							local_resources = 1
						}
					}
				}
			}

			if = {
				limit = {
					FROM = { original_tag = NTR }
				}

				FROM = {
					if = {
						limit = {
							has_war = no
						}

						country_event = { id = Ntribes.999 hours = 1 }
					}

					if = {
						limit = {
							NOT = {
								has_decision = NTR_solve_famine_problem

								has_country_flag = NTR_average_country_agricultural_production_recalculation_flag
							}
						}

						set_country_flag = {
							flag = NTR_average_country_agricultural_production_recalculation_flag
							days = 1
							value = 1
						}

						set_variable = { NTR_average_country_agricultural_production_var = 0 }

						if = {
							limit = {
								has_global_flag = EaW_winter_system_on_global_flag
							}
							
							for_each_scope_loop = {
								array = controlled_states

								if = {
									limit = {
										has_variable = EaW_state_winter_debuffer_var
									}

									add_to_variable = { ROOT.NTR_average_country_agricultural_production_var = EaW_state_winter_debuffer_var }
								}
								else = {
									add_to_variable = { ROOT.NTR_average_country_agricultural_production_var = 0.5 }
								}
							}
						}
						else = {
							for_each_scope_loop = {
								array = controlled_states

								if = {
									limit = {
										has_variable = EaW_state_winter_grade_var
									}

									add_to_variable = { ROOT.NTR_average_country_agricultural_production_var = EaW_state_winter_grade_var }
								}
								else = {
									subtract_from_variable = { ROOT.NTR_average_country_agricultural_production_var = 5 }
								}
							}

							divide_variable = { NTR_average_country_agricultural_production_var = -10 }
						}

						divide_variable = { NTR_average_country_agricultural_production_var = num_controlled_states }
					}
				}
			}

			if = {
				limit = {
					FROM.FROM = { state = 344 }
					original_tag = CRY
					has_government = democratic
					NOT = { has_idea = crystal_heart }
				}
				add_ideas = crystal_heart
			}
			if = {
				limit = {
					FROM.FROM = { state = 381 }
					NOT = { has_idea = owns_skyfall }
					OR = { NOT = { num_of_civilian_factories > 50 } NOT = { num_of_military_factories > 25 } }
				}
				add_ideas = owns_skyfall
				break = yes
			}
			if = {
				limit = {
					FROM.FROM = { has_state_flag = NTR_the_polar_star_state_flag }
					has_government = democratic
					NOT = { has_idea = NTR_the_polar_star_idea }
				}
				add_ideas = NTR_the_polar_star_idea
				break = yes
			}

			#Liberation stuff
			if = {
				limit = {
					FROM = { tag = CHN }
					original_tag = EQS
					has_war_with = FROM
					FROM.FROM = { owner = { original_tag = EQS } }
				}
				if = {
					limit = {
						FROM.FROM = {
							NOT = { has_state_flag =  state_taken_chn_timeout }
						}
					}
					if = {#Acornage
						limit = {
							FROM.FROM = { state = 136 }
						}
						news_event = { id = cityfall.22 }
					}
					if = {#Tall Tales
						limit = {
							FROM.FROM = { state = 59 }
						}
						news_event = { id = cityfall.23 }
					}
					if = {#Vanhoover
						limit = {
							FROM.FROM = { state = 14 }
						}
						news_event = { id = cityfall.24 }
					}
				}
				FROM.FROM = {
					clr_state_flag =  state_taken_chn_timeout
				}
				break = yes
			}

			if = {
				limit = {
					has_war_with = FROM
					FROM = {
						NOT = { original_tag = ROOT }
					}
					FROM.FROM = {
						is_owned_by = FROM
						NOT = { has_state_flag = state_has_fallen }
					}
				}
				if = {
					limit = {
						tag = YAK
						FROM = { tag = JAK }
						FROM.FROM = { state = 274 }
					}
					country_event = yakistan.29
					break = yes
				}
				if = {
					limit = { tag = CHN }
					if = {
						limit = { FROM = { original_tag = OLE } }
						if = {#Vaverfront
							limit = {
								NOT = { has_global_flag = fall_of_vaverfront_CHN }
								FROM.FROM = { state = 69 }
							}
							news_event = { id = cityfall.1 }
							break = yes
						}
						if = {#Hjortland
							limit = {
								NOT = { has_global_flag = fall_of_hjortland_CHN }
								FROM.FROM = { state = 76 }
							}
							news_event = { id = cityfall.2 }
							break = yes
						}
						if = {#Cervus
							limit = {
								NOT = { has_global_flag = fall_of_cervus_CHN }
								FROM.FROM = { state = 191 }
							}
							news_event = { id = cityfall.3 }
							break = yes
						}
						if = {#Sakara
							limit = {
								NOT = { has_global_flag = fall_of_sakara_CHN }
								FROM.FROM = { state = 194 }
							}
							news_event = { id = cityfall.4 }
							break = yes
						}
						break = yes
					}
					if = {
						limit = { FROM = { original_tag = EQS } }
						if = {#Shire
							limit = {
								NOT = { has_global_flag = fall_of_shire_chn }
								FROM.FROM = { state = 132 }
							}
							news_event = { id = cityfall.7 }
							break = yes
						}
						if = {#Los Pegasus
							limit = {
								NOT = { has_global_flag = fall_of_lospegasus_chn }
								FROM.FROM = { state = 66 }
							}
							news_event = { id = cityfall.8 }
							break = yes
						}
						if = {#Vanhoover
							limit = {
								FROM.FROM = { state = 14 }
							}
							FROM.FROM = {
								set_state_flag = { flag = state_taken_chn_timeout value = 1 days = 60 }
							}
							if = {
								limit = { NOT = { has_global_flag = fall_of_vanhoover_chn } }
								news_event = { id = cityfall.13 }
							}
							break = yes
						}
						if = {#Tall Tales
							limit = {
								FROM.FROM = { state = 59 }
							}
							FROM.FROM = {
								set_state_flag = { flag = state_taken_chn_timeout value = 1 days = 60 }
							}
							if = {
								limit = { NOT = { has_global_flag = fall_of_tall_tales_chn } }
								news_event = { id = cityfall.19 }
							}
							break = yes
						}
						if = {#Acornage
							limit = {
								FROM.FROM = { state = 136 }
							}
							FROM.FROM = {
								set_state_flag = { flag = state_taken_chn_timeout value = 1 days = 60 }
							}
							if = {
								limit = { NOT = { has_global_flag = acornage_taken_chn } }
								FROM = { news_event = { id = cityfall.21 } }
							}
							break = yes
						}
						if = {#Baltimare
							limit = {
								NOT = { has_global_flag = fall_of_baltimare_chn }
								FROM.FROM = { state = 13 }
							}
							news_event = { id = cityfall.20 }
							break = yes
						}
					}
					if = {
						limit = { FROM = { original_tag = CRY } }
						if = {#Crystal City
							limit = {
								NOT = { has_global_flag = fall_of_crystal_chn }
								FROM.FROM = { state = 344 }
							}
							news_event = { id = cityfall.15 }
							break = yes
						}
					}
				}
				if = {#Manehattan
					limit = {
						FROM.FROM = { state = 75 }
					}
					if = {
						limit = {
							FROM = { OR = { original_tag = EQS original_tag = NLR } }
							tag = CHN
							NOT = { has_global_flag = fall_of_manehattan_chn }
						}
						news_event = { id = cityfall.9 }
						break = yes
					}
					if = {
						limit = {
							FROM = { original_tag = NLR }
							original_tag = EQS
							NOT = { has_global_flag = fall_of_manehattan_eqs }
						}
						news_event = { id = cityfall.18 }
						break = yes
					}
				}
				if = {#Canterlot
					limit = {
						FROM.FROM = { state = 3 }
						FROM = { original_tag = EQS }
					}
					if = {
						limit = {
							tag = NLR
							NOT = { has_global_flag = fall_of_canterlot_nlr }
						}
						news_event = { id = cityfall.10 }
						break = yes
					}
					if = {
						limit = {
							tag = STG
							NOT = { has_global_flag = fall_of_canterlot_stg }
						}
						news_event = { id = cityfall.12 }
						break = yes
					}
					if = {
						limit = {
							tag = CHN
							NOT = { has_global_flag = fall_of_canterlot_chn }
						}
						news_event = { id = cityfall.14 }
						break = yes
					}
					if = {
						limit = {
							original_tag = CRY
							has_government = fascism
							has_country_leader = { ruling_only = yes name = "King Sombra" }
							NOT = { has_global_flag = fall_of_canterlot_cry }
						}
						news_event = { id = cityfall.17 }
						break = yes
					}
				}
				if = {#Stalliongrad
					limit = {
						FROM.FROM = { state = 153 }
						FROM = { tag = STG }
					}
					if = {
						limit = {
							OR = { original_tag = EQS original_tag = NLR }
							NOT = { has_global_flag = fall_of_stalliongrad_eqs }
						}
						news_event = { id = cityfall.11 }
						break = yes
					}
					if = {
						limit = {
							tag = CHN
							NOT = { has_global_flag = fall_of_stalliongrad_chn }
						}
						news_event = { id = cityfall.16 }
						break = yes
					}
				}
				if = {#River City
					limit = {
						FROM.FROM = { state = 619 }
						NOT = { has_global_flag = fall_of_river_city }
					}
					news_event = { id = cityfall.5 }
					break = yes
				}
				if = {#Sunset
					limit = {
						FROM.FROM = { state = 356 }
						NOT = { has_global_flag = fall_of_sunset_city }
					}
					news_event = { id = cityfall.6 }
					break = yes
				}
				if = {#Hellquill
					limit = {
						FROM = { tag = HLQ }
						AND = {
							ROOT = { original_tag = DMT }
							OR = {
								ROOT = { has_government = fascism }
								ROOT = { has_government = communism }
							}
						}
						FROM.FROM = { state = 537 }
						NOT = { has_global_flag = fall_of_Hellquill_city }
					}
					ROOT = {
						country_event = { id = diamond_mountain.102 }
					}
					break = yes
				}
				if = {#Vesalipolis
					limit = {
						FROM.FROM = { state = 251 }
						NOT = { has_global_flag = fall_of_vesalipolis }
					}
					news_event = cityfall.25
					break = yes
				}
				if = {#Yakistown
					limit = {
						FROM.FROM = { state = 11 }
						NOT = { has_global_flag = fall_of_yakistown }
					}
					news_event = cityfall.26
					break = yes
				}
				if = {#Vraks
					limit = {
						FROM.FROM = { state = 259 }
						NOT = { has_global_flag = fall_of_vraks }
					}
					news_event = cityfall.27
					break = yes
				}
				if = {#Weter
					limit = {
						FROM.FROM = { state = 243 }
						NOT = { has_global_flag = fall_of_weter }
					}
					news_event = cityfall.28
					break = yes
				}
				if = {#Griffenheim
					limit = {
						FROM.FROM = { state = 382 }
						NOT = { has_global_flag = fall_of_griffenheim }
					}
					news_event = cityfall.29
					break = yes
				}
				if = {#Griffonstone
					limit = {
						FROM.FROM = { state = 389 }
						NOT = { has_global_flag = fall_of_griffonstone }
					}
					news_event = cityfall.30
					break = yes
				}
				if = {#Aquila
					limit = {
						ROOT = {
							is_jer_country = no
						}
						FROM.FROM = { state = 377 }
						NOT = { has_global_flag = fall_of_aquila }
					}
					news_event = cityfall.31
					break = yes
				}
				if = {#Karthin
					limit = {
						FROM.FROM = { state = 371 }
						NOT = { has_global_flag = fall_of_karthin }
					}
					news_event = cityfall.32
					break = yes
				}
				if = {#Lake City
					limit = {
						FROM.FROM = { state = 387 }
						NOT = { has_global_flag = fall_of_lakecity }
					}
					news_event = cityfall.33
					break = yes
				}
				if = {#Skyfall
					limit = {
						FROM.FROM = { state = 381 }
						NOT = { has_global_flag = fall_of_skyfall }
					}
					news_event = cityfall.34
					break = yes
				}
				if = {#New Skynavia
					limit = {
						FROM.FROM = { state = 522 }
						NOT = { has_global_flag = fall_of_new_skynavia }
					}
					news_event = cityfall.35
					break = yes
				}
				if = {#Cloudbury
					limit = {
						FROM.FROM = { state = 485 }
						NOT = { has_global_flag = fall_of_cloudbury }
					}
					news_event = cityfall.36
					break = yes
				}
				if = {#Bronzecross
					limit = {
						FROM.FROM = { state = 492 }
						NOT = { has_global_flag = fall_of_bronzecross }
					}
					every_country = {
						limit = {
							OR = {
								is_griffon_empire_country = yes
								any_neighbor_country = {
									is_griffon_empire_country = yes
								}
							}
						}
						news_event = cityfall.37
					}
					break = yes
				}
			}
		}
	}

	#FROM is country getting invited.
	on_offer_join_faction = {
		effect = {
			if = {
				limit = {
					has_government = communism
					FROM = {
						has_idea = LCT_anti_commie_pact
					}
				}
				FROM = {
					remove_ideas = LCT_anti_commie_pact
				}
			}
			if = {
				limit = {
					original_tag = MIT
					has_completed_focus = MIT_SIC_assistance
				}
				FROM = {
					add_to_tech_sharing_group = MIT_research_group
				}
			}
			if = {
				limit = {
					original_tag = MIT
					has_completed_focus = MIT_command_council
				}
				FROM = {
					add_ideas = MIT_command_council_idea
				}
			}
		}
	}

	#FROM is faction leader on join faction requests. THIS DOES NOT FIRE ON ADD_TO_FACTION EFFECT! USE ON_OFFER_JOIN_FACTION!
	on_join_faction = {
		effect = {
			if = {
				limit = {
					has_idea = LCT_anti_commie_pact
					FROM = {
						has_government = communism
					}
				}
				remove_ideas = LCT_anti_commie_pact
			}
			if = {
				limit = {
					FROM = { is_river_fed_member = yes }
					NOT = { tag = HLQ }
					HLQ = { has_idea = HLQ_honourary_member }
				}
				diplomatic_relation = {
					country = HLQ
					relation = non_aggression_pact
					active = yes
				}
			}
			if = {
				limit = {
					FROM = {
						original_tag = MIT
						has_completed_focus = MIT_SIC_assistance
					}
				}
				add_to_tech_sharing_group = MIT_research_group
			}
			if = {
				limit = {
					NOT = {
						has_idea = MIT_command_council_idea
					}
					FROM = {
						original_tag = MIT
						has_completed_focus = MIT_command_council
						NOT = {
							has_completed_focus = MIT_coalition_exchange_students
						}
					}
				}
				add_ideas = MIT_command_council_idea
			}
			if = {
				limit = {
					NOT = { has_idea = MIT_command_council_idea }
					NOT = { has_idea = MIT_command_council_idea2 }
					FROM = {
						original_tag = MIT
						has_completed_focus = MIT_coalition_exchange_students
					}
				}
				add_ideas = MIT_command_council_idea2
			}
		}
	}

	# ROOT is country, this is ran for every country
	on_daily = {
		effect = {
			update_global_arrays = yes
			adjust_research_modifier = yes
			daily_fix_weapon_techs = yes
			if = {
				limit = {
					NOT = { has_global_flag = river_federation_founded }
					is_river_fed_member = yes
					is_faction_leader = yes
					any_allied_country = {
						has_capitulated = no
					}
					NOT = { has_idea = RIV_leader_surrender_bonus }
				}
				add_ideas = RIV_leader_surrender_bonus
			}
			if = {
				limit = { has_idea = GRF_got_mercs_delayed }
				add_to_variable = { delayed_merc_payment_GRF = 1 }
			}
			if = {
				limit = { has_idea = TRD_got_mercs_delayed }
				add_to_variable = { delayed_merc_payment_TRD = 1 }
			}
			if = {
				limit = {
					has_tech = nukes
				}
				if = {
					limit = {
						has_idea = no_crystals_reactor_prevent
						check_variable = { resource@crystals > -1 }
					}
					remove_ideas = no_crystals_reactor_prevent
				}
				else_if = {
					limit = { check_variable = { resource@crystals < 0 } }
					add_ideas = no_crystals_reactor_prevent
				}
				if = {
					limit = {
						NOT = { has_global_flag = first_nuke_done }
						num_of_nukes > 0.99
					}
					news_event = { id = nuke_first.1 days = 1 }
					set_global_flag = first_nuke_done
				}
			}
			if = {
				limit = {
					OR = {
						NOT = { has_event_target = griffonian_empire }
						if = {
							limit = { has_event_target = griffonian_empire }
							event_target:griffonian_empire = { exists = no }
						}
					}
					exists = yes
					OR = {
						AND = {
							owns_state = 382
							has_cosmetic_tag = GRIF_EMPIRE
						}
						if = {
							limit = {
								382 = {
									owner = { NOT = { has_cosmetic_tag = GRIF_EMPIRE } }
								}
							}
							tag = GRI
						}
					}
				}
				save_global_event_target_as = griffonian_empire
				set_variable = { global.griffonian_empire_var = THIS }
				break = yes
			}
			if = {
				limit = {
					NOT = { has_event_target = longsword }
					exists = yes
					OR = {
						original_tag = LNS
						original_tag = LSM
						original_tag = LSC
					}
				}
				save_global_event_target_as = longsword
				break = yes
			}
			if = {
				limit = {
					OR = {
						NOT = { has_event_target = equestria }
						AND = {
							has_event_target = equestria
							event_target:equestria = {
								NOT = {
									original_tag = EQS
									original_tag = SOL
								}
							}
						}
					}
				}
				if = {
					limit = {
						has_event_target = solar_empire
						event_target:solar_empire = { exists = yes }
					}
					SOL = { save_global_event_target_as = equestria }
					break = yes
				}
				EQS = { save_global_event_target_as = equestria }
				break = yes
			}
			#if = {
			#	limit = {
			#		SRS = {
			#			exists = yes
			#			is_subject = no
			#			has_government = communism
			#			NOT = { has_country_flag = SRS_turned_into_the_PGSC }
			#		}
			#	}
			#	set_variable = { total_sum_of_internationalist_and_communalist_displeasure = 0 }
            #   add_to_variable = { total_sum_of_internationalist_and_communalist_displeasure = displeasure_towards_communards_var }
            #   add_to_variable = { total_sum_of_internationalist_and_communalist_displeasure = displeasure_towards_internationalists_var }
            #   set_temp_variable = { internationalist_displeasure_as_a_percentage_ersatz = displeasure_towards_internationalists_var }
            #   divide_temp_variable = { internationalist_displeasure_as_a_percentage_ersatz = total_sum_of_internationalist_and_communalist_displeasure }
            #   set_variable = { internationalist_displeasure_as_a_percentage = internationalist_displeasure_as_a_percentage_ersatz }
            #   set_temp_variable = { communalist_displeasure_as_a_percentage_ersatz = displeasure_towards_communards_var }
            #   divide_temp_variable = { communalist_displeasure_as_a_percentage_ersatz = total_sum_of_internationalist_and_communalist_displeasure }
            #   set_variable = { communalist_displeasure_as_a_percentage = communalist_displeasure_as_a_percentage_ersatz }
			#}
		}
	}

	# country
	on_new_term_election = {
		effect = {
			### Lake City ###
			if = {
				limit = { tag = LCT }
				country_event = { id = lakecity.9 }
				country_event = { id = lakecity.901 }
				country_event = { id = lakecity.902 }
			}
			if = {
				limit = { tag = BRZ }
				country_event = { id = bronzehill_election_event.3 }
			}
		}
	}

	#ROOT is subject FROM is overlord
	on_subject_autonomy_level_change = {
		effect = {
			#Add to Equestria tech group
			if = {
				limit = {
					overlord = { is_in_tech_sharing_group = equestrian_research }
				}
				add_to_tech_sharing_group = equestrian_research
			}

			if = {
				limit = {
					overlord = {
						has_country_flag = river_federation_founder
					}
					OR = {
						has_autonomy_state = autonomy_integrated_puppet
						has_autonomy_state = autonomy_reichskommissariat
					}
					is_river_fed_member = yes
					NOT = {
						has_idea = RIV_river_union_member1
						has_idea = RIV_river_union_member2
					}
				}
				remove_ideas = {
					RIV_member_state
					RIV_rcsc_member
					RIV_rec_member1
					RIV_rec_member2
					RIV_rec_member3
					RIV_rec_member4
				}
				add_ideas = RIV_river_union_member1
			}
		}
	}

	on_leave_faction = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_leave_faction FROM = [From.GetName]"
			if = {
				limit = {
					is_river_fed_member = yes
				}
				RIV_leave_fed_no_ally = yes
			}
			if = {
				limit = {
					has_idea = RCT_subtle_creep1
				}
				remove_ideas = RCT_subtle_creep1
			}
			else_if = {
				limit = {
					has_idea = RCT_subtle_creep1_NIM
				}
				remove_ideas = RCT_subtle_creep1_NIM
			}
			if = {
				limit = {
					has_idea = RCT_subtle_creep2
				}
				remove_ideas = RCT_subtle_creep2
			}
			else_if = {
				limit = {
					has_idea = RCT_subtle_creep2_NIM
				}
				remove_ideas = RCT_subtle_creep2_NIM
			}
			if = {
				limit = {
					has_idea = RCT_subtle_creep3
				}
				remove_ideas = RCT_subtle_creep3
			}
			else_if = {
				limit = {
					has_idea = RCT_subtle_creep3_NIM
				}
				remove_ideas = RCT_subtle_creep3_NIM
			}
			if = {
				limit = {
					has_idea = RCT_subtle_creep4
				}
				remove_ideas = RCT_subtle_creep4
			}
			else_if = {
				limit = {
					has_idea = RCT_subtle_creep4_NIM
				}
				remove_ideas = RCT_subtle_creep4_NIM
			}
			if = {
				limit = {
					has_idea = RCT_subtle_creep5
				}
				remove_ideas = RCT_subtle_creep5
			}
			else_if = {
				limit = {
					has_idea = RCT_subtle_creep5_NIM
				}
				remove_ideas = RCT_subtle_creep5_NIM
			}
			if = {
				limit = {
					has_idea = RCT_subtle_creep6
				}
				remove_ideas = RCT_subtle_creep6
			}
			else_if = {
				limit = {
					has_idea = RCT_subtle_creep6_NIM
				}
				remove_ideas = RCT_subtle_creep6_NIM
			}
			if = {
				limit = {
					has_idea = RCT_subtle_creep7
				}
				remove_ideas = RCT_subtle_creep7
			}
			else_if = {
				limit = {
					has_idea = RCT_subtle_creep8
				}
				remove_ideas = RCT_subtle_creep8
			}
		}
	}

	# From is owner country
	on_army_leader_lost_combat = {
		effect = {
			if = {
				limit = {
					has_id = 323
					set_temp_variable = { chance = 0.12 }
					check_variable = { random < chance }
					NOT = { has_trait = wounded }
				}
				retire = yes
				unit_leader_event = { id = wingbardy.1 }
			}
		}
	}
	
	# FROM is owner country, ROOT is the unit leader
	on_unit_leader_created = {
		effect = {
			if = {
				limit = {
					FROM = { original_tag = NTR }
				}
				add_unit_leader_trait = winter_expert
				random_list = {
					20 = { add_unit_leader_trait = winter_specialist }
					80 = {  }
				}
				if = {
					limit = {
						FROM = {
							any_army_leader = { has_trait = tribal_warchief }
						}
					}
					
					add_unit_leader_trait = tribal_warchief
				}
				else_if = {
					limit = {
						FROM = {
							any_army_leader = { has_trait = warlord_of_the_past_millennium }
						}
					}
					
					add_unit_leader_trait = warlord_of_the_past_millennium
				}
				else_if = {
					limit = {
						FROM = {
							any_army_leader = { has_trait = commander_of_the_past_century }
						}
					}
					
					add_unit_leader_trait = commander_of_the_past_century
				}
			}
		}
	}
	
	# FROM = country on whom the wargoal is being generated, ROOT = country generating wargoal
	on_generate_wargoal = {
		effect = {
			log = "[GetDateText] [Root.GetName] on_generate_wargoal FROM = [From.GetName]"
		}
	}
}
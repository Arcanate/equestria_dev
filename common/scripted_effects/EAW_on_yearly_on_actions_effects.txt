adjust_northern_winter_dynamic_modifier = {
	if = {
		limit = {
			has_dynamic_modifier = { modifier = northern_winter_dynamic_modifier }
		}
		
		remove_dynamic_modifier = { modifier = northern_winter_dynamic_modifier }
		add_northern_winter_dynamic_modifier_effects = yes
	}
}

add_northern_winter_dynamic_modifier_effects = {
	if = {
		limit = {
			has_idea = modern_society
		}
		
		set_temp_variable = { northern_winter_dynamic_modifier_debuffer_temp_var = -0.1 }
	}
	else_if = {
		limit = { # >= outdated
			check_variable = {
				var = EaW_society_development_var
				compare = greater_than_or_equals
				value = 5
			}
		}
		
		set_temp_variable = { northern_winter_dynamic_modifier_debuffer_temp_var = -0.2 }
	}
	else_if = {
		limit = { # >= industrializing
			check_variable = {
				var = EaW_society_development_var
				compare = greater_than_or_equals
				value = 4
			}
		}
		
		set_temp_variable = { northern_winter_dynamic_modifier_debuffer_temp_var = -0.3 }
	}
	else_if = {
		limit = { # >= agrarian or communal
			check_variable = {
				var = EaW_society_development_var
				compare = greater_than_or_equals
				value = 2
			}
		}
		
		if = {
			limit = {
				has_completed_focus = NTR_autonomous_communes
			}
			
			set_temp_variable = { northern_winter_dynamic_modifier_debuffer_temp_var = -0.2 }
		}
		else_if = {
			limit = {
				has_completed_focus = NTR_modernize_communes
			}
			
			set_temp_variable = { northern_winter_dynamic_modifier_debuffer_temp_var = -0.3 }
		}
		else = {
			set_temp_variable = { northern_winter_dynamic_modifier_debuffer_temp_var = -0.4 }
		}
	}
	else = { # detached or tribal
		set_temp_variable = { northern_winter_dynamic_modifier_debuffer_temp_var = -0.5 }
	}
	
	if = { # all NTR cores has same weather conditions, but it can improved with calculations of variables which will represent current state weather conditions
		limit = {
			has_country_flag = moderate_winter
		}
		
		divide_temp_variable = { northern_winter_dynamic_modifier_debuffer_temp_var = 2 }
	}
	else_if = {
		limit = {
			has_country_flag = soft_winter
		}
		
		divide_temp_variable = { northern_winter_dynamic_modifier_debuffer_temp_var = 3 }
	}
	
	set_variable = { var_northern_winter_production_max_efficiency_debuff = 0.5 }
	add_to_variable = { var_northern_winter_production_max_efficiency_debuff = modifier@production_factory_max_efficiency_factor }
	multiply_variable = { var_northern_winter_production_max_efficiency_debuff = northern_winter_dynamic_modifier_debuffer_temp_var }
	
	set_variable = { var_northern_winter_start_efficiency_debuff = 0.1 }
	add_to_variable = { var_northern_winter_start_efficiency_debuff = modifier@production_factory_start_efficiency_factor }
	multiply_variable = { var_northern_winter_start_efficiency_debuff = northern_winter_dynamic_modifier_debuffer_temp_var }
	
	set_variable = { var_northern_winter_efficiency_gain_debuff = 1 }
	add_to_variable = { var_northern_winter_efficiency_gain_debuff = modifier@production_factory_efficiency_gain_factor }
	multiply_variable = { var_northern_winter_efficiency_gain_debuff = northern_winter_dynamic_modifier_debuffer_temp_var }
	
	set_variable = { var_northern_winter_line_change_debuff = 1 }
	add_to_variable = { var_northern_winter_line_change_debuff = modifier@line_change_production_efficiency_factor }
	multiply_variable = { var_northern_winter_line_change_debuff = northern_winter_dynamic_modifier_debuffer_temp_var }
	
	set_variable = { var_northern_winter_factory_capacity_debuff = 1 }
	add_to_variable = { var_northern_winter_factory_capacity_debuff = modifier@industrial_capacity_factory }
	multiply_variable = { var_northern_winter_factory_capacity_debuff = northern_winter_dynamic_modifier_debuffer_temp_var }
	
	set_variable = { var_northern_winter_dockyard_capacity_debuff = 1 }
	add_to_variable = { var_northern_winter_dockyard_capacity_debuff = modifier@industrial_capacity_dockyard }
	multiply_variable = { var_northern_winter_dockyard_capacity_debuff = northern_winter_dynamic_modifier_debuffer_temp_var }
	
	set_variable = { var_northern_winter_buildings_speed_debuff = 1 }
	add_to_variable = { var_northern_winter_buildings_speed_debuff = modifier@production_speed_buildings_factor }
	multiply_variable = { var_northern_winter_buildings_speed_debuff = northern_winter_dynamic_modifier_debuffer_temp_var }
	
	set_variable = { var_northern_winter_research_speed_debuff = 1 }
	add_to_variable = { var_northern_winter_research_speed_debuff = modifier@research_speed_factor }
	multiply_variable = { var_northern_winter_research_speed_debuff = northern_winter_dynamic_modifier_debuffer_temp_var }
	
	set_variable = { var_northern_winter_local_resources_debuff = 1 }
	add_to_variable = { var_northern_winter_local_resources_debuff = modifier@local_resources_factor }
	multiply_variable = { var_northern_winter_local_resources_debuff = northern_winter_dynamic_modifier_debuffer_temp_var }
	
	set_variable = { var_northern_winter_MONTHLY_POPULATION_debuff = 1 }
	add_to_variable = { var_northern_winter_MONTHLY_POPULATION_debuff = modifier@MONTHLY_POPULATION }
	multiply_variable = { var_northern_winter_MONTHLY_POPULATION_debuff = northern_winter_dynamic_modifier_debuffer_temp_var }
	
	set_variable = { var_northern_winter_consumer_goods_debuff = modifier@consumer_goods_factor }
	multiply_variable = { var_northern_winter_consumer_goods_debuff = northern_winter_dynamic_modifier_debuffer_temp_var }
	multiply_variable = { var_northern_winter_consumer_goods_debuff = -1 }
	
	add_dynamic_modifier = { modifier = northern_winter_dynamic_modifier }
	
	adjust_research_modifier = yes
}

add_frozen_seas_dynamic_modifier_effects = {
	multiply_variable = { NTR_icebreakers_reverse_ratio = -0.75 } # 0-75% debuff of trade bonuses
	
	set_variable = { var_frozen_seas_min_export_debuff = modifier@min_export }
	
	set_variable = { var_frozen_seas_trade_opinion_debuff = 0.5 }
	add_to_variable = { var_frozen_seas_trade_opinion_debuff = modifier@trade_opinion_factor }
	
	clamp_variable = {
		var = var_frozen_seas_trade_opinion_debuff
		min = 0
	}
	
	if = {
		limit = {
			has_idea = free_trade
		}
		
		if = {
			limit = {
				has_idea = NTR_free_trade_idea
			}
			
			set_variable = { var_frozen_seas_factory_capacity_debuff = 0.2 }
			set_variable = { var_frozen_seas_dockyard_capacity_debuff = 0.2 }
			set_variable = { var_frozen_seas_buildings_speed_debuff = 0.2 }
			set_variable = { var_frozen_seas_research_speed_debuff = 0.125 }
		}
		else_if = {
			limit = {
				has_idea = NTR_extensive_free_trade_idea
			}
			
			set_variable = { var_frozen_seas_factory_capacity_debuff = 0.25 }
			set_variable = { var_frozen_seas_dockyard_capacity_debuff = 0.25 }
			set_variable = { var_frozen_seas_buildings_speed_debuff = 0.25 }
			set_variable = { var_frozen_seas_research_speed_debuff = 0.15 }
		}
		else = {
			set_variable = { var_frozen_seas_factory_capacity_debuff = 0.15 }
			set_variable = { var_frozen_seas_dockyard_capacity_debuff = 0.15 }
			set_variable = { var_frozen_seas_buildings_speed_debuff = 0.15 }
			set_variable = { var_frozen_seas_research_speed_debuff = 0.1 }
		}
	}
	else_if = {
		limit = {
			has_idea = export_focus
		}
		
		set_variable = { var_frozen_seas_factory_capacity_debuff = 0.1 }
		set_variable = { var_frozen_seas_dockyard_capacity_debuff = 0.1 }
		set_variable = { var_frozen_seas_buildings_speed_debuff = 0.1 }
		set_variable = { var_frozen_seas_research_speed_debuff = 0.05 }
	}
	else = { # limited exports
		set_variable = { var_frozen_seas_factory_capacity_debuff = 0.05 }
		set_variable = { var_frozen_seas_dockyard_capacity_debuff = 0.05 }
		set_variable = { var_frozen_seas_buildings_speed_debuff = 0.05 }
		set_variable = { var_frozen_seas_research_speed_debuff = 0.01 }
	}
	
	multiply_variable = { var_frozen_seas_min_export_debuff = NTR_icebreakers_reverse_ratio }
	multiply_variable = { var_frozen_seas_trade_opinion_debuff = NTR_icebreakers_reverse_ratio }
	multiply_variable = { var_frozen_seas_factory_capacity_debuff = NTR_icebreakers_reverse_ratio }
	multiply_variable = { var_frozen_seas_dockyard_capacity_debuff = NTR_icebreakers_reverse_ratio }
	multiply_variable = { var_frozen_seas_buildings_speed_debuff = NTR_icebreakers_reverse_ratio }
	multiply_variable = { var_frozen_seas_research_speed_debuff = NTR_icebreakers_reverse_ratio }
	
	add_dynamic_modifier = { modifier = frozen_seas_dynamic_modifier }
}
#	Example:
# 
#	example_dynamic_modifier = {
#		icon = "GFX_idea_unknown" # optional, will show up in guis if icon is specified
#		enable = { always = yes } #optional, the modifier won't apply if not enabled
#		remove_trigger = { always = no } #optional, will remove the modifier if true
#
#		# list of modifiers
#		fuel_cost = 321
#		max_fuel = var_max_fuel # will be taken from a variable
#	}
#
#
#	In a script file:
#
#	effect = {
#		add_dynamic_modifier = {
#			modifier = example_dynamic_modifier
#			scope = GER # optional, if you specify this your dynamic modifier scoped to this scope (root is the effect scope)
#			days = 14 # optional, will be removed after this many days passes
#		}
#	}
#
#	can be added to countries, states or unit leaders
#	will only updated daily, unless forced by force_update_dynamic_modifier effect

	research_pre_ironclad_modifier = {
		enable = { always = yes } #optional, the modifier won't apply if not enabled
		research_speed_factor = var_research_adjustment_pre_ironclad
	}
	
	northern_winter = {
		enable = { always = yes } #optional, the modifier won't apply if not enabled
		production_factory_max_efficiency_factor = var_production_max_efficiency_debuff
		production_factory_efficiency_gain_factor = var_efficiency_gain_debuff
		production_factory_start_efficiency_factor = var_start_efficiency_debuff
		line_change_production_efficiency_factor = var_line_change_debuff
		industrial_capacity_factory = var_northern_winter_factory_capacity_debuff
		industrial_capacity_dockyard = var_northern_winter_dockyard_capacity_debuff
		production_speed_buildings_factor = var_northern_winter_buildings_speed_debuff
		research_speed_factor = var_northern_winter_research_speed_debuff
		local_resources_factor = var_local_resources_debuff
		MONTHLY_POPULATION = var_MONTHLY_POPULATION_debuff
		#consumer_goods_factor = var_consumer_goods_debuff
	}
	
	frosen_seas = {
		enable = { always = yes } #optional, the modifier won't apply if not enabled
		industrial_capacity_factory = var_frosen_seas_factory_capacity_debuff
		industrial_capacity_dockyard = var_frosen_seas_dockyard_capacity_debuff
		production_speed_buildings_factor = var_frosen_seas_buildings_speed_debuff
		research_speed_factor = var_frosen_seas_research_speed_debuff
		trade_opinion_factor = var_trade_opinion_debuff
		min_export = var_min_export_debuff
	}
	
	NTR_traditionalism_influence = {
		enable = { always = yes } #optional, the modifier won't apply if not enabled
		neutrality_drift = var_neutrality_drift # changes through events and decisions, not through recalculation
		political_power_factor = var_neutrality_influence_political_power_debuff
		stability_factor = var_neutrality_influence_stability
		war_support_factor = var_neutrality_influence_war_support_debuff
		enemy_justify_war_goal_time = var_enemy_justify_war_goal_buff
	}
	
	NTR_communism_influence = {
		enable = { always = yes } #optional, the modifier won't apply if not enabled
		communism_drift = var_communism_drift # changes through events and decisions, not through recalculation
		political_power_factor = var_communism_influence_political_power_debuff
		stability_factor = var_communism_influence_stability_debuff
		war_support_factor = var_communism_influence_war_support_debuff
		conscription_factor = var_communism_influence_conscription_debuff
		training_time_army_factor = var_communism_influence_training_time_debuff
	}
	
	NTR_harmonic_influence = {
		enable = { always = yes } #optional, the modifier won't apply if not enabled
		democratic_drift = var_democratic_drift # changes through events and decisions, not through recalculation
		political_power_factor = var_harmonic_tribes_political_power_debuff
		stability_factor = var_harmonic_tribes_stability_debuff
		war_support_factor = var_harmonic_tribes_war_support_debuff
		conscription_factor = var_harmonic_tribes_conscription_debuff
		training_time_army_factor = var_harmonic_tribes_training_time_debuff
	}
	
	de_facto_non_core_state = {
		enable = { always = yes } #optional, the modifier won't apply if not enabled
		remove_trigger = { OWNER = { NOT = { tag = NTR } } } #optional, will remove the modifier if true
		local_manpower = -0.8
	}
	
	particulary_core_state = {
		enable = { always = yes } #optional, the modifier won't apply if not enabled
		remove_trigger = { OWNER = { NOT = { tag = NTR } } } #optional, will remove the modifier if true
		local_manpower = -0.6
	}
	
	power_for_the_strongest = {
		enable = { always = yes } #optional, the modifier won't apply if not enabled
		remove_trigger = { OWNER = { NOT = { tag = NTR } } } #optional, will remove the modifier if true
		local_non_core_manpower = 0.18
	}